<?php
/**
 * ProjectInvoiceTerm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProjectInvoiceTerm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectInvoiceTerm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectInvoiceTerm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'invoice_line' => '\Swagger\Client\Model\CondensedInvoiceLine',
        'description' => 'string',
        'percentage' => 'string',
        'subtotal' => 'string',
        'vat_tariff_percentage' => 'string',
        'vat_tariff_object' => '\Swagger\Client\Model\CondensedVatTariff',
        'invoiceable_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'invoice_line' => null,
        'description' => null,
        'percentage' => null,
        'subtotal' => null,
        'vat_tariff_percentage' => null,
        'vat_tariff_object' => null,
        'invoiceable_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice_line' => 'invoiceLine',
        'description' => 'description',
        'percentage' => 'percentage',
        'subtotal' => 'subtotal',
        'vat_tariff_percentage' => 'vatTariffPercentage',
        'vat_tariff_object' => 'vatTariffObject',
        'invoiceable_at' => 'invoiceableAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice_line' => 'setInvoiceLine',
        'description' => 'setDescription',
        'percentage' => 'setPercentage',
        'subtotal' => 'setSubtotal',
        'vat_tariff_percentage' => 'setVatTariffPercentage',
        'vat_tariff_object' => 'setVatTariffObject',
        'invoiceable_at' => 'setInvoiceableAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice_line' => 'getInvoiceLine',
        'description' => 'getDescription',
        'percentage' => 'getPercentage',
        'subtotal' => 'getSubtotal',
        'vat_tariff_percentage' => 'getVatTariffPercentage',
        'vat_tariff_object' => 'getVatTariffObject',
        'invoiceable_at' => 'getInvoiceableAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_line'] = isset($data['invoice_line']) ? $data['invoice_line'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['vat_tariff_percentage'] = isset($data['vat_tariff_percentage']) ? $data['vat_tariff_percentage'] : null;
        $this->container['vat_tariff_object'] = isset($data['vat_tariff_object']) ? $data['vat_tariff_object'] : null;
        $this->container['invoiceable_at'] = isset($data['invoiceable_at']) ? $data['invoiceable_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['percentage'] === null) {
            $invalidProperties[] = "'percentage' can't be null";
        }
        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ($this->container['vat_tariff_object'] === null) {
            $invalidProperties[] = "'vat_tariff_object' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the invoice term.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_line
     *
     * @return \Swagger\Client\Model\CondensedInvoiceLine
     */
    public function getInvoiceLine()
    {
        return $this->container['invoice_line'];
    }

    /**
     * Sets invoice_line
     *
     * @param \Swagger\Client\Model\CondensedInvoiceLine $invoice_line invoice_line
     *
     * @return $this
     */
    public function setInvoiceLine($invoice_line)
    {
        $this->container['invoice_line'] = $invoice_line;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description for this invoice term.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProjectInvoiceTerm., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return string
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param string $percentage The percentage of the total sum this invoice term covers.
     *
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal The subtotal for this invoice term.
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets vat_tariff_percentage
     *
     * @return string
     */
    public function getVatTariffPercentage()
    {
        return $this->container['vat_tariff_percentage'];
    }

    /**
     * Sets vat_tariff_percentage
     *
     * @param string $vat_tariff_percentage The vat tariff percentage that was applied to this invoice term.
     *
     * @return $this
     */
    public function setVatTariffPercentage($vat_tariff_percentage)
    {
        $this->container['vat_tariff_percentage'] = $vat_tariff_percentage;

        return $this;
    }

    /**
     * Gets vat_tariff_object
     *
     * @return \Swagger\Client\Model\CondensedVatTariff
     */
    public function getVatTariffObject()
    {
        return $this->container['vat_tariff_object'];
    }

    /**
     * Sets vat_tariff_object
     *
     * @param \Swagger\Client\Model\CondensedVatTariff $vat_tariff_object vat_tariff_object
     *
     * @return $this
     */
    public function setVatTariffObject($vat_tariff_object)
    {
        $this->container['vat_tariff_object'] = $vat_tariff_object;

        return $this;
    }

    /**
     * Gets invoiceable_at
     *
     * @return string
     */
    public function getInvoiceableAt()
    {
        return $this->container['invoiceable_at'];
    }

    /**
     * Sets invoiceable_at
     *
     * @param string $invoiceable_at The date from which the term can be invoiced.
     *
     * @return $this
     */
    public function setInvoiceableAt($invoiceable_at)
    {
        $this->container['invoiceable_at'] = $invoiceable_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


