<?php
/**
 * ContractTerm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContractTerm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContractTerm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContractTerm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'number' => 'string',
        'description' => 'string',
        'sort_index' => 'int',
        'unit' => 'string',
        'amount' => 'string',
        'amount_received' => 'string',
        'partially_amount_received' => 'string',
        'unit_price' => 'string',
        'cost_received' => 'string',
        'partially_cost_received' => 'string',
        'sub_total' => 'string',
        'paid' => 'bool',
        'approved' => 'bool',
        'amount_only' => 'bool',
        'contract_id' => 'int',
        'contract_type' => 'int',
        'project_security_link' => '\Swagger\Client\Model\CondensedProjectSecurityLink',
        'create_delivery_ticket' => 'bool',
        'amount_to_receive' => 'string',
        'cost_to_receive' => 'string',
        'delivery_tickets' => '\Swagger\Client\Model\CondensedDeliveryTicket[]',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'number' => null,
        'description' => null,
        'sort_index' => null,
        'unit' => null,
        'amount' => null,
        'amount_received' => null,
        'partially_amount_received' => null,
        'unit_price' => null,
        'cost_received' => null,
        'partially_cost_received' => null,
        'sub_total' => null,
        'paid' => null,
        'approved' => null,
        'amount_only' => null,
        'contract_id' => null,
        'contract_type' => null,
        'project_security_link' => null,
        'create_delivery_ticket' => null,
        'amount_to_receive' => null,
        'cost_to_receive' => null,
        'delivery_tickets' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'description' => 'description',
        'sort_index' => 'sortIndex',
        'unit' => 'unit',
        'amount' => 'amount',
        'amount_received' => 'amountReceived',
        'partially_amount_received' => 'partiallyAmountReceived',
        'unit_price' => 'unitPrice',
        'cost_received' => 'costReceived',
        'partially_cost_received' => 'partiallyCostReceived',
        'sub_total' => 'subTotal',
        'paid' => 'paid',
        'approved' => 'approved',
        'amount_only' => 'amountOnly',
        'contract_id' => 'contractId',
        'contract_type' => 'contractType',
        'project_security_link' => 'projectSecurityLink',
        'create_delivery_ticket' => 'createDeliveryTicket',
        'amount_to_receive' => 'amountToReceive',
        'cost_to_receive' => 'costToReceive',
        'delivery_tickets' => 'deliveryTickets',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'description' => 'setDescription',
        'sort_index' => 'setSortIndex',
        'unit' => 'setUnit',
        'amount' => 'setAmount',
        'amount_received' => 'setAmountReceived',
        'partially_amount_received' => 'setPartiallyAmountReceived',
        'unit_price' => 'setUnitPrice',
        'cost_received' => 'setCostReceived',
        'partially_cost_received' => 'setPartiallyCostReceived',
        'sub_total' => 'setSubTotal',
        'paid' => 'setPaid',
        'approved' => 'setApproved',
        'amount_only' => 'setAmountOnly',
        'contract_id' => 'setContractId',
        'contract_type' => 'setContractType',
        'project_security_link' => 'setProjectSecurityLink',
        'create_delivery_ticket' => 'setCreateDeliveryTicket',
        'amount_to_receive' => 'setAmountToReceive',
        'cost_to_receive' => 'setCostToReceive',
        'delivery_tickets' => 'setDeliveryTickets',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'description' => 'getDescription',
        'sort_index' => 'getSortIndex',
        'unit' => 'getUnit',
        'amount' => 'getAmount',
        'amount_received' => 'getAmountReceived',
        'partially_amount_received' => 'getPartiallyAmountReceived',
        'unit_price' => 'getUnitPrice',
        'cost_received' => 'getCostReceived',
        'partially_cost_received' => 'getPartiallyCostReceived',
        'sub_total' => 'getSubTotal',
        'paid' => 'getPaid',
        'approved' => 'getApproved',
        'amount_only' => 'getAmountOnly',
        'contract_id' => 'getContractId',
        'contract_type' => 'getContractType',
        'project_security_link' => 'getProjectSecurityLink',
        'create_delivery_ticket' => 'getCreateDeliveryTicket',
        'amount_to_receive' => 'getAmountToReceive',
        'cost_to_receive' => 'getCostToReceive',
        'delivery_tickets' => 'getDeliveryTickets',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['sort_index'] = isset($data['sort_index']) ? $data['sort_index'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_received'] = isset($data['amount_received']) ? $data['amount_received'] : null;
        $this->container['partially_amount_received'] = isset($data['partially_amount_received']) ? $data['partially_amount_received'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['cost_received'] = isset($data['cost_received']) ? $data['cost_received'] : null;
        $this->container['partially_cost_received'] = isset($data['partially_cost_received']) ? $data['partially_cost_received'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['amount_only'] = isset($data['amount_only']) ? $data['amount_only'] : null;
        $this->container['contract_id'] = isset($data['contract_id']) ? $data['contract_id'] : null;
        $this->container['contract_type'] = isset($data['contract_type']) ? $data['contract_type'] : null;
        $this->container['project_security_link'] = isset($data['project_security_link']) ? $data['project_security_link'] : null;
        $this->container['create_delivery_ticket'] = isset($data['create_delivery_ticket']) ? $data['create_delivery_ticket'] : null;
        $this->container['amount_to_receive'] = isset($data['amount_to_receive']) ? $data['amount_to_receive'] : null;
        $this->container['cost_to_receive'] = isset($data['cost_to_receive']) ? $data['cost_to_receive'] : null;
        $this->container['delivery_tickets'] = isset($data['delivery_tickets']) ? $data['delivery_tickets'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 255)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['sort_index'] === null) {
            $invalidProperties[] = "'sort_index' can't be null";
        }
        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 255)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['sub_total'] === null) {
            $invalidProperties[] = "'sub_total' can't be null";
        }
        if ($this->container['contract_type'] === null) {
            $invalidProperties[] = "'contract_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the contract term.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The number of the contract term.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if ((mb_strlen($number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ContractTerm., must be smaller than or equal to 255.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the contract term.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ContractTerm., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sort_index
     *
     * @return int
     */
    public function getSortIndex()
    {
        return $this->container['sort_index'];
    }

    /**
     * Sets sort_index
     *
     * @param int $sort_index The sort index of the contract term.
     *
     * @return $this
     */
    public function setSortIndex($sort_index)
    {
        $this->container['sort_index'] = $sort_index;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit The contract term unit.
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling ContractTerm., must be smaller than or equal to 255.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount The amount of the contract term.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_received
     *
     * @return string
     */
    public function getAmountReceived()
    {
        return $this->container['amount_received'];
    }

    /**
     * Sets amount_received
     *
     * @param string $amount_received The received amount of the contract term.
     *
     * @return $this
     */
    public function setAmountReceived($amount_received)
    {
        $this->container['amount_received'] = $amount_received;

        return $this;
    }

    /**
     * Gets partially_amount_received
     *
     * @return string
     */
    public function getPartiallyAmountReceived()
    {
        return $this->container['partially_amount_received'];
    }

    /**
     * Sets partially_amount_received
     *
     * @param string $partially_amount_received The partially received amount of the contract term.
     *
     * @return $this
     */
    public function setPartiallyAmountReceived($partially_amount_received)
    {
        $this->container['partially_amount_received'] = $partially_amount_received;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return string
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param string $unit_price The cost of the contract term.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets cost_received
     *
     * @return string
     */
    public function getCostReceived()
    {
        return $this->container['cost_received'];
    }

    /**
     * Sets cost_received
     *
     * @param string $cost_received The received cost of the contract term.
     *
     * @return $this
     */
    public function setCostReceived($cost_received)
    {
        $this->container['cost_received'] = $cost_received;

        return $this;
    }

    /**
     * Gets partially_cost_received
     *
     * @return string
     */
    public function getPartiallyCostReceived()
    {
        return $this->container['partially_cost_received'];
    }

    /**
     * Sets partially_cost_received
     *
     * @param string $partially_cost_received The partially received cost of the contract term.
     *
     * @return $this
     */
    public function setPartiallyCostReceived($partially_cost_received)
    {
        $this->container['partially_cost_received'] = $partially_cost_received;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return string
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param string $sub_total The subtotal of the contract term.
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool $paid Whether or not the contract term has been paid.
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved Whether or not the contract term has been approved.
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets amount_only
     *
     * @return bool
     */
    public function getAmountOnly()
    {
        return $this->container['amount_only'];
    }

    /**
     * Sets amount_only
     *
     * @param bool $amount_only Whether or not to show the amount only for the contract term.
     *
     * @return $this
     */
    public function setAmountOnly($amount_only)
    {
        $this->container['amount_only'] = $amount_only;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return int
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param int $contract_id The contract id of the contract term.
     *
     * @return $this
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets contract_type
     *
     * @return int
     */
    public function getContractType()
    {
        return $this->container['contract_type'];
    }

    /**
     * Sets contract_type
     *
     * @param int $contract_type The contract type of the contract term.
     *
     * @return $this
     */
    public function setContractType($contract_type)
    {
        $this->container['contract_type'] = $contract_type;

        return $this;
    }

    /**
     * Gets project_security_link
     *
     * @return \Swagger\Client\Model\CondensedProjectSecurityLink
     */
    public function getProjectSecurityLink()
    {
        return $this->container['project_security_link'];
    }

    /**
     * Sets project_security_link
     *
     * @param \Swagger\Client\Model\CondensedProjectSecurityLink $project_security_link project_security_link
     *
     * @return $this
     */
    public function setProjectSecurityLink($project_security_link)
    {
        $this->container['project_security_link'] = $project_security_link;

        return $this;
    }

    /**
     * Gets create_delivery_ticket
     *
     * @return bool
     */
    public function getCreateDeliveryTicket()
    {
        return $this->container['create_delivery_ticket'];
    }

    /**
     * Sets create_delivery_ticket
     *
     * @param bool $create_delivery_ticket Whether or not to create a delivery ticket.
     *
     * @return $this
     */
    public function setCreateDeliveryTicket($create_delivery_ticket)
    {
        $this->container['create_delivery_ticket'] = $create_delivery_ticket;

        return $this;
    }

    /**
     * Gets amount_to_receive
     *
     * @return string
     */
    public function getAmountToReceive()
    {
        return $this->container['amount_to_receive'];
    }

    /**
     * Sets amount_to_receive
     *
     * @param string $amount_to_receive The amount to receive of the contract term.
     *
     * @return $this
     */
    public function setAmountToReceive($amount_to_receive)
    {
        $this->container['amount_to_receive'] = $amount_to_receive;

        return $this;
    }

    /**
     * Gets cost_to_receive
     *
     * @return string
     */
    public function getCostToReceive()
    {
        return $this->container['cost_to_receive'];
    }

    /**
     * Sets cost_to_receive
     *
     * @param string $cost_to_receive The cost to receive of the contract term.
     *
     * @return $this
     */
    public function setCostToReceive($cost_to_receive)
    {
        $this->container['cost_to_receive'] = $cost_to_receive;

        return $this;
    }

    /**
     * Gets delivery_tickets
     *
     * @return \Swagger\Client\Model\CondensedDeliveryTicket[]
     */
    public function getDeliveryTickets()
    {
        return $this->container['delivery_tickets'];
    }

    /**
     * Sets delivery_tickets
     *
     * @param \Swagger\Client\Model\CondensedDeliveryTicket[] $delivery_tickets A collection of delivery tickets of the contract term.
     *
     * @return $this
     */
    public function setDeliveryTickets($delivery_tickets)
    {
        $this->container['delivery_tickets'] = $delivery_tickets;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


