<?php
/**
 * Surcharges
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Surcharges Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Surcharges implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Surcharges';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'delivery_ticket' => 'string',
        'work_outsourcing' => 'string',
        'purchase_invoice' => 'string',
        'material' => 'string',
        'equipment' => 'string',
        'subcontracting' => 'string',
        'others' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'delivery_ticket' => null,
        'work_outsourcing' => null,
        'purchase_invoice' => null,
        'material' => null,
        'equipment' => null,
        'subcontracting' => null,
        'others' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_ticket' => 'deliveryTicket',
        'work_outsourcing' => 'workOutsourcing',
        'purchase_invoice' => 'purchaseInvoice',
        'material' => 'material',
        'equipment' => 'equipment',
        'subcontracting' => 'subcontracting',
        'others' => 'others'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_ticket' => 'setDeliveryTicket',
        'work_outsourcing' => 'setWorkOutsourcing',
        'purchase_invoice' => 'setPurchaseInvoice',
        'material' => 'setMaterial',
        'equipment' => 'setEquipment',
        'subcontracting' => 'setSubcontracting',
        'others' => 'setOthers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_ticket' => 'getDeliveryTicket',
        'work_outsourcing' => 'getWorkOutsourcing',
        'purchase_invoice' => 'getPurchaseInvoice',
        'material' => 'getMaterial',
        'equipment' => 'getEquipment',
        'subcontracting' => 'getSubcontracting',
        'others' => 'getOthers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delivery_ticket'] = isset($data['delivery_ticket']) ? $data['delivery_ticket'] : null;
        $this->container['work_outsourcing'] = isset($data['work_outsourcing']) ? $data['work_outsourcing'] : null;
        $this->container['purchase_invoice'] = isset($data['purchase_invoice']) ? $data['purchase_invoice'] : null;
        $this->container['material'] = isset($data['material']) ? $data['material'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['subcontracting'] = isset($data['subcontracting']) ? $data['subcontracting'] : null;
        $this->container['others'] = isset($data['others']) ? $data['others'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_ticket
     *
     * @return string
     */
    public function getDeliveryTicket()
    {
        return $this->container['delivery_ticket'];
    }

    /**
     * Sets delivery_ticket
     *
     * @param string $delivery_ticket The delivery ticket.
     *
     * @return $this
     */
    public function setDeliveryTicket($delivery_ticket)
    {
        $this->container['delivery_ticket'] = $delivery_ticket;

        return $this;
    }

    /**
     * Gets work_outsourcing
     *
     * @return string
     */
    public function getWorkOutsourcing()
    {
        return $this->container['work_outsourcing'];
    }

    /**
     * Sets work_outsourcing
     *
     * @param string $work_outsourcing The work outsourcing.
     *
     * @return $this
     */
    public function setWorkOutsourcing($work_outsourcing)
    {
        $this->container['work_outsourcing'] = $work_outsourcing;

        return $this;
    }

    /**
     * Gets purchase_invoice
     *
     * @return string
     */
    public function getPurchaseInvoice()
    {
        return $this->container['purchase_invoice'];
    }

    /**
     * Sets purchase_invoice
     *
     * @param string $purchase_invoice The purchase invoice.
     *
     * @return $this
     */
    public function setPurchaseInvoice($purchase_invoice)
    {
        $this->container['purchase_invoice'] = $purchase_invoice;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string $material The material.
     *
     * @return $this
     */
    public function setMaterial($material)
    {
        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return string
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param string $equipment The equipment.
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets subcontracting
     *
     * @return string
     */
    public function getSubcontracting()
    {
        return $this->container['subcontracting'];
    }

    /**
     * Sets subcontracting
     *
     * @param string $subcontracting Subcontracting.
     *
     * @return $this
     */
    public function setSubcontracting($subcontracting)
    {
        $this->container['subcontracting'] = $subcontracting;

        return $this;
    }

    /**
     * Gets others
     *
     * @return string
     */
    public function getOthers()
    {
        return $this->container['others'];
    }

    /**
     * Sets others
     *
     * @param string $others Others.
     *
     * @return $this
     */
    public function setOthers($others)
    {
        $this->container['others'] = $others;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


