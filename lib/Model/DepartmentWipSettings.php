<?php
/**
 * DepartmentWipSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DepartmentWipSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DepartmentWipSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DepartmentWipSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'gl_account_code_hours' => 'string',
        'gl_account_code_hours_debit' => 'string',
        'gl_account_code_hours_closing' => 'string',
        'cost_center_hours' => 'string',
        'cost_center_hours_debit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'gl_account_code_hours' => null,
        'gl_account_code_hours_debit' => null,
        'gl_account_code_hours_closing' => null,
        'cost_center_hours' => null,
        'cost_center_hours_debit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'gl_account_code_hours' => 'glAccountCodeHours',
        'gl_account_code_hours_debit' => 'glAccountCodeHoursDebit',
        'gl_account_code_hours_closing' => 'glAccountCodeHoursClosing',
        'cost_center_hours' => 'costCenterHours',
        'cost_center_hours_debit' => 'costCenterHoursDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'gl_account_code_hours' => 'setGlAccountCodeHours',
        'gl_account_code_hours_debit' => 'setGlAccountCodeHoursDebit',
        'gl_account_code_hours_closing' => 'setGlAccountCodeHoursClosing',
        'cost_center_hours' => 'setCostCenterHours',
        'cost_center_hours_debit' => 'setCostCenterHoursDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'gl_account_code_hours' => 'getGlAccountCodeHours',
        'gl_account_code_hours_debit' => 'getGlAccountCodeHoursDebit',
        'gl_account_code_hours_closing' => 'getGlAccountCodeHoursClosing',
        'cost_center_hours' => 'getCostCenterHours',
        'cost_center_hours_debit' => 'getCostCenterHoursDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['gl_account_code_hours'] = isset($data['gl_account_code_hours']) ? $data['gl_account_code_hours'] : null;
        $this->container['gl_account_code_hours_debit'] = isset($data['gl_account_code_hours_debit']) ? $data['gl_account_code_hours_debit'] : null;
        $this->container['gl_account_code_hours_closing'] = isset($data['gl_account_code_hours_closing']) ? $data['gl_account_code_hours_closing'] : null;
        $this->container['cost_center_hours'] = isset($data['cost_center_hours']) ? $data['cost_center_hours'] : null;
        $this->container['cost_center_hours_debit'] = isset($data['cost_center_hours_debit']) ? $data['cost_center_hours_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['gl_account_code_hours']) && (mb_strlen($this->container['gl_account_code_hours']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_hours', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_hours_debit']) && (mb_strlen($this->container['gl_account_code_hours_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_hours_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_hours_closing']) && (mb_strlen($this->container['gl_account_code_hours_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_hours_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_hours']) && (mb_strlen($this->container['cost_center_hours']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_hours', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_hours_debit']) && (mb_strlen($this->container['cost_center_hours_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_hours_debit', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the work in progress settings.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gl_account_code_hours
     *
     * @return string
     */
    public function getGlAccountCodeHours()
    {
        return $this->container['gl_account_code_hours'];
    }

    /**
     * Sets gl_account_code_hours
     *
     * @param string $gl_account_code_hours A general ledger account code to use for hours related items.
     *
     * @return $this
     */
    public function setGlAccountCodeHours($gl_account_code_hours)
    {
        if (!is_null($gl_account_code_hours) && (mb_strlen($gl_account_code_hours) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_hours when calling DepartmentWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_hours'] = $gl_account_code_hours;

        return $this;
    }

    /**
     * Gets gl_account_code_hours_debit
     *
     * @return string
     */
    public function getGlAccountCodeHoursDebit()
    {
        return $this->container['gl_account_code_hours_debit'];
    }

    /**
     * Sets gl_account_code_hours_debit
     *
     * @param string $gl_account_code_hours_debit A general ledger account code to use for hours debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeHoursDebit($gl_account_code_hours_debit)
    {
        if (!is_null($gl_account_code_hours_debit) && (mb_strlen($gl_account_code_hours_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_hours_debit when calling DepartmentWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_hours_debit'] = $gl_account_code_hours_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_hours_closing
     *
     * @return string
     */
    public function getGlAccountCodeHoursClosing()
    {
        return $this->container['gl_account_code_hours_closing'];
    }

    /**
     * Sets gl_account_code_hours_closing
     *
     * @param string $gl_account_code_hours_closing A general ledger account code to use for hours closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeHoursClosing($gl_account_code_hours_closing)
    {
        if (!is_null($gl_account_code_hours_closing) && (mb_strlen($gl_account_code_hours_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_hours_closing when calling DepartmentWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_hours_closing'] = $gl_account_code_hours_closing;

        return $this;
    }

    /**
     * Gets cost_center_hours
     *
     * @return string
     */
    public function getCostCenterHours()
    {
        return $this->container['cost_center_hours'];
    }

    /**
     * Sets cost_center_hours
     *
     * @param string $cost_center_hours A cost center to use for hours related items.
     *
     * @return $this
     */
    public function setCostCenterHours($cost_center_hours)
    {
        if (!is_null($cost_center_hours) && (mb_strlen($cost_center_hours) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_hours when calling DepartmentWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_hours'] = $cost_center_hours;

        return $this;
    }

    /**
     * Gets cost_center_hours_debit
     *
     * @return string
     */
    public function getCostCenterHoursDebit()
    {
        return $this->container['cost_center_hours_debit'];
    }

    /**
     * Sets cost_center_hours_debit
     *
     * @param string $cost_center_hours_debit A cost center to use for hours debit related items.
     *
     * @return $this
     */
    public function setCostCenterHoursDebit($cost_center_hours_debit)
    {
        if (!is_null($cost_center_hours_debit) && (mb_strlen($cost_center_hours_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_hours_debit when calling DepartmentWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_hours_debit'] = $cost_center_hours_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


