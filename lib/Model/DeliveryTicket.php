<?php
/**
 * DeliveryTicket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeliveryTicket Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryTicket implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryTicket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'contact' => '\Swagger\Client\Model\CondensedContact',
        'project' => '\Swagger\Client\Model\CondensedProject',
        'ticket_number' => 'string',
        'ticket_date' => 'string',
        'purchase_type' => 'int',
        'cost' => 'string',
        'processed' => 'bool',
        'description' => 'string',
        'project_security_link' => '\Swagger\Client\Model\CondensedProjectSecurityLink',
        'can_delete' => 'bool',
        'initial_cost' => 'string',
        'file' => '\Swagger\Client\Model\File',
        'purchase_invoice' => '\Swagger\Client\Model\CondensedPurchaseInvoice',
        'contract' => '\Swagger\Client\Model\CondensedContract',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'contact' => null,
        'project' => null,
        'ticket_number' => null,
        'ticket_date' => null,
        'purchase_type' => null,
        'cost' => null,
        'processed' => null,
        'description' => null,
        'project_security_link' => null,
        'can_delete' => null,
        'initial_cost' => null,
        'file' => null,
        'purchase_invoice' => null,
        'contract' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contact' => 'contact',
        'project' => 'project',
        'ticket_number' => 'ticketNumber',
        'ticket_date' => 'ticketDate',
        'purchase_type' => 'purchaseType',
        'cost' => 'cost',
        'processed' => 'processed',
        'description' => 'description',
        'project_security_link' => 'projectSecurityLink',
        'can_delete' => 'canDelete',
        'initial_cost' => 'initialCost',
        'file' => 'file',
        'purchase_invoice' => 'purchaseInvoice',
        'contract' => 'contract',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contact' => 'setContact',
        'project' => 'setProject',
        'ticket_number' => 'setTicketNumber',
        'ticket_date' => 'setTicketDate',
        'purchase_type' => 'setPurchaseType',
        'cost' => 'setCost',
        'processed' => 'setProcessed',
        'description' => 'setDescription',
        'project_security_link' => 'setProjectSecurityLink',
        'can_delete' => 'setCanDelete',
        'initial_cost' => 'setInitialCost',
        'file' => 'setFile',
        'purchase_invoice' => 'setPurchaseInvoice',
        'contract' => 'setContract',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contact' => 'getContact',
        'project' => 'getProject',
        'ticket_number' => 'getTicketNumber',
        'ticket_date' => 'getTicketDate',
        'purchase_type' => 'getPurchaseType',
        'cost' => 'getCost',
        'processed' => 'getProcessed',
        'description' => 'getDescription',
        'project_security_link' => 'getProjectSecurityLink',
        'can_delete' => 'getCanDelete',
        'initial_cost' => 'getInitialCost',
        'file' => 'getFile',
        'purchase_invoice' => 'getPurchaseInvoice',
        'contract' => 'getContract',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['ticket_number'] = isset($data['ticket_number']) ? $data['ticket_number'] : null;
        $this->container['ticket_date'] = isset($data['ticket_date']) ? $data['ticket_date'] : null;
        $this->container['purchase_type'] = isset($data['purchase_type']) ? $data['purchase_type'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['project_security_link'] = isset($data['project_security_link']) ? $data['project_security_link'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
        $this->container['initial_cost'] = isset($data['initial_cost']) ? $data['initial_cost'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['purchase_invoice'] = isset($data['purchase_invoice']) ? $data['purchase_invoice'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contact'] === null) {
            $invalidProperties[] = "'contact' can't be null";
        }
        if ($this->container['project'] === null) {
            $invalidProperties[] = "'project' can't be null";
        }
        if ($this->container['ticket_number'] === null) {
            $invalidProperties[] = "'ticket_number' can't be null";
        }
        if ((mb_strlen($this->container['ticket_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'ticket_number', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['ticket_date'] === null) {
            $invalidProperties[] = "'ticket_date' can't be null";
        }
        if ($this->container['purchase_type'] === null) {
            $invalidProperties[] = "'purchase_type' can't be null";
        }
        if ($this->container['processed'] === null) {
            $invalidProperties[] = "'processed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the delivery ticket.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\CondensedContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\CondensedContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\CondensedProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\CondensedProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets ticket_number
     *
     * @return string
     */
    public function getTicketNumber()
    {
        return $this->container['ticket_number'];
    }

    /**
     * Sets ticket_number
     *
     * @param string $ticket_number Ticket number of the delivery ticket.
     *
     * @return $this
     */
    public function setTicketNumber($ticket_number)
    {
        if ((mb_strlen($ticket_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $ticket_number when calling DeliveryTicket., must be smaller than or equal to 256.');
        }

        $this->container['ticket_number'] = $ticket_number;

        return $this;
    }

    /**
     * Gets ticket_date
     *
     * @return string
     */
    public function getTicketDate()
    {
        return $this->container['ticket_date'];
    }

    /**
     * Sets ticket_date
     *
     * @param string $ticket_date The date for which the delivery ticket were logged.
     *
     * @return $this
     */
    public function setTicketDate($ticket_date)
    {
        $this->container['ticket_date'] = $ticket_date;

        return $this;
    }

    /**
     * Gets purchase_type
     *
     * @return int
     */
    public function getPurchaseType()
    {
        return $this->container['purchase_type'];
    }

    /**
     * Sets purchase_type
     *
     * @param int $purchase_type The purchase type.
     *
     * @return $this
     */
    public function setPurchaseType($purchase_type)
    {
        $this->container['purchase_type'] = $purchase_type;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string $cost The costs for this delivery ticket.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return bool
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param bool $processed Whether this delivery ticket is processed.
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of this delivery ticket
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets project_security_link
     *
     * @return \Swagger\Client\Model\CondensedProjectSecurityLink
     */
    public function getProjectSecurityLink()
    {
        return $this->container['project_security_link'];
    }

    /**
     * Sets project_security_link
     *
     * @param \Swagger\Client\Model\CondensedProjectSecurityLink $project_security_link project_security_link
     *
     * @return $this
     */
    public function setProjectSecurityLink($project_security_link)
    {
        $this->container['project_security_link'] = $project_security_link;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete Whether this delivery ticket can be deleted.
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets initial_cost
     *
     * @return string
     */
    public function getInitialCost()
    {
        return $this->container['initial_cost'];
    }

    /**
     * Sets initial_cost
     *
     * @param string $initial_cost Initial cost of the delivery ticket. The value cannot be modified.
     *
     * @return $this
     */
    public function setInitialCost($initial_cost)
    {
        $this->container['initial_cost'] = $initial_cost;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \Swagger\Client\Model\File
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \Swagger\Client\Model\File $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets purchase_invoice
     *
     * @return \Swagger\Client\Model\CondensedPurchaseInvoice
     */
    public function getPurchaseInvoice()
    {
        return $this->container['purchase_invoice'];
    }

    /**
     * Sets purchase_invoice
     *
     * @param \Swagger\Client\Model\CondensedPurchaseInvoice $purchase_invoice purchase_invoice
     *
     * @return $this
     */
    public function setPurchaseInvoice($purchase_invoice)
    {
        $this->container['purchase_invoice'] = $purchase_invoice;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return \Swagger\Client\Model\CondensedContract
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param \Swagger\Client\Model\CondensedContract $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


