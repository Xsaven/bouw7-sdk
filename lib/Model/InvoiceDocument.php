<?php
/**
 * InvoiceDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceDocument Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'is_collective' => 'bool',
        'invoice_number' => 'string',
        'organization' => '\Swagger\Client\Model\InvoiceOrganization',
        'contact' => '\Swagger\Client\Model\InvoiceContact',
        'contact_person_name' => 'string',
        'contact_person' => '\Swagger\Client\Model\ContactPerson',
        'status' => 'int',
        'chapters' => '\Swagger\Client\Model\InvoiceDocumentChapter[]',
        'project' => '\Swagger\Client\Model\InvoiceProject',
        'branch' => '\Swagger\Client\Model\InvoiceBranch',
        'division' => '\Swagger\Client\Model\CondensedDivision',
        'is_credit' => 'bool',
        'debtor_number' => 'string',
        'language' => 'string',
        'date' => 'string',
        'date_paid' => 'string',
        'due_date' => 'string',
        'exact_payment_condition' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'internal_note' => 'string',
        'description' => 'string',
        'wage_component_percentage' => 'string',
        'wage_component_amount' => 'string',
        'g_account_percentage' => 'string',
        'g_account_amount' => 'string',
        'g_account_text' => 'string',
        'n_account_text' => 'string',
        'can_use_cost_center' => 'bool',
        'is_vat_shifted' => 'bool',
        'vat_shifted_value' => 'string',
        'display_work_address' => 'bool',
        'work_address' => 'string',
        'invoiced_project_status_name' => 'string',
        'attachments' => '\Swagger\Client\Model\InvoiceAttachment[]',
        'attach_material_list' => 'bool',
        'attach_equipment_list' => 'bool',
        'attach_garbage_list' => 'bool',
        'attach_register' => 'bool',
        'can_book_to_exact' => 'bool',
        'can_book_to_twinfield' => 'bool',
        'can_book_to_afas' => 'bool',
        'can_book_to_mareon' => 'bool',
        'is_booked' => 'bool',
        'is_mareon_booked' => 'bool',
        'sent_emails' => '\Swagger\Client\Model\InvoiceMail[]',
        'include_cover_sheet' => 'bool',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'is_collective' => null,
        'invoice_number' => null,
        'organization' => null,
        'contact' => null,
        'contact_person_name' => null,
        'contact_person' => null,
        'status' => null,
        'chapters' => null,
        'project' => null,
        'branch' => null,
        'division' => null,
        'is_credit' => null,
        'debtor_number' => null,
        'language' => null,
        'date' => null,
        'date_paid' => null,
        'due_date' => null,
        'exact_payment_condition' => null,
        'start_date' => null,
        'end_date' => null,
        'internal_note' => null,
        'description' => null,
        'wage_component_percentage' => null,
        'wage_component_amount' => null,
        'g_account_percentage' => null,
        'g_account_amount' => null,
        'g_account_text' => null,
        'n_account_text' => null,
        'can_use_cost_center' => null,
        'is_vat_shifted' => null,
        'vat_shifted_value' => null,
        'display_work_address' => null,
        'work_address' => null,
        'invoiced_project_status_name' => null,
        'attachments' => null,
        'attach_material_list' => null,
        'attach_equipment_list' => null,
        'attach_garbage_list' => null,
        'attach_register' => null,
        'can_book_to_exact' => null,
        'can_book_to_twinfield' => null,
        'can_book_to_afas' => null,
        'can_book_to_mareon' => null,
        'is_booked' => null,
        'is_mareon_booked' => null,
        'sent_emails' => null,
        'include_cover_sheet' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'is_collective' => 'isCollective',
        'invoice_number' => 'invoiceNumber',
        'organization' => 'organization',
        'contact' => 'contact',
        'contact_person_name' => 'contactPersonName',
        'contact_person' => 'contactPerson',
        'status' => 'status',
        'chapters' => 'chapters',
        'project' => 'project',
        'branch' => 'branch',
        'division' => 'division',
        'is_credit' => 'isCredit',
        'debtor_number' => 'debtorNumber',
        'language' => 'language',
        'date' => 'date',
        'date_paid' => 'datePaid',
        'due_date' => 'dueDate',
        'exact_payment_condition' => 'exactPaymentCondition',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'internal_note' => 'internalNote',
        'description' => 'description',
        'wage_component_percentage' => 'wageComponentPercentage',
        'wage_component_amount' => 'wageComponentAmount',
        'g_account_percentage' => 'gAccountPercentage',
        'g_account_amount' => 'gAccountAmount',
        'g_account_text' => 'gAccountText',
        'n_account_text' => 'nAccountText',
        'can_use_cost_center' => 'canUseCostCenter',
        'is_vat_shifted' => 'isVatShifted',
        'vat_shifted_value' => 'vatShiftedValue',
        'display_work_address' => 'displayWorkAddress',
        'work_address' => 'workAddress',
        'invoiced_project_status_name' => 'invoicedProjectStatusName',
        'attachments' => 'attachments',
        'attach_material_list' => 'attachMaterialList',
        'attach_equipment_list' => 'attachEquipmentList',
        'attach_garbage_list' => 'attachGarbageList',
        'attach_register' => 'attachRegister',
        'can_book_to_exact' => 'canBookToExact',
        'can_book_to_twinfield' => 'canBookToTwinfield',
        'can_book_to_afas' => 'canBookToAfas',
        'can_book_to_mareon' => 'canBookToMareon',
        'is_booked' => 'isBooked',
        'is_mareon_booked' => 'isMareonBooked',
        'sent_emails' => 'sentEmails',
        'include_cover_sheet' => 'includeCoverSheet',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_collective' => 'setIsCollective',
        'invoice_number' => 'setInvoiceNumber',
        'organization' => 'setOrganization',
        'contact' => 'setContact',
        'contact_person_name' => 'setContactPersonName',
        'contact_person' => 'setContactPerson',
        'status' => 'setStatus',
        'chapters' => 'setChapters',
        'project' => 'setProject',
        'branch' => 'setBranch',
        'division' => 'setDivision',
        'is_credit' => 'setIsCredit',
        'debtor_number' => 'setDebtorNumber',
        'language' => 'setLanguage',
        'date' => 'setDate',
        'date_paid' => 'setDatePaid',
        'due_date' => 'setDueDate',
        'exact_payment_condition' => 'setExactPaymentCondition',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'internal_note' => 'setInternalNote',
        'description' => 'setDescription',
        'wage_component_percentage' => 'setWageComponentPercentage',
        'wage_component_amount' => 'setWageComponentAmount',
        'g_account_percentage' => 'setGAccountPercentage',
        'g_account_amount' => 'setGAccountAmount',
        'g_account_text' => 'setGAccountText',
        'n_account_text' => 'setNAccountText',
        'can_use_cost_center' => 'setCanUseCostCenter',
        'is_vat_shifted' => 'setIsVatShifted',
        'vat_shifted_value' => 'setVatShiftedValue',
        'display_work_address' => 'setDisplayWorkAddress',
        'work_address' => 'setWorkAddress',
        'invoiced_project_status_name' => 'setInvoicedProjectStatusName',
        'attachments' => 'setAttachments',
        'attach_material_list' => 'setAttachMaterialList',
        'attach_equipment_list' => 'setAttachEquipmentList',
        'attach_garbage_list' => 'setAttachGarbageList',
        'attach_register' => 'setAttachRegister',
        'can_book_to_exact' => 'setCanBookToExact',
        'can_book_to_twinfield' => 'setCanBookToTwinfield',
        'can_book_to_afas' => 'setCanBookToAfas',
        'can_book_to_mareon' => 'setCanBookToMareon',
        'is_booked' => 'setIsBooked',
        'is_mareon_booked' => 'setIsMareonBooked',
        'sent_emails' => 'setSentEmails',
        'include_cover_sheet' => 'setIncludeCoverSheet',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_collective' => 'getIsCollective',
        'invoice_number' => 'getInvoiceNumber',
        'organization' => 'getOrganization',
        'contact' => 'getContact',
        'contact_person_name' => 'getContactPersonName',
        'contact_person' => 'getContactPerson',
        'status' => 'getStatus',
        'chapters' => 'getChapters',
        'project' => 'getProject',
        'branch' => 'getBranch',
        'division' => 'getDivision',
        'is_credit' => 'getIsCredit',
        'debtor_number' => 'getDebtorNumber',
        'language' => 'getLanguage',
        'date' => 'getDate',
        'date_paid' => 'getDatePaid',
        'due_date' => 'getDueDate',
        'exact_payment_condition' => 'getExactPaymentCondition',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'internal_note' => 'getInternalNote',
        'description' => 'getDescription',
        'wage_component_percentage' => 'getWageComponentPercentage',
        'wage_component_amount' => 'getWageComponentAmount',
        'g_account_percentage' => 'getGAccountPercentage',
        'g_account_amount' => 'getGAccountAmount',
        'g_account_text' => 'getGAccountText',
        'n_account_text' => 'getNAccountText',
        'can_use_cost_center' => 'getCanUseCostCenter',
        'is_vat_shifted' => 'getIsVatShifted',
        'vat_shifted_value' => 'getVatShiftedValue',
        'display_work_address' => 'getDisplayWorkAddress',
        'work_address' => 'getWorkAddress',
        'invoiced_project_status_name' => 'getInvoicedProjectStatusName',
        'attachments' => 'getAttachments',
        'attach_material_list' => 'getAttachMaterialList',
        'attach_equipment_list' => 'getAttachEquipmentList',
        'attach_garbage_list' => 'getAttachGarbageList',
        'attach_register' => 'getAttachRegister',
        'can_book_to_exact' => 'getCanBookToExact',
        'can_book_to_twinfield' => 'getCanBookToTwinfield',
        'can_book_to_afas' => 'getCanBookToAfas',
        'can_book_to_mareon' => 'getCanBookToMareon',
        'is_booked' => 'getIsBooked',
        'is_mareon_booked' => 'getIsMareonBooked',
        'sent_emails' => 'getSentEmails',
        'include_cover_sheet' => 'getIncludeCoverSheet',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_collective'] = isset($data['is_collective']) ? $data['is_collective'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['chapters'] = isset($data['chapters']) ? $data['chapters'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['is_credit'] = isset($data['is_credit']) ? $data['is_credit'] : null;
        $this->container['debtor_number'] = isset($data['debtor_number']) ? $data['debtor_number'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['exact_payment_condition'] = isset($data['exact_payment_condition']) ? $data['exact_payment_condition'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['internal_note'] = isset($data['internal_note']) ? $data['internal_note'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['wage_component_percentage'] = isset($data['wage_component_percentage']) ? $data['wage_component_percentage'] : null;
        $this->container['wage_component_amount'] = isset($data['wage_component_amount']) ? $data['wage_component_amount'] : null;
        $this->container['g_account_percentage'] = isset($data['g_account_percentage']) ? $data['g_account_percentage'] : null;
        $this->container['g_account_amount'] = isset($data['g_account_amount']) ? $data['g_account_amount'] : null;
        $this->container['g_account_text'] = isset($data['g_account_text']) ? $data['g_account_text'] : null;
        $this->container['n_account_text'] = isset($data['n_account_text']) ? $data['n_account_text'] : null;
        $this->container['can_use_cost_center'] = isset($data['can_use_cost_center']) ? $data['can_use_cost_center'] : null;
        $this->container['is_vat_shifted'] = isset($data['is_vat_shifted']) ? $data['is_vat_shifted'] : null;
        $this->container['vat_shifted_value'] = isset($data['vat_shifted_value']) ? $data['vat_shifted_value'] : null;
        $this->container['display_work_address'] = isset($data['display_work_address']) ? $data['display_work_address'] : null;
        $this->container['work_address'] = isset($data['work_address']) ? $data['work_address'] : null;
        $this->container['invoiced_project_status_name'] = isset($data['invoiced_project_status_name']) ? $data['invoiced_project_status_name'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['attach_material_list'] = isset($data['attach_material_list']) ? $data['attach_material_list'] : null;
        $this->container['attach_equipment_list'] = isset($data['attach_equipment_list']) ? $data['attach_equipment_list'] : null;
        $this->container['attach_garbage_list'] = isset($data['attach_garbage_list']) ? $data['attach_garbage_list'] : null;
        $this->container['attach_register'] = isset($data['attach_register']) ? $data['attach_register'] : null;
        $this->container['can_book_to_exact'] = isset($data['can_book_to_exact']) ? $data['can_book_to_exact'] : null;
        $this->container['can_book_to_twinfield'] = isset($data['can_book_to_twinfield']) ? $data['can_book_to_twinfield'] : null;
        $this->container['can_book_to_afas'] = isset($data['can_book_to_afas']) ? $data['can_book_to_afas'] : null;
        $this->container['can_book_to_mareon'] = isset($data['can_book_to_mareon']) ? $data['can_book_to_mareon'] : null;
        $this->container['is_booked'] = isset($data['is_booked']) ? $data['is_booked'] : null;
        $this->container['is_mareon_booked'] = isset($data['is_mareon_booked']) ? $data['is_mareon_booked'] : null;
        $this->container['sent_emails'] = isset($data['sent_emails']) ? $data['sent_emails'] : null;
        $this->container['include_cover_sheet'] = isset($data['include_cover_sheet']) ? $data['include_cover_sheet'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contact'] === null) {
            $invalidProperties[] = "'contact' can't be null";
        }
        if (!is_null($this->container['exact_payment_condition']) && (mb_strlen($this->container['exact_payment_condition']) > 255)) {
            $invalidProperties[] = "invalid value for 'exact_payment_condition', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['work_address']) && (mb_strlen($this->container['work_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'work_address', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the invoice. Must be omitted to create a new invoice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_collective
     *
     * @return bool
     */
    public function getIsCollective()
    {
        return $this->container['is_collective'];
    }

    /**
     * Sets is_collective
     *
     * @param bool $is_collective Whether the invoice is a collective invoice.
     *
     * @return $this
     */
    public function setIsCollective($is_collective)
    {
        $this->container['is_collective'] = $is_collective;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The number of this invoice.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Swagger\Client\Model\InvoiceOrganization
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Swagger\Client\Model\InvoiceOrganization $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\InvoiceContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\InvoiceContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name The name of the contact person for this invoice.
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\ContactPerson
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\ContactPerson $contact_person contact_person
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status The status of the invoice.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets chapters
     *
     * @return \Swagger\Client\Model\InvoiceDocumentChapter[]
     */
    public function getChapters()
    {
        return $this->container['chapters'];
    }

    /**
     * Sets chapters
     *
     * @param \Swagger\Client\Model\InvoiceDocumentChapter[] $chapters The chapters associated with this invoice.
     *
     * @return $this
     */
    public function setChapters($chapters)
    {
        $this->container['chapters'] = $chapters;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\InvoiceProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\InvoiceProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\InvoiceBranch
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\InvoiceBranch $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \Swagger\Client\Model\CondensedDivision
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \Swagger\Client\Model\CondensedDivision $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets is_credit
     *
     * @return bool
     */
    public function getIsCredit()
    {
        return $this->container['is_credit'];
    }

    /**
     * Sets is_credit
     *
     * @param bool $is_credit Whether this invoice is a credit invoice.
     *
     * @return $this
     */
    public function setIsCredit($is_credit)
    {
        $this->container['is_credit'] = $is_credit;

        return $this;
    }

    /**
     * Gets debtor_number
     *
     * @return string
     */
    public function getDebtorNumber()
    {
        return $this->container['debtor_number'];
    }

    /**
     * Sets debtor_number
     *
     * @param string $debtor_number The debtor number of the contact associated with this invoice.
     *
     * @return $this
     */
    public function setDebtorNumber($debtor_number)
    {
        $this->container['debtor_number'] = $debtor_number;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The locale used by this invoice document, e.g.: nl-NL.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The invoice date.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return string
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param string $date_paid The paid date.
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date The invoice due date.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets exact_payment_condition
     *
     * @return string
     */
    public function getExactPaymentCondition()
    {
        return $this->container['exact_payment_condition'];
    }

    /**
     * Sets exact_payment_condition
     *
     * @param string $exact_payment_condition The code of the Exact Online payment condition for this invoice.
     *
     * @return $this
     */
    public function setExactPaymentCondition($exact_payment_condition)
    {
        if (!is_null($exact_payment_condition) && (mb_strlen($exact_payment_condition) > 255)) {
            throw new \InvalidArgumentException('invalid length for $exact_payment_condition when calling InvoiceDocument., must be smaller than or equal to 255.');
        }

        $this->container['exact_payment_condition'] = $exact_payment_condition;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date The start date of attached booking items in Y-m-d format.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date The end date of attached booking items in Y-m-d format.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets internal_note
     *
     * @return string
     */
    public function getInternalNote()
    {
        return $this->container['internal_note'];
    }

    /**
     * Sets internal_note
     *
     * @param string $internal_note The internal note for this invoice.
     *
     * @return $this
     */
    public function setInternalNote($internal_note)
    {
        $this->container['internal_note'] = $internal_note;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The public description for this invoice.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets wage_component_percentage
     *
     * @return string
     */
    public function getWageComponentPercentage()
    {
        return $this->container['wage_component_percentage'];
    }

    /**
     * Sets wage_component_percentage
     *
     * @param string $wage_component_percentage Wage component percentage.
     *
     * @return $this
     */
    public function setWageComponentPercentage($wage_component_percentage)
    {
        $this->container['wage_component_percentage'] = $wage_component_percentage;

        return $this;
    }

    /**
     * Gets wage_component_amount
     *
     * @return string
     */
    public function getWageComponentAmount()
    {
        return $this->container['wage_component_amount'];
    }

    /**
     * Sets wage_component_amount
     *
     * @param string $wage_component_amount Wage component amount.
     *
     * @return $this
     */
    public function setWageComponentAmount($wage_component_amount)
    {
        $this->container['wage_component_amount'] = $wage_component_amount;

        return $this;
    }

    /**
     * Gets g_account_percentage
     *
     * @return string
     */
    public function getGAccountPercentage()
    {
        return $this->container['g_account_percentage'];
    }

    /**
     * Sets g_account_percentage
     *
     * @param string $g_account_percentage G-account percentage.
     *
     * @return $this
     */
    public function setGAccountPercentage($g_account_percentage)
    {
        $this->container['g_account_percentage'] = $g_account_percentage;

        return $this;
    }

    /**
     * Gets g_account_amount
     *
     * @return string
     */
    public function getGAccountAmount()
    {
        return $this->container['g_account_amount'];
    }

    /**
     * Sets g_account_amount
     *
     * @param string $g_account_amount G-account amount.
     *
     * @return $this
     */
    public function setGAccountAmount($g_account_amount)
    {
        $this->container['g_account_amount'] = $g_account_amount;

        return $this;
    }

    /**
     * Gets g_account_text
     *
     * @return string
     */
    public function getGAccountText()
    {
        return $this->container['g_account_text'];
    }

    /**
     * Sets g_account_text
     *
     * @param string $g_account_text G-account text.
     *
     * @return $this
     */
    public function setGAccountText($g_account_text)
    {
        $this->container['g_account_text'] = $g_account_text;

        return $this;
    }

    /**
     * Gets n_account_text
     *
     * @return string
     */
    public function getNAccountText()
    {
        return $this->container['n_account_text'];
    }

    /**
     * Sets n_account_text
     *
     * @param string $n_account_text N-account text.
     *
     * @return $this
     */
    public function setNAccountText($n_account_text)
    {
        $this->container['n_account_text'] = $n_account_text;

        return $this;
    }

    /**
     * Gets can_use_cost_center
     *
     * @return bool
     */
    public function getCanUseCostCenter()
    {
        return $this->container['can_use_cost_center'];
    }

    /**
     * Sets can_use_cost_center
     *
     * @param bool $can_use_cost_center Whether the user can use cost center functionality.
     *
     * @return $this
     */
    public function setCanUseCostCenter($can_use_cost_center)
    {
        $this->container['can_use_cost_center'] = $can_use_cost_center;

        return $this;
    }

    /**
     * Gets is_vat_shifted
     *
     * @return bool
     */
    public function getIsVatShifted()
    {
        return $this->container['is_vat_shifted'];
    }

    /**
     * Sets is_vat_shifted
     *
     * @param bool $is_vat_shifted Whether VAT is shifted for the invoice.
     *
     * @return $this
     */
    public function setIsVatShifted($is_vat_shifted)
    {
        $this->container['is_vat_shifted'] = $is_vat_shifted;

        return $this;
    }

    /**
     * Gets vat_shifted_value
     *
     * @return string
     */
    public function getVatShiftedValue()
    {
        return $this->container['vat_shifted_value'];
    }

    /**
     * Sets vat_shifted_value
     *
     * @param string $vat_shifted_value VAT is shifted value. Usually a VAT-number of the contact.
     *
     * @return $this
     */
    public function setVatShiftedValue($vat_shifted_value)
    {
        $this->container['vat_shifted_value'] = $vat_shifted_value;

        return $this;
    }

    /**
     * Gets display_work_address
     *
     * @return bool
     */
    public function getDisplayWorkAddress()
    {
        return $this->container['display_work_address'];
    }

    /**
     * Sets display_work_address
     *
     * @param bool $display_work_address Whether the work address is displayed on the invoice.
     *
     * @return $this
     */
    public function setDisplayWorkAddress($display_work_address)
    {
        $this->container['display_work_address'] = $display_work_address;

        return $this;
    }

    /**
     * Gets work_address
     *
     * @return string
     */
    public function getWorkAddress()
    {
        return $this->container['work_address'];
    }

    /**
     * Sets work_address
     *
     * @param string $work_address The work address of the invoice.
     *
     * @return $this
     */
    public function setWorkAddress($work_address)
    {
        if (!is_null($work_address) && (mb_strlen($work_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $work_address when calling InvoiceDocument., must be smaller than or equal to 255.');
        }

        $this->container['work_address'] = $work_address;

        return $this;
    }

    /**
     * Gets invoiced_project_status_name
     *
     * @return string
     */
    public function getInvoicedProjectStatusName()
    {
        return $this->container['invoiced_project_status_name'];
    }

    /**
     * Sets invoiced_project_status_name
     *
     * @param string $invoiced_project_status_name The status name of the projects if the status is going to be changed when an invoice is saved.
     *
     * @return $this
     */
    public function setInvoicedProjectStatusName($invoiced_project_status_name)
    {
        $this->container['invoiced_project_status_name'] = $invoiced_project_status_name;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\InvoiceAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\InvoiceAttachment[] $attachments The attachments associated with this invoice.
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets attach_material_list
     *
     * @return bool
     */
    public function getAttachMaterialList()
    {
        return $this->container['attach_material_list'];
    }

    /**
     * Sets attach_material_list
     *
     * @param bool $attach_material_list Whether to attach the material list attachment.
     *
     * @return $this
     */
    public function setAttachMaterialList($attach_material_list)
    {
        $this->container['attach_material_list'] = $attach_material_list;

        return $this;
    }

    /**
     * Gets attach_equipment_list
     *
     * @return bool
     */
    public function getAttachEquipmentList()
    {
        return $this->container['attach_equipment_list'];
    }

    /**
     * Sets attach_equipment_list
     *
     * @param bool $attach_equipment_list Whether to attach the material list attachment.
     *
     * @return $this
     */
    public function setAttachEquipmentList($attach_equipment_list)
    {
        $this->container['attach_equipment_list'] = $attach_equipment_list;

        return $this;
    }

    /**
     * Gets attach_garbage_list
     *
     * @return bool
     */
    public function getAttachGarbageList()
    {
        return $this->container['attach_garbage_list'];
    }

    /**
     * Sets attach_garbage_list
     *
     * @param bool $attach_garbage_list Whether to attach the waste list attachment.
     *
     * @return $this
     */
    public function setAttachGarbageList($attach_garbage_list)
    {
        $this->container['attach_garbage_list'] = $attach_garbage_list;

        return $this;
    }

    /**
     * Gets attach_register
     *
     * @return bool
     */
    public function getAttachRegister()
    {
        return $this->container['attach_register'];
    }

    /**
     * Sets attach_register
     *
     * @param bool $attach_register Whether to attach the register attachment.
     *
     * @return $this
     */
    public function setAttachRegister($attach_register)
    {
        $this->container['attach_register'] = $attach_register;

        return $this;
    }

    /**
     * Gets can_book_to_exact
     *
     * @return bool
     */
    public function getCanBookToExact()
    {
        return $this->container['can_book_to_exact'];
    }

    /**
     * Sets can_book_to_exact
     *
     * @param bool $can_book_to_exact Whether it is allowed to book to Exact.
     *
     * @return $this
     */
    public function setCanBookToExact($can_book_to_exact)
    {
        $this->container['can_book_to_exact'] = $can_book_to_exact;

        return $this;
    }

    /**
     * Gets can_book_to_twinfield
     *
     * @return bool
     */
    public function getCanBookToTwinfield()
    {
        return $this->container['can_book_to_twinfield'];
    }

    /**
     * Sets can_book_to_twinfield
     *
     * @param bool $can_book_to_twinfield Whether it is allowed to book to Twinfield.
     *
     * @return $this
     */
    public function setCanBookToTwinfield($can_book_to_twinfield)
    {
        $this->container['can_book_to_twinfield'] = $can_book_to_twinfield;

        return $this;
    }

    /**
     * Gets can_book_to_afas
     *
     * @return bool
     */
    public function getCanBookToAfas()
    {
        return $this->container['can_book_to_afas'];
    }

    /**
     * Sets can_book_to_afas
     *
     * @param bool $can_book_to_afas Whether it is allowed to book to AFAS.
     *
     * @return $this
     */
    public function setCanBookToAfas($can_book_to_afas)
    {
        $this->container['can_book_to_afas'] = $can_book_to_afas;

        return $this;
    }

    /**
     * Gets can_book_to_mareon
     *
     * @return bool
     */
    public function getCanBookToMareon()
    {
        return $this->container['can_book_to_mareon'];
    }

    /**
     * Sets can_book_to_mareon
     *
     * @param bool $can_book_to_mareon Whether it is allowed to book to Mareon.
     *
     * @return $this
     */
    public function setCanBookToMareon($can_book_to_mareon)
    {
        $this->container['can_book_to_mareon'] = $can_book_to_mareon;

        return $this;
    }

    /**
     * Gets is_booked
     *
     * @return bool
     */
    public function getIsBooked()
    {
        return $this->container['is_booked'];
    }

    /**
     * Sets is_booked
     *
     * @param bool $is_booked Whether the invoice is already booked.
     *
     * @return $this
     */
    public function setIsBooked($is_booked)
    {
        $this->container['is_booked'] = $is_booked;

        return $this;
    }

    /**
     * Gets is_mareon_booked
     *
     * @return bool
     */
    public function getIsMareonBooked()
    {
        return $this->container['is_mareon_booked'];
    }

    /**
     * Sets is_mareon_booked
     *
     * @param bool $is_mareon_booked Whether the invoice is already booked in mareon.
     *
     * @return $this
     */
    public function setIsMareonBooked($is_mareon_booked)
    {
        $this->container['is_mareon_booked'] = $is_mareon_booked;

        return $this;
    }

    /**
     * Gets sent_emails
     *
     * @return \Swagger\Client\Model\InvoiceMail[]
     */
    public function getSentEmails()
    {
        return $this->container['sent_emails'];
    }

    /**
     * Sets sent_emails
     *
     * @param \Swagger\Client\Model\InvoiceMail[] $sent_emails All mails sent for this invoice.
     *
     * @return $this
     */
    public function setSentEmails($sent_emails)
    {
        $this->container['sent_emails'] = $sent_emails;

        return $this;
    }

    /**
     * Gets include_cover_sheet
     *
     * @return bool
     */
    public function getIncludeCoverSheet()
    {
        return $this->container['include_cover_sheet'];
    }

    /**
     * Sets include_cover_sheet
     *
     * @param bool $include_cover_sheet Whether to include a cover sheet to the invoice PDF.
     *
     * @return $this
     */
    public function setIncludeCoverSheet($include_cover_sheet)
    {
        $this->container['include_cover_sheet'] = $include_cover_sheet;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


