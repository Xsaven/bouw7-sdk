<?php
/**
 * ProjectListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProjectListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent_id' => 'int',
        'project_number' => 'string',
        'full_project_number' => 'string',
        'division' => '\Swagger\Client\Model\NestedDivisionListItem',
        'name' => 'string',
        'street_name' => 'string',
        'house_number' => 'string',
        'zip_code' => 'string',
        'fixed_price' => 'string',
        'additional_work' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'information' => 'string',
        'reference' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'delivery_date' => 'string',
        'contact' => '\Swagger\Client\Model\NestedContactListItem',
        'status' => '\Swagger\Client\Model\NestedProjectStatusListItem',
        'category' => '\Swagger\Client\Model\NestedProjectCategoryListItem',
        'branch' => '\Swagger\Client\Model\NestedBranchListItem',
        'property_asset' => '\Swagger\Client\Model\NestedPropertyAssetListItem',
        'project_leader' => '\Swagger\Client\Model\NestedEmployeeListItem',
        'work_planner' => '\Swagger\Client\Model\NestedEmployeeListItem',
        'executor' => '\Swagger\Client\Model\NestedEmployeeListItem',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'parent_id' => null,
        'project_number' => null,
        'full_project_number' => null,
        'division' => null,
        'name' => null,
        'street_name' => null,
        'house_number' => null,
        'zip_code' => null,
        'fixed_price' => null,
        'additional_work' => null,
        'city' => null,
        'country_code' => null,
        'information' => null,
        'reference' => null,
        'start_date' => null,
        'end_date' => null,
        'delivery_date' => null,
        'contact' => null,
        'status' => null,
        'category' => null,
        'branch' => null,
        'property_asset' => null,
        'project_leader' => null,
        'work_planner' => null,
        'executor' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parentId',
        'project_number' => 'projectNumber',
        'full_project_number' => 'fullProjectNumber',
        'division' => 'division',
        'name' => 'name',
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'zip_code' => 'zipCode',
        'fixed_price' => 'fixedPrice',
        'additional_work' => 'additionalWork',
        'city' => 'city',
        'country_code' => 'countryCode',
        'information' => 'information',
        'reference' => 'reference',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'delivery_date' => 'deliveryDate',
        'contact' => 'contact',
        'status' => 'status',
        'category' => 'category',
        'branch' => 'branch',
        'property_asset' => 'propertyAsset',
        'project_leader' => 'projectLeader',
        'work_planner' => 'workPlanner',
        'executor' => 'executor',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'project_number' => 'setProjectNumber',
        'full_project_number' => 'setFullProjectNumber',
        'division' => 'setDivision',
        'name' => 'setName',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'zip_code' => 'setZipCode',
        'fixed_price' => 'setFixedPrice',
        'additional_work' => 'setAdditionalWork',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'information' => 'setInformation',
        'reference' => 'setReference',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'delivery_date' => 'setDeliveryDate',
        'contact' => 'setContact',
        'status' => 'setStatus',
        'category' => 'setCategory',
        'branch' => 'setBranch',
        'property_asset' => 'setPropertyAsset',
        'project_leader' => 'setProjectLeader',
        'work_planner' => 'setWorkPlanner',
        'executor' => 'setExecutor',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'project_number' => 'getProjectNumber',
        'full_project_number' => 'getFullProjectNumber',
        'division' => 'getDivision',
        'name' => 'getName',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'zip_code' => 'getZipCode',
        'fixed_price' => 'getFixedPrice',
        'additional_work' => 'getAdditionalWork',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'information' => 'getInformation',
        'reference' => 'getReference',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'delivery_date' => 'getDeliveryDate',
        'contact' => 'getContact',
        'status' => 'getStatus',
        'category' => 'getCategory',
        'branch' => 'getBranch',
        'property_asset' => 'getPropertyAsset',
        'project_leader' => 'getProjectLeader',
        'work_planner' => 'getWorkPlanner',
        'executor' => 'getExecutor',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['project_number'] = isset($data['project_number']) ? $data['project_number'] : null;
        $this->container['full_project_number'] = isset($data['full_project_number']) ? $data['full_project_number'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['fixed_price'] = isset($data['fixed_price']) ? $data['fixed_price'] : null;
        $this->container['additional_work'] = isset($data['additional_work']) ? $data['additional_work'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['information'] = isset($data['information']) ? $data['information'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['property_asset'] = isset($data['property_asset']) ? $data['property_asset'] : null;
        $this->container['project_leader'] = isset($data['project_leader']) ? $data['project_leader'] : null;
        $this->container['work_planner'] = isset($data['work_planner']) ? $data['work_planner'] : null;
        $this->container['executor'] = isset($data['executor']) ? $data['executor'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the project.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id The ID of the parent Project if this Project is a Subproject.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets project_number
     *
     * @return string
     */
    public function getProjectNumber()
    {
        return $this->container['project_number'];
    }

    /**
     * Sets project_number
     *
     * @param string $project_number The project number.
     *
     * @return $this
     */
    public function setProjectNumber($project_number)
    {
        $this->container['project_number'] = $project_number;

        return $this;
    }

    /**
     * Gets full_project_number
     *
     * @return string
     */
    public function getFullProjectNumber()
    {
        return $this->container['full_project_number'];
    }

    /**
     * Sets full_project_number
     *
     * @param string $full_project_number The full project number including year.
     *
     * @return $this
     */
    public function setFullProjectNumber($full_project_number)
    {
        $this->container['full_project_number'] = $full_project_number;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \Swagger\Client\Model\NestedDivisionListItem
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \Swagger\Client\Model\NestedDivisionListItem $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the project.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The street name for the project.
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number The house number for the project.
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip code for the project.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets fixed_price
     *
     * @return string
     */
    public function getFixedPrice()
    {
        return $this->container['fixed_price'];
    }

    /**
     * Sets fixed_price
     *
     * @param string $fixed_price The fixed price of the project.
     *
     * @return $this
     */
    public function setFixedPrice($fixed_price)
    {
        $this->container['fixed_price'] = $fixed_price;

        return $this;
    }

    /**
     * Gets additional_work
     *
     * @return string
     */
    public function getAdditionalWork()
    {
        return $this->container['additional_work'];
    }

    /**
     * Sets additional_work
     *
     * @param string $additional_work Additional work for the project.
     *
     * @return $this
     */
    public function setAdditionalWork($additional_work)
    {
        $this->container['additional_work'] = $additional_work;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of the project.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code An ISO 3166-2 representation of the country.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets information
     *
     * @return string
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param string $information The information about the project.
     *
     * @return $this
     */
    public function setInformation($information)
    {
        $this->container['information'] = $information;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference of the project.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Start date for the project.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End date for the project.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Delivery date for the project.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\NestedContactListItem
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\NestedContactListItem $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\NestedProjectStatusListItem
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\NestedProjectStatusListItem $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\NestedProjectCategoryListItem
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\NestedProjectCategoryListItem $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\NestedBranchListItem
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\NestedBranchListItem $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets property_asset
     *
     * @return \Swagger\Client\Model\NestedPropertyAssetListItem
     */
    public function getPropertyAsset()
    {
        return $this->container['property_asset'];
    }

    /**
     * Sets property_asset
     *
     * @param \Swagger\Client\Model\NestedPropertyAssetListItem $property_asset property_asset
     *
     * @return $this
     */
    public function setPropertyAsset($property_asset)
    {
        $this->container['property_asset'] = $property_asset;

        return $this;
    }

    /**
     * Gets project_leader
     *
     * @return \Swagger\Client\Model\NestedEmployeeListItem
     */
    public function getProjectLeader()
    {
        return $this->container['project_leader'];
    }

    /**
     * Sets project_leader
     *
     * @param \Swagger\Client\Model\NestedEmployeeListItem $project_leader project_leader
     *
     * @return $this
     */
    public function setProjectLeader($project_leader)
    {
        $this->container['project_leader'] = $project_leader;

        return $this;
    }

    /**
     * Gets work_planner
     *
     * @return \Swagger\Client\Model\NestedEmployeeListItem
     */
    public function getWorkPlanner()
    {
        return $this->container['work_planner'];
    }

    /**
     * Sets work_planner
     *
     * @param \Swagger\Client\Model\NestedEmployeeListItem $work_planner work_planner
     *
     * @return $this
     */
    public function setWorkPlanner($work_planner)
    {
        $this->container['work_planner'] = $work_planner;

        return $this;
    }

    /**
     * Gets executor
     *
     * @return \Swagger\Client\Model\NestedEmployeeListItem
     */
    public function getExecutor()
    {
        return $this->container['executor'];
    }

    /**
     * Sets executor
     *
     * @param \Swagger\Client\Model\NestedEmployeeListItem $executor executor
     *
     * @return $this
     */
    public function setExecutor($executor)
    {
        $this->container['executor'] = $executor;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


