<?php
/**
 * InvoiceOrganization
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceOrganization Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceOrganization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceOrganization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'street_name' => 'string',
        'house_number' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country' => 'string',
        'iban' => 'string',
        'coc_number' => 'string',
        'vat_number' => 'string',
        'email_address' => 'string',
        'website_address' => 'string',
        'phone_number' => 'string',
        'wage_component_percentage' => 'string',
        'g_account_percentage' => 'string',
        'g_account_text' => 'string',
        'n_account_text' => 'string',
        'logo' => '\Swagger\Client\Model\File',
        'expiration_reminder_days' => 'int',
        'should_copy_project_description' => 'bool',
        'show_project_number_on_invoice' => 'bool',
        'show_project_name_on_invoice_pdf' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'street_name' => null,
        'house_number' => null,
        'zip_code' => null,
        'city' => null,
        'country' => null,
        'iban' => null,
        'coc_number' => null,
        'vat_number' => null,
        'email_address' => null,
        'website_address' => null,
        'phone_number' => null,
        'wage_component_percentage' => null,
        'g_account_percentage' => null,
        'g_account_text' => null,
        'n_account_text' => null,
        'logo' => null,
        'expiration_reminder_days' => null,
        'should_copy_project_description' => null,
        'show_project_number_on_invoice' => null,
        'show_project_name_on_invoice_pdf' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country' => 'country',
        'iban' => 'iban',
        'coc_number' => 'cocNumber',
        'vat_number' => 'vatNumber',
        'email_address' => 'emailAddress',
        'website_address' => 'websiteAddress',
        'phone_number' => 'phoneNumber',
        'wage_component_percentage' => 'wageComponentPercentage',
        'g_account_percentage' => 'gAccountPercentage',
        'g_account_text' => 'gAccountText',
        'n_account_text' => 'nAccountText',
        'logo' => 'logo',
        'expiration_reminder_days' => 'expirationReminderDays',
        'should_copy_project_description' => 'shouldCopyProjectDescription',
        'show_project_number_on_invoice' => 'showProjectNumberOnInvoice',
        'show_project_name_on_invoice_pdf' => 'showProjectNameOnInvoicePdf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country' => 'setCountry',
        'iban' => 'setIban',
        'coc_number' => 'setCocNumber',
        'vat_number' => 'setVatNumber',
        'email_address' => 'setEmailAddress',
        'website_address' => 'setWebsiteAddress',
        'phone_number' => 'setPhoneNumber',
        'wage_component_percentage' => 'setWageComponentPercentage',
        'g_account_percentage' => 'setGAccountPercentage',
        'g_account_text' => 'setGAccountText',
        'n_account_text' => 'setNAccountText',
        'logo' => 'setLogo',
        'expiration_reminder_days' => 'setExpirationReminderDays',
        'should_copy_project_description' => 'setShouldCopyProjectDescription',
        'show_project_number_on_invoice' => 'setShowProjectNumberOnInvoice',
        'show_project_name_on_invoice_pdf' => 'setShowProjectNameOnInvoicePdf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country' => 'getCountry',
        'iban' => 'getIban',
        'coc_number' => 'getCocNumber',
        'vat_number' => 'getVatNumber',
        'email_address' => 'getEmailAddress',
        'website_address' => 'getWebsiteAddress',
        'phone_number' => 'getPhoneNumber',
        'wage_component_percentage' => 'getWageComponentPercentage',
        'g_account_percentage' => 'getGAccountPercentage',
        'g_account_text' => 'getGAccountText',
        'n_account_text' => 'getNAccountText',
        'logo' => 'getLogo',
        'expiration_reminder_days' => 'getExpirationReminderDays',
        'should_copy_project_description' => 'getShouldCopyProjectDescription',
        'show_project_number_on_invoice' => 'getShowProjectNumberOnInvoice',
        'show_project_name_on_invoice_pdf' => 'getShowProjectNameOnInvoicePdf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['coc_number'] = isset($data['coc_number']) ? $data['coc_number'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['website_address'] = isset($data['website_address']) ? $data['website_address'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['wage_component_percentage'] = isset($data['wage_component_percentage']) ? $data['wage_component_percentage'] : null;
        $this->container['g_account_percentage'] = isset($data['g_account_percentage']) ? $data['g_account_percentage'] : null;
        $this->container['g_account_text'] = isset($data['g_account_text']) ? $data['g_account_text'] : null;
        $this->container['n_account_text'] = isset($data['n_account_text']) ? $data['n_account_text'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['expiration_reminder_days'] = isset($data['expiration_reminder_days']) ? $data['expiration_reminder_days'] : null;
        $this->container['should_copy_project_description'] = isset($data['should_copy_project_description']) ? $data['should_copy_project_description'] : null;
        $this->container['show_project_number_on_invoice'] = isset($data['show_project_number_on_invoice']) ? $data['show_project_number_on_invoice'] : null;
        $this->container['show_project_name_on_invoice_pdf'] = isset($data['show_project_name_on_invoice_pdf']) ? $data['show_project_name_on_invoice_pdf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the supplier.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The street name of the supplier.
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number The house- or building-number of the supplier.
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip-code of the supplier.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of residence of the supplier.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country of the supplier.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban The IBAN-account number of the supplier.
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets coc_number
     *
     * @return string
     */
    public function getCocNumber()
    {
        return $this->container['coc_number'];
    }

    /**
     * Sets coc_number
     *
     * @param string $coc_number The chamber of commerce number of the supplier.
     *
     * @return $this
     */
    public function setCocNumber($coc_number)
    {
        $this->container['coc_number'] = $coc_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number The VAT-number of the supplier.
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address The email-address of the supplier.
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets website_address
     *
     * @return string
     */
    public function getWebsiteAddress()
    {
        return $this->container['website_address'];
    }

    /**
     * Sets website_address
     *
     * @param string $website_address The website address of the supplier.
     *
     * @return $this
     */
    public function setWebsiteAddress($website_address)
    {
        $this->container['website_address'] = $website_address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The phone number of the supplier.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets wage_component_percentage
     *
     * @return string
     */
    public function getWageComponentPercentage()
    {
        return $this->container['wage_component_percentage'];
    }

    /**
     * Sets wage_component_percentage
     *
     * @param string $wage_component_percentage The wage component percentage for the customer.
     *
     * @return $this
     */
    public function setWageComponentPercentage($wage_component_percentage)
    {
        $this->container['wage_component_percentage'] = $wage_component_percentage;

        return $this;
    }

    /**
     * Gets g_account_percentage
     *
     * @return string
     */
    public function getGAccountPercentage()
    {
        return $this->container['g_account_percentage'];
    }

    /**
     * Sets g_account_percentage
     *
     * @param string $g_account_percentage The g account percentage for the customer.
     *
     * @return $this
     */
    public function setGAccountPercentage($g_account_percentage)
    {
        $this->container['g_account_percentage'] = $g_account_percentage;

        return $this;
    }

    /**
     * Gets g_account_text
     *
     * @return string
     */
    public function getGAccountText()
    {
        return $this->container['g_account_text'];
    }

    /**
     * Sets g_account_text
     *
     * @param string $g_account_text The g account text for the customer.
     *
     * @return $this
     */
    public function setGAccountText($g_account_text)
    {
        $this->container['g_account_text'] = $g_account_text;

        return $this;
    }

    /**
     * Gets n_account_text
     *
     * @return string
     */
    public function getNAccountText()
    {
        return $this->container['n_account_text'];
    }

    /**
     * Sets n_account_text
     *
     * @param string $n_account_text The n account text for the customer.
     *
     * @return $this
     */
    public function setNAccountText($n_account_text)
    {
        $this->container['n_account_text'] = $n_account_text;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \Swagger\Client\Model\File
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \Swagger\Client\Model\File $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets expiration_reminder_days
     *
     * @return int
     */
    public function getExpirationReminderDays()
    {
        return $this->container['expiration_reminder_days'];
    }

    /**
     * Sets expiration_reminder_days
     *
     * @param int $expiration_reminder_days The number of days before a reminder is sent.
     *
     * @return $this
     */
    public function setExpirationReminderDays($expiration_reminder_days)
    {
        $this->container['expiration_reminder_days'] = $expiration_reminder_days;

        return $this;
    }

    /**
     * Gets should_copy_project_description
     *
     * @return bool
     */
    public function getShouldCopyProjectDescription()
    {
        return $this->container['should_copy_project_description'];
    }

    /**
     * Sets should_copy_project_description
     *
     * @param bool $should_copy_project_description Whether the project description should be copied.
     *
     * @return $this
     */
    public function setShouldCopyProjectDescription($should_copy_project_description)
    {
        $this->container['should_copy_project_description'] = $should_copy_project_description;

        return $this;
    }

    /**
     * Gets show_project_number_on_invoice
     *
     * @return bool
     */
    public function getShowProjectNumberOnInvoice()
    {
        return $this->container['show_project_number_on_invoice'];
    }

    /**
     * Sets show_project_number_on_invoice
     *
     * @param bool $show_project_number_on_invoice Whether the project number will show on the invoice.
     *
     * @return $this
     */
    public function setShowProjectNumberOnInvoice($show_project_number_on_invoice)
    {
        $this->container['show_project_number_on_invoice'] = $show_project_number_on_invoice;

        return $this;
    }

    /**
     * Gets show_project_name_on_invoice_pdf
     *
     * @return bool
     */
    public function getShowProjectNameOnInvoicePdf()
    {
        return $this->container['show_project_name_on_invoice_pdf'];
    }

    /**
     * Sets show_project_name_on_invoice_pdf
     *
     * @param bool $show_project_name_on_invoice_pdf Whether the project name will show on the invoice.
     *
     * @return $this
     */
    public function setShowProjectNameOnInvoicePdf($show_project_name_on_invoice_pdf)
    {
        $this->container['show_project_name_on_invoice_pdf'] = $show_project_name_on_invoice_pdf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


