<?php
/**
 * NestedProjectInvoiceTermStatementListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NestedProjectInvoiceTermStatementListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NestedProjectInvoiceTermStatementListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NestedProjectInvoiceTermStatementListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'project_id' => 'int',
        'project_name' => 'string',
        'full_project_number' => 'string',
        'contact_id' => 'int',
        'contact_name' => 'string',
        'fixed_price' => 'string',
        'project_status_id' => 'int',
        'project_category_id' => 'int',
        'project_branch_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'project_id' => null,
        'project_name' => null,
        'full_project_number' => null,
        'contact_id' => null,
        'contact_name' => null,
        'fixed_price' => null,
        'project_status_id' => null,
        'project_category_id' => null,
        'project_branch_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project_id' => 'projectId',
        'project_name' => 'projectName',
        'full_project_number' => 'fullProjectNumber',
        'contact_id' => 'contactId',
        'contact_name' => 'contactName',
        'fixed_price' => 'fixedPrice',
        'project_status_id' => 'projectStatusId',
        'project_category_id' => 'projectCategoryId',
        'project_branch_id' => 'projectBranchId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project_id' => 'setProjectId',
        'project_name' => 'setProjectName',
        'full_project_number' => 'setFullProjectNumber',
        'contact_id' => 'setContactId',
        'contact_name' => 'setContactName',
        'fixed_price' => 'setFixedPrice',
        'project_status_id' => 'setProjectStatusId',
        'project_category_id' => 'setProjectCategoryId',
        'project_branch_id' => 'setProjectBranchId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project_id' => 'getProjectId',
        'project_name' => 'getProjectName',
        'full_project_number' => 'getFullProjectNumber',
        'contact_id' => 'getContactId',
        'contact_name' => 'getContactName',
        'fixed_price' => 'getFixedPrice',
        'project_status_id' => 'getProjectStatusId',
        'project_category_id' => 'getProjectCategoryId',
        'project_branch_id' => 'getProjectBranchId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['full_project_number'] = isset($data['full_project_number']) ? $data['full_project_number'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['fixed_price'] = isset($data['fixed_price']) ? $data['fixed_price'] : null;
        $this->container['project_status_id'] = isset($data['project_status_id']) ? $data['project_status_id'] : null;
        $this->container['project_category_id'] = isset($data['project_category_id']) ? $data['project_category_id'] : null;
        $this->container['project_branch_id'] = isset($data['project_branch_id']) ? $data['project_branch_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the project invoice term.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int $project_id The ID of the project this project term statement belongs to.
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name The name of the project this project term statement belongs to.
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets full_project_number
     *
     * @return string
     */
    public function getFullProjectNumber()
    {
        return $this->container['full_project_number'];
    }

    /**
     * Sets full_project_number
     *
     * @param string $full_project_number The number of the project this project term statement belongs to.
     *
     * @return $this
     */
    public function setFullProjectNumber($full_project_number)
    {
        $this->container['full_project_number'] = $full_project_number;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The ID of the contact associated with this project term statement.
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name The name of the contact associated with this project term statement.
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets fixed_price
     *
     * @return string
     */
    public function getFixedPrice()
    {
        return $this->container['fixed_price'];
    }

    /**
     * Sets fixed_price
     *
     * @param string $fixed_price The fixed price for this project term statement.
     *
     * @return $this
     */
    public function setFixedPrice($fixed_price)
    {
        $this->container['fixed_price'] = $fixed_price;

        return $this;
    }

    /**
     * Gets project_status_id
     *
     * @return int
     */
    public function getProjectStatusId()
    {
        return $this->container['project_status_id'];
    }

    /**
     * Sets project_status_id
     *
     * @param int $project_status_id The ID of the status of the project this project term statement belongs to.
     *
     * @return $this
     */
    public function setProjectStatusId($project_status_id)
    {
        $this->container['project_status_id'] = $project_status_id;

        return $this;
    }

    /**
     * Gets project_category_id
     *
     * @return int
     */
    public function getProjectCategoryId()
    {
        return $this->container['project_category_id'];
    }

    /**
     * Sets project_category_id
     *
     * @param int $project_category_id The ID of the category of the project this project term statement belongs to.
     *
     * @return $this
     */
    public function setProjectCategoryId($project_category_id)
    {
        $this->container['project_category_id'] = $project_category_id;

        return $this;
    }

    /**
     * Gets project_branch_id
     *
     * @return int
     */
    public function getProjectBranchId()
    {
        return $this->container['project_branch_id'];
    }

    /**
     * Sets project_branch_id
     *
     * @param int $project_branch_id The ID of the branch associated with the project this project term statement belongs to.
     *
     * @return $this
     */
    public function setProjectBranchId($project_branch_id)
    {
        $this->container['project_branch_id'] = $project_branch_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


