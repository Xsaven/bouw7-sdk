<?php
/**
 * PurchaseInvoiceListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PurchaseInvoiceListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoiceListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseInvoiceListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'invoice_number' => 'string',
        'payment_reference' => 'string',
        'entry_number' => 'int',
        'division' => '\Swagger\Client\Model\NestedDivisionListItem',
        'branch' => '\Swagger\Client\Model\NestedBranchListItem',
        'current_approver' => 'string',
        'status' => 'int',
        'comment' => 'string',
        'order_number' => 'string',
        'date' => 'string',
        'due_date' => 'string',
        'date_paid' => 'string',
        'sub_total' => 'string',
        'vat_total' => 'string',
        'total' => 'string',
        'supplier' => '\Swagger\Client\Model\NestedContactListItem',
        'project' => '\Swagger\Client\Model\NestedProjectListItem',
        'delivery_ticket' => '\Swagger\Client\Model\NestedDeliveryTicketListItem',
        'is_booked_in_exact' => 'bool',
        'is_booked_in_twinfield' => 'bool',
        'is_originating_from_basecone' => 'bool',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'invoice_number' => null,
        'payment_reference' => null,
        'entry_number' => null,
        'division' => null,
        'branch' => null,
        'current_approver' => null,
        'status' => null,
        'comment' => null,
        'order_number' => null,
        'date' => null,
        'due_date' => null,
        'date_paid' => null,
        'sub_total' => null,
        'vat_total' => null,
        'total' => null,
        'supplier' => null,
        'project' => null,
        'delivery_ticket' => null,
        'is_booked_in_exact' => null,
        'is_booked_in_twinfield' => null,
        'is_originating_from_basecone' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice_number' => 'invoiceNumber',
        'payment_reference' => 'paymentReference',
        'entry_number' => 'entryNumber',
        'division' => 'division',
        'branch' => 'branch',
        'current_approver' => 'currentApprover',
        'status' => 'status',
        'comment' => 'comment',
        'order_number' => 'orderNumber',
        'date' => 'date',
        'due_date' => 'dueDate',
        'date_paid' => 'datePaid',
        'sub_total' => 'subTotal',
        'vat_total' => 'vatTotal',
        'total' => 'total',
        'supplier' => 'supplier',
        'project' => 'project',
        'delivery_ticket' => 'deliveryTicket',
        'is_booked_in_exact' => 'isBookedInExact',
        'is_booked_in_twinfield' => 'isBookedInTwinfield',
        'is_originating_from_basecone' => 'isOriginatingFromBasecone',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice_number' => 'setInvoiceNumber',
        'payment_reference' => 'setPaymentReference',
        'entry_number' => 'setEntryNumber',
        'division' => 'setDivision',
        'branch' => 'setBranch',
        'current_approver' => 'setCurrentApprover',
        'status' => 'setStatus',
        'comment' => 'setComment',
        'order_number' => 'setOrderNumber',
        'date' => 'setDate',
        'due_date' => 'setDueDate',
        'date_paid' => 'setDatePaid',
        'sub_total' => 'setSubTotal',
        'vat_total' => 'setVatTotal',
        'total' => 'setTotal',
        'supplier' => 'setSupplier',
        'project' => 'setProject',
        'delivery_ticket' => 'setDeliveryTicket',
        'is_booked_in_exact' => 'setIsBookedInExact',
        'is_booked_in_twinfield' => 'setIsBookedInTwinfield',
        'is_originating_from_basecone' => 'setIsOriginatingFromBasecone',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice_number' => 'getInvoiceNumber',
        'payment_reference' => 'getPaymentReference',
        'entry_number' => 'getEntryNumber',
        'division' => 'getDivision',
        'branch' => 'getBranch',
        'current_approver' => 'getCurrentApprover',
        'status' => 'getStatus',
        'comment' => 'getComment',
        'order_number' => 'getOrderNumber',
        'date' => 'getDate',
        'due_date' => 'getDueDate',
        'date_paid' => 'getDatePaid',
        'sub_total' => 'getSubTotal',
        'vat_total' => 'getVatTotal',
        'total' => 'getTotal',
        'supplier' => 'getSupplier',
        'project' => 'getProject',
        'delivery_ticket' => 'getDeliveryTicket',
        'is_booked_in_exact' => 'getIsBookedInExact',
        'is_booked_in_twinfield' => 'getIsBookedInTwinfield',
        'is_originating_from_basecone' => 'getIsOriginatingFromBasecone',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['entry_number'] = isset($data['entry_number']) ? $data['entry_number'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['current_approver'] = isset($data['current_approver']) ? $data['current_approver'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['vat_total'] = isset($data['vat_total']) ? $data['vat_total'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['delivery_ticket'] = isset($data['delivery_ticket']) ? $data['delivery_ticket'] : null;
        $this->container['is_booked_in_exact'] = isset($data['is_booked_in_exact']) ? $data['is_booked_in_exact'] : null;
        $this->container['is_booked_in_twinfield'] = isset($data['is_booked_in_twinfield']) ? $data['is_booked_in_twinfield'] : null;
        $this->container['is_originating_from_basecone'] = isset($data['is_originating_from_basecone']) ? $data['is_originating_from_basecone'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of this purchase invoice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The invoice number of this purchase invoice.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string $payment_reference The payment reference of this purchase invoice.
     *
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets entry_number
     *
     * @return int
     */
    public function getEntryNumber()
    {
        return $this->container['entry_number'];
    }

    /**
     * Sets entry_number
     *
     * @param int $entry_number A sequential tracking number assigned to this purchase invoice. Also known as voucher number, serial number or tracking number.
     *
     * @return $this
     */
    public function setEntryNumber($entry_number)
    {
        $this->container['entry_number'] = $entry_number;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \Swagger\Client\Model\NestedDivisionListItem
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \Swagger\Client\Model\NestedDivisionListItem $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\NestedBranchListItem
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\NestedBranchListItem $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets current_approver
     *
     * @return string
     */
    public function getCurrentApprover()
    {
        return $this->container['current_approver'];
    }

    /**
     * Sets current_approver
     *
     * @param string $current_approver The full name of the current approver.
     *
     * @return $this
     */
    public function setCurrentApprover($current_approver)
    {
        $this->container['current_approver'] = $current_approver;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status The status of this purchase invoice. (0 = New, 1 = Approved, 2 = Open, 3 = Expired, 4 = Paid, 5 = Declined)
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment A comment placed on this purchase invoice.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number The order number associated with this purchase invoice.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The entry date of this purchase invoice.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date The due date of this purchase invoice.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return string
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param string $date_paid The date this purchase invoice was paid.
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return string
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param string $sub_total The sum of all purchase invoice line subtotals, excluding VAT.
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets vat_total
     *
     * @return string
     */
    public function getVatTotal()
    {
        return $this->container['vat_total'];
    }

    /**
     * Sets vat_total
     *
     * @param string $vat_total The sum of all purchase invoice line VAT totals.
     *
     * @return $this
     */
    public function setVatTotal($vat_total)
    {
        $this->container['vat_total'] = $vat_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total The sum of all purchase invoice line subtotals, including VAT.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return \Swagger\Client\Model\NestedContactListItem
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param \Swagger\Client\Model\NestedContactListItem $supplier supplier
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\NestedProjectListItem
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\NestedProjectListItem $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets delivery_ticket
     *
     * @return \Swagger\Client\Model\NestedDeliveryTicketListItem
     */
    public function getDeliveryTicket()
    {
        return $this->container['delivery_ticket'];
    }

    /**
     * Sets delivery_ticket
     *
     * @param \Swagger\Client\Model\NestedDeliveryTicketListItem $delivery_ticket delivery_ticket
     *
     * @return $this
     */
    public function setDeliveryTicket($delivery_ticket)
    {
        $this->container['delivery_ticket'] = $delivery_ticket;

        return $this;
    }

    /**
     * Gets is_booked_in_exact
     *
     * @return bool
     */
    public function getIsBookedInExact()
    {
        return $this->container['is_booked_in_exact'];
    }

    /**
     * Sets is_booked_in_exact
     *
     * @param bool $is_booked_in_exact Whether this purchase invoice is booked in Exact.
     *
     * @return $this
     */
    public function setIsBookedInExact($is_booked_in_exact)
    {
        $this->container['is_booked_in_exact'] = $is_booked_in_exact;

        return $this;
    }

    /**
     * Gets is_booked_in_twinfield
     *
     * @return bool
     */
    public function getIsBookedInTwinfield()
    {
        return $this->container['is_booked_in_twinfield'];
    }

    /**
     * Sets is_booked_in_twinfield
     *
     * @param bool $is_booked_in_twinfield Whether this purchase invoice is booked in Twinfield.
     *
     * @return $this
     */
    public function setIsBookedInTwinfield($is_booked_in_twinfield)
    {
        $this->container['is_booked_in_twinfield'] = $is_booked_in_twinfield;

        return $this;
    }

    /**
     * Gets is_originating_from_basecone
     *
     * @return bool
     */
    public function getIsOriginatingFromBasecone()
    {
        return $this->container['is_originating_from_basecone'];
    }

    /**
     * Sets is_originating_from_basecone
     *
     * @param bool $is_originating_from_basecone Whether this purchase invoice originates from Basecone.
     *
     * @return $this
     */
    public function setIsOriginatingFromBasecone($is_originating_from_basecone)
    {
        $this->container['is_originating_from_basecone'] = $is_originating_from_basecone;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


