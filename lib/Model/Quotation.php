<?php
/**
 * Quotation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Quotation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Quotation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Quotation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'employee' => '\Swagger\Client\Model\CondensedEmployee',
        'subject' => 'string',
        'reference' => 'string',
        'information' => 'string',
        'footer' => 'string',
        'quotation_status' => '\Swagger\Client\Model\CondensedQuotationStatus',
        'quotation_number' => 'string',
        'contact' => '\Swagger\Client\Model\CondensedContact',
        'contact_person' => '\Swagger\Client\Model\ContactPerson',
        'contact_person_text' => 'string',
        'salutation' => 'int',
        'salutation_text' => 'string',
        'quotation_date' => 'string',
        'expected_closing_date' => 'string',
        'language' => 'string',
        'note' => 'string',
        'mail_sent_at' => 'string',
        'project' => '\Swagger\Client\Model\CondensedProject',
        'branch' => '\Swagger\Client\Model\CondensedBranch',
        'disable_quotation_lines' => 'bool',
        'conditions' => 'string',
        'layout' => 'string',
        'show_price_per_line' => 'bool',
        'show_subtotal_per_chapter' => 'bool',
        'show_total_price' => 'bool',
        'labour_day_price' => 'string',
        'calculation_labour_day_price' => 'string',
        'discount' => 'int',
        'overheads' => 'string',
        'overheads_vat_tariff' => '\Swagger\Client\Model\CondensedVatTariff',
        'profit_and_risk' => 'string',
        'profit_and_risk_vat_tariff' => '\Swagger\Client\Model\CondensedVatTariff',
        'show_overheads_on_pdf' => 'bool',
        'closing_chance' => 'int',
        'commission_percentage' => 'string',
        'is_calculation' => 'bool',
        'activities_title' => 'string',
        'attachments' => '\Swagger\Client\Model\QuotationAttachment[]',
        'common_attachments' => '\Swagger\Client\Model\CommonQuotationAttachment[]',
        'chapters' => '\Swagger\Client\Model\QuotationLineChapter[]',
        'sent_emails' => '\Swagger\Client\Model\QuotationMail[]',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'employee' => null,
        'subject' => null,
        'reference' => null,
        'information' => null,
        'footer' => null,
        'quotation_status' => null,
        'quotation_number' => null,
        'contact' => null,
        'contact_person' => null,
        'contact_person_text' => null,
        'salutation' => null,
        'salutation_text' => null,
        'quotation_date' => null,
        'expected_closing_date' => null,
        'language' => null,
        'note' => null,
        'mail_sent_at' => null,
        'project' => null,
        'branch' => null,
        'disable_quotation_lines' => null,
        'conditions' => null,
        'layout' => null,
        'show_price_per_line' => null,
        'show_subtotal_per_chapter' => null,
        'show_total_price' => null,
        'labour_day_price' => null,
        'calculation_labour_day_price' => null,
        'discount' => null,
        'overheads' => null,
        'overheads_vat_tariff' => null,
        'profit_and_risk' => null,
        'profit_and_risk_vat_tariff' => null,
        'show_overheads_on_pdf' => null,
        'closing_chance' => null,
        'commission_percentage' => null,
        'is_calculation' => null,
        'activities_title' => null,
        'attachments' => null,
        'common_attachments' => null,
        'chapters' => null,
        'sent_emails' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee' => 'employee',
        'subject' => 'subject',
        'reference' => 'reference',
        'information' => 'information',
        'footer' => 'footer',
        'quotation_status' => 'quotationStatus',
        'quotation_number' => 'quotationNumber',
        'contact' => 'contact',
        'contact_person' => 'contactPerson',
        'contact_person_text' => 'contactPersonText',
        'salutation' => 'salutation',
        'salutation_text' => 'salutationText',
        'quotation_date' => 'quotationDate',
        'expected_closing_date' => 'expectedClosingDate',
        'language' => 'language',
        'note' => 'note',
        'mail_sent_at' => 'mailSentAt',
        'project' => 'project',
        'branch' => 'branch',
        'disable_quotation_lines' => 'disableQuotationLines',
        'conditions' => 'conditions',
        'layout' => 'layout',
        'show_price_per_line' => 'showPricePerLine',
        'show_subtotal_per_chapter' => 'showSubtotalPerChapter',
        'show_total_price' => 'showTotalPrice',
        'labour_day_price' => 'labourDayPrice',
        'calculation_labour_day_price' => 'calculationLabourDayPrice',
        'discount' => 'discount',
        'overheads' => 'overheads',
        'overheads_vat_tariff' => 'overheadsVatTariff',
        'profit_and_risk' => 'profitAndRisk',
        'profit_and_risk_vat_tariff' => 'profitAndRiskVatTariff',
        'show_overheads_on_pdf' => 'showOverheadsOnPdf',
        'closing_chance' => 'closingChance',
        'commission_percentage' => 'commissionPercentage',
        'is_calculation' => 'isCalculation',
        'activities_title' => 'activitiesTitle',
        'attachments' => 'attachments',
        'common_attachments' => 'commonAttachments',
        'chapters' => 'chapters',
        'sent_emails' => 'sentEmails',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee' => 'setEmployee',
        'subject' => 'setSubject',
        'reference' => 'setReference',
        'information' => 'setInformation',
        'footer' => 'setFooter',
        'quotation_status' => 'setQuotationStatus',
        'quotation_number' => 'setQuotationNumber',
        'contact' => 'setContact',
        'contact_person' => 'setContactPerson',
        'contact_person_text' => 'setContactPersonText',
        'salutation' => 'setSalutation',
        'salutation_text' => 'setSalutationText',
        'quotation_date' => 'setQuotationDate',
        'expected_closing_date' => 'setExpectedClosingDate',
        'language' => 'setLanguage',
        'note' => 'setNote',
        'mail_sent_at' => 'setMailSentAt',
        'project' => 'setProject',
        'branch' => 'setBranch',
        'disable_quotation_lines' => 'setDisableQuotationLines',
        'conditions' => 'setConditions',
        'layout' => 'setLayout',
        'show_price_per_line' => 'setShowPricePerLine',
        'show_subtotal_per_chapter' => 'setShowSubtotalPerChapter',
        'show_total_price' => 'setShowTotalPrice',
        'labour_day_price' => 'setLabourDayPrice',
        'calculation_labour_day_price' => 'setCalculationLabourDayPrice',
        'discount' => 'setDiscount',
        'overheads' => 'setOverheads',
        'overheads_vat_tariff' => 'setOverheadsVatTariff',
        'profit_and_risk' => 'setProfitAndRisk',
        'profit_and_risk_vat_tariff' => 'setProfitAndRiskVatTariff',
        'show_overheads_on_pdf' => 'setShowOverheadsOnPdf',
        'closing_chance' => 'setClosingChance',
        'commission_percentage' => 'setCommissionPercentage',
        'is_calculation' => 'setIsCalculation',
        'activities_title' => 'setActivitiesTitle',
        'attachments' => 'setAttachments',
        'common_attachments' => 'setCommonAttachments',
        'chapters' => 'setChapters',
        'sent_emails' => 'setSentEmails',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee' => 'getEmployee',
        'subject' => 'getSubject',
        'reference' => 'getReference',
        'information' => 'getInformation',
        'footer' => 'getFooter',
        'quotation_status' => 'getQuotationStatus',
        'quotation_number' => 'getQuotationNumber',
        'contact' => 'getContact',
        'contact_person' => 'getContactPerson',
        'contact_person_text' => 'getContactPersonText',
        'salutation' => 'getSalutation',
        'salutation_text' => 'getSalutationText',
        'quotation_date' => 'getQuotationDate',
        'expected_closing_date' => 'getExpectedClosingDate',
        'language' => 'getLanguage',
        'note' => 'getNote',
        'mail_sent_at' => 'getMailSentAt',
        'project' => 'getProject',
        'branch' => 'getBranch',
        'disable_quotation_lines' => 'getDisableQuotationLines',
        'conditions' => 'getConditions',
        'layout' => 'getLayout',
        'show_price_per_line' => 'getShowPricePerLine',
        'show_subtotal_per_chapter' => 'getShowSubtotalPerChapter',
        'show_total_price' => 'getShowTotalPrice',
        'labour_day_price' => 'getLabourDayPrice',
        'calculation_labour_day_price' => 'getCalculationLabourDayPrice',
        'discount' => 'getDiscount',
        'overheads' => 'getOverheads',
        'overheads_vat_tariff' => 'getOverheadsVatTariff',
        'profit_and_risk' => 'getProfitAndRisk',
        'profit_and_risk_vat_tariff' => 'getProfitAndRiskVatTariff',
        'show_overheads_on_pdf' => 'getShowOverheadsOnPdf',
        'closing_chance' => 'getClosingChance',
        'commission_percentage' => 'getCommissionPercentage',
        'is_calculation' => 'getIsCalculation',
        'activities_title' => 'getActivitiesTitle',
        'attachments' => 'getAttachments',
        'common_attachments' => 'getCommonAttachments',
        'chapters' => 'getChapters',
        'sent_emails' => 'getSentEmails',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['information'] = isset($data['information']) ? $data['information'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['quotation_status'] = isset($data['quotation_status']) ? $data['quotation_status'] : null;
        $this->container['quotation_number'] = isset($data['quotation_number']) ? $data['quotation_number'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['contact_person_text'] = isset($data['contact_person_text']) ? $data['contact_person_text'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['salutation_text'] = isset($data['salutation_text']) ? $data['salutation_text'] : null;
        $this->container['quotation_date'] = isset($data['quotation_date']) ? $data['quotation_date'] : null;
        $this->container['expected_closing_date'] = isset($data['expected_closing_date']) ? $data['expected_closing_date'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['mail_sent_at'] = isset($data['mail_sent_at']) ? $data['mail_sent_at'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['disable_quotation_lines'] = isset($data['disable_quotation_lines']) ? $data['disable_quotation_lines'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['layout'] = isset($data['layout']) ? $data['layout'] : null;
        $this->container['show_price_per_line'] = isset($data['show_price_per_line']) ? $data['show_price_per_line'] : null;
        $this->container['show_subtotal_per_chapter'] = isset($data['show_subtotal_per_chapter']) ? $data['show_subtotal_per_chapter'] : null;
        $this->container['show_total_price'] = isset($data['show_total_price']) ? $data['show_total_price'] : null;
        $this->container['labour_day_price'] = isset($data['labour_day_price']) ? $data['labour_day_price'] : null;
        $this->container['calculation_labour_day_price'] = isset($data['calculation_labour_day_price']) ? $data['calculation_labour_day_price'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['overheads'] = isset($data['overheads']) ? $data['overheads'] : null;
        $this->container['overheads_vat_tariff'] = isset($data['overheads_vat_tariff']) ? $data['overheads_vat_tariff'] : null;
        $this->container['profit_and_risk'] = isset($data['profit_and_risk']) ? $data['profit_and_risk'] : null;
        $this->container['profit_and_risk_vat_tariff'] = isset($data['profit_and_risk_vat_tariff']) ? $data['profit_and_risk_vat_tariff'] : null;
        $this->container['show_overheads_on_pdf'] = isset($data['show_overheads_on_pdf']) ? $data['show_overheads_on_pdf'] : null;
        $this->container['closing_chance'] = isset($data['closing_chance']) ? $data['closing_chance'] : null;
        $this->container['commission_percentage'] = isset($data['commission_percentage']) ? $data['commission_percentage'] : null;
        $this->container['is_calculation'] = isset($data['is_calculation']) ? $data['is_calculation'] : null;
        $this->container['activities_title'] = isset($data['activities_title']) ? $data['activities_title'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['common_attachments'] = isset($data['common_attachments']) ? $data['common_attachments'] : null;
        $this->container['chapters'] = isset($data['chapters']) ? $data['chapters'] : null;
        $this->container['sent_emails'] = isset($data['sent_emails']) ? $data['sent_emails'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['employee'] === null) {
            $invalidProperties[] = "'employee' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ((mb_strlen($this->container['subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['quotation_status'] === null) {
            $invalidProperties[] = "'quotation_status' can't be null";
        }
        if ($this->container['contact'] === null) {
            $invalidProperties[] = "'contact' can't be null";
        }
        if (!is_null($this->container['contact_person_text']) && (mb_strlen($this->container['contact_person_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_person_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['salutation_text']) && (mb_strlen($this->container['salutation_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'salutation_text', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['quotation_date'] === null) {
            $invalidProperties[] = "'quotation_date' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['layout'] === null) {
            $invalidProperties[] = "'layout' can't be null";
        }
        if (!is_null($this->container['discount']) && ($this->container['discount'] > 99)) {
            $invalidProperties[] = "invalid value for 'discount', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['discount']) && ($this->container['discount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['closing_chance']) && ($this->container['closing_chance'] > 100)) {
            $invalidProperties[] = "invalid value for 'closing_chance', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['closing_chance']) && ($this->container['closing_chance'] < 0)) {
            $invalidProperties[] = "invalid value for 'closing_chance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['activities_title']) && (mb_strlen($this->container['activities_title']) > 255)) {
            $invalidProperties[] = "invalid value for 'activities_title', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the quotation.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\CondensedEmployee
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\CondensedEmployee $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The subject of the quotation.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        if ((mb_strlen($subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference of the quotation.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets information
     *
     * @return string
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param string $information The information of the quotation.
     *
     * @return $this
     */
    public function setInformation($information)
    {
        $this->container['information'] = $information;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string $footer The footer of the quotation.
     *
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets quotation_status
     *
     * @return \Swagger\Client\Model\CondensedQuotationStatus
     */
    public function getQuotationStatus()
    {
        return $this->container['quotation_status'];
    }

    /**
     * Sets quotation_status
     *
     * @param \Swagger\Client\Model\CondensedQuotationStatus $quotation_status quotation_status
     *
     * @return $this
     */
    public function setQuotationStatus($quotation_status)
    {
        $this->container['quotation_status'] = $quotation_status;

        return $this;
    }

    /**
     * Gets quotation_number
     *
     * @return string
     */
    public function getQuotationNumber()
    {
        return $this->container['quotation_number'];
    }

    /**
     * Sets quotation_number
     *
     * @param string $quotation_number The number of the quotation.
     *
     * @return $this
     */
    public function setQuotationNumber($quotation_number)
    {
        $this->container['quotation_number'] = $quotation_number;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\CondensedContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\CondensedContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\ContactPerson
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\ContactPerson $contact_person contact_person
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets contact_person_text
     *
     * @return string
     */
    public function getContactPersonText()
    {
        return $this->container['contact_person_text'];
    }

    /**
     * Sets contact_person_text
     *
     * @param string $contact_person_text The contact person text of the quotation.
     *
     * @return $this
     */
    public function setContactPersonText($contact_person_text)
    {
        if (!is_null($contact_person_text) && (mb_strlen($contact_person_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_text when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['contact_person_text'] = $contact_person_text;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return int
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param int $salutation The salutation of this quotation.
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets salutation_text
     *
     * @return string
     */
    public function getSalutationText()
    {
        return $this->container['salutation_text'];
    }

    /**
     * Sets salutation_text
     *
     * @param string $salutation_text The salutation text of the quotation.
     *
     * @return $this
     */
    public function setSalutationText($salutation_text)
    {
        if (!is_null($salutation_text) && (mb_strlen($salutation_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $salutation_text when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['salutation_text'] = $salutation_text;

        return $this;
    }

    /**
     * Gets quotation_date
     *
     * @return string
     */
    public function getQuotationDate()
    {
        return $this->container['quotation_date'];
    }

    /**
     * Sets quotation_date
     *
     * @param string $quotation_date The date of this quotation.
     *
     * @return $this
     */
    public function setQuotationDate($quotation_date)
    {
        $this->container['quotation_date'] = $quotation_date;

        return $this;
    }

    /**
     * Gets expected_closing_date
     *
     * @return string
     */
    public function getExpectedClosingDate()
    {
        return $this->container['expected_closing_date'];
    }

    /**
     * Sets expected_closing_date
     *
     * @param string $expected_closing_date The expected closing date of this quotation.
     *
     * @return $this
     */
    public function setExpectedClosingDate($expected_closing_date)
    {
        $this->container['expected_closing_date'] = $expected_closing_date;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The locale used by this quotation, e.g.: nl-NL.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note The note of this quotation.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets mail_sent_at
     *
     * @return string
     */
    public function getMailSentAt()
    {
        return $this->container['mail_sent_at'];
    }

    /**
     * Sets mail_sent_at
     *
     * @param string $mail_sent_at The date when the mail was sent.
     *
     * @return $this
     */
    public function setMailSentAt($mail_sent_at)
    {
        $this->container['mail_sent_at'] = $mail_sent_at;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\CondensedProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\CondensedProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\CondensedBranch
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\CondensedBranch $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets disable_quotation_lines
     *
     * @return bool
     */
    public function getDisableQuotationLines()
    {
        return $this->container['disable_quotation_lines'];
    }

    /**
     * Sets disable_quotation_lines
     *
     * @param bool $disable_quotation_lines Whether the quotation lines are disabled.
     *
     * @return $this
     */
    public function setDisableQuotationLines($disable_quotation_lines)
    {
        $this->container['disable_quotation_lines'] = $disable_quotation_lines;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string $conditions The conditions of this quotation.
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return string
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param string $layout The layout of the quotation.
     *
     * @return $this
     */
    public function setLayout($layout)
    {
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets show_price_per_line
     *
     * @return bool
     */
    public function getShowPricePerLine()
    {
        return $this->container['show_price_per_line'];
    }

    /**
     * Sets show_price_per_line
     *
     * @param bool $show_price_per_line Whether the price is shown per line.
     *
     * @return $this
     */
    public function setShowPricePerLine($show_price_per_line)
    {
        $this->container['show_price_per_line'] = $show_price_per_line;

        return $this;
    }

    /**
     * Gets show_subtotal_per_chapter
     *
     * @return bool
     */
    public function getShowSubtotalPerChapter()
    {
        return $this->container['show_subtotal_per_chapter'];
    }

    /**
     * Sets show_subtotal_per_chapter
     *
     * @param bool $show_subtotal_per_chapter Whether the subtotal is shown per chapter.
     *
     * @return $this
     */
    public function setShowSubtotalPerChapter($show_subtotal_per_chapter)
    {
        $this->container['show_subtotal_per_chapter'] = $show_subtotal_per_chapter;

        return $this;
    }

    /**
     * Gets show_total_price
     *
     * @return bool
     */
    public function getShowTotalPrice()
    {
        return $this->container['show_total_price'];
    }

    /**
     * Sets show_total_price
     *
     * @param bool $show_total_price Whether the total price is shown on this quotation.
     *
     * @return $this
     */
    public function setShowTotalPrice($show_total_price)
    {
        $this->container['show_total_price'] = $show_total_price;

        return $this;
    }

    /**
     * Gets labour_day_price
     *
     * @return string
     */
    public function getLabourDayPrice()
    {
        return $this->container['labour_day_price'];
    }

    /**
     * Sets labour_day_price
     *
     * @param string $labour_day_price The labour day price of this quotation.
     *
     * @return $this
     */
    public function setLabourDayPrice($labour_day_price)
    {
        $this->container['labour_day_price'] = $labour_day_price;

        return $this;
    }

    /**
     * Gets calculation_labour_day_price
     *
     * @return string
     */
    public function getCalculationLabourDayPrice()
    {
        return $this->container['calculation_labour_day_price'];
    }

    /**
     * Sets calculation_labour_day_price
     *
     * @param string $calculation_labour_day_price The calculation labour day price of this quotation.
     *
     * @return $this
     */
    public function setCalculationLabourDayPrice($calculation_labour_day_price)
    {
        $this->container['calculation_labour_day_price'] = $calculation_labour_day_price;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return int
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int $discount The discount of this quotation.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {

        if (!is_null($discount) && ($discount > 99)) {
            throw new \InvalidArgumentException('invalid value for $discount when calling Quotation., must be smaller than or equal to 99.');
        }
        if (!is_null($discount) && ($discount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount when calling Quotation., must be bigger than or equal to 0.');
        }

        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets overheads
     *
     * @return string
     */
    public function getOverheads()
    {
        return $this->container['overheads'];
    }

    /**
     * Sets overheads
     *
     * @param string $overheads The general costs of this quotation.
     *
     * @return $this
     */
    public function setOverheads($overheads)
    {
        $this->container['overheads'] = $overheads;

        return $this;
    }

    /**
     * Gets overheads_vat_tariff
     *
     * @return \Swagger\Client\Model\CondensedVatTariff
     */
    public function getOverheadsVatTariff()
    {
        return $this->container['overheads_vat_tariff'];
    }

    /**
     * Sets overheads_vat_tariff
     *
     * @param \Swagger\Client\Model\CondensedVatTariff $overheads_vat_tariff overheads_vat_tariff
     *
     * @return $this
     */
    public function setOverheadsVatTariff($overheads_vat_tariff)
    {
        $this->container['overheads_vat_tariff'] = $overheads_vat_tariff;

        return $this;
    }

    /**
     * Gets profit_and_risk
     *
     * @return string
     */
    public function getProfitAndRisk()
    {
        return $this->container['profit_and_risk'];
    }

    /**
     * Sets profit_and_risk
     *
     * @param string $profit_and_risk The profit and risk costs of this quotation.
     *
     * @return $this
     */
    public function setProfitAndRisk($profit_and_risk)
    {
        $this->container['profit_and_risk'] = $profit_and_risk;

        return $this;
    }

    /**
     * Gets profit_and_risk_vat_tariff
     *
     * @return \Swagger\Client\Model\CondensedVatTariff
     */
    public function getProfitAndRiskVatTariff()
    {
        return $this->container['profit_and_risk_vat_tariff'];
    }

    /**
     * Sets profit_and_risk_vat_tariff
     *
     * @param \Swagger\Client\Model\CondensedVatTariff $profit_and_risk_vat_tariff profit_and_risk_vat_tariff
     *
     * @return $this
     */
    public function setProfitAndRiskVatTariff($profit_and_risk_vat_tariff)
    {
        $this->container['profit_and_risk_vat_tariff'] = $profit_and_risk_vat_tariff;

        return $this;
    }

    /**
     * Gets show_overheads_on_pdf
     *
     * @return bool
     */
    public function getShowOverheadsOnPdf()
    {
        return $this->container['show_overheads_on_pdf'];
    }

    /**
     * Sets show_overheads_on_pdf
     *
     * @param bool $show_overheads_on_pdf Whether the general costs and profit and risk should be shown on the quotation PDF.
     *
     * @return $this
     */
    public function setShowOverheadsOnPdf($show_overheads_on_pdf)
    {
        $this->container['show_overheads_on_pdf'] = $show_overheads_on_pdf;

        return $this;
    }

    /**
     * Gets closing_chance
     *
     * @return int
     */
    public function getClosingChance()
    {
        return $this->container['closing_chance'];
    }

    /**
     * Sets closing_chance
     *
     * @param int $closing_chance The closing chance of this quotation.
     *
     * @return $this
     */
    public function setClosingChance($closing_chance)
    {

        if (!is_null($closing_chance) && ($closing_chance > 100)) {
            throw new \InvalidArgumentException('invalid value for $closing_chance when calling Quotation., must be smaller than or equal to 100.');
        }
        if (!is_null($closing_chance) && ($closing_chance < 0)) {
            throw new \InvalidArgumentException('invalid value for $closing_chance when calling Quotation., must be bigger than or equal to 0.');
        }

        $this->container['closing_chance'] = $closing_chance;

        return $this;
    }

    /**
     * Gets commission_percentage
     *
     * @return string
     */
    public function getCommissionPercentage()
    {
        return $this->container['commission_percentage'];
    }

    /**
     * Sets commission_percentage
     *
     * @param string $commission_percentage The commision percentage of this quotation.
     *
     * @return $this
     */
    public function setCommissionPercentage($commission_percentage)
    {
        $this->container['commission_percentage'] = $commission_percentage;

        return $this;
    }

    /**
     * Gets is_calculation
     *
     * @return bool
     */
    public function getIsCalculation()
    {
        return $this->container['is_calculation'];
    }

    /**
     * Sets is_calculation
     *
     * @param bool $is_calculation Whether the quotation is a calculation.
     *
     * @return $this
     */
    public function setIsCalculation($is_calculation)
    {
        $this->container['is_calculation'] = $is_calculation;

        return $this;
    }

    /**
     * Gets activities_title
     *
     * @return string
     */
    public function getActivitiesTitle()
    {
        return $this->container['activities_title'];
    }

    /**
     * Sets activities_title
     *
     * @param string $activities_title The activities title of the quotation.
     *
     * @return $this
     */
    public function setActivitiesTitle($activities_title)
    {
        if (!is_null($activities_title) && (mb_strlen($activities_title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $activities_title when calling Quotation., must be smaller than or equal to 255.');
        }

        $this->container['activities_title'] = $activities_title;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\QuotationAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\QuotationAttachment[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets common_attachments
     *
     * @return \Swagger\Client\Model\CommonQuotationAttachment[]
     */
    public function getCommonAttachments()
    {
        return $this->container['common_attachments'];
    }

    /**
     * Sets common_attachments
     *
     * @param \Swagger\Client\Model\CommonQuotationAttachment[] $common_attachments common_attachments
     *
     * @return $this
     */
    public function setCommonAttachments($common_attachments)
    {
        $this->container['common_attachments'] = $common_attachments;

        return $this;
    }

    /**
     * Gets chapters
     *
     * @return \Swagger\Client\Model\QuotationLineChapter[]
     */
    public function getChapters()
    {
        return $this->container['chapters'];
    }

    /**
     * Sets chapters
     *
     * @param \Swagger\Client\Model\QuotationLineChapter[] $chapters chapters
     *
     * @return $this
     */
    public function setChapters($chapters)
    {
        $this->container['chapters'] = $chapters;

        return $this;
    }

    /**
     * Gets sent_emails
     *
     * @return \Swagger\Client\Model\QuotationMail[]
     */
    public function getSentEmails()
    {
        return $this->container['sent_emails'];
    }

    /**
     * Sets sent_emails
     *
     * @param \Swagger\Client\Model\QuotationMail[] $sent_emails All mails sent for this invoice.
     *
     * @return $this
     */
    public function setSentEmails($sent_emails)
    {
        $this->container['sent_emails'] = $sent_emails;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


