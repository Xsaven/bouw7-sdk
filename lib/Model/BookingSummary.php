<?php
/**
 * BookingSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BookingSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BookingSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'material' => '\Swagger\Client\Model\BookingItemSummary',
        'equipment' => '\Swagger\Client\Model\BookingItemSummary',
        'garbage' => '\Swagger\Client\Model\BookingItemSummary',
        'delivery_tickets' => '\Swagger\Client\Model\BookingItemSummary',
        'purchase_invoice_lines' => '\Swagger\Client\Model\BookingItemSummary',
        'employee_hours' => '\Swagger\Client\Model\BookingItemSummary',
        'contact_hours' => '\Swagger\Client\Model\BookingItemSummary',
        'profit' => 'string',
        'item_count' => 'int',
        'cost_price' => 'string',
        'selling_price' => 'string',
        'amount' => 'string',
        'invoice_amount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'material' => null,
        'equipment' => null,
        'garbage' => null,
        'delivery_tickets' => null,
        'purchase_invoice_lines' => null,
        'employee_hours' => null,
        'contact_hours' => null,
        'profit' => null,
        'item_count' => null,
        'cost_price' => null,
        'selling_price' => null,
        'amount' => null,
        'invoice_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'material' => 'material',
        'equipment' => 'equipment',
        'garbage' => 'garbage',
        'delivery_tickets' => 'deliveryTickets',
        'purchase_invoice_lines' => 'purchaseInvoiceLines',
        'employee_hours' => 'employeeHours',
        'contact_hours' => 'contactHours',
        'profit' => 'profit',
        'item_count' => 'itemCount',
        'cost_price' => 'costPrice',
        'selling_price' => 'sellingPrice',
        'amount' => 'amount',
        'invoice_amount' => 'invoiceAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'material' => 'setMaterial',
        'equipment' => 'setEquipment',
        'garbage' => 'setGarbage',
        'delivery_tickets' => 'setDeliveryTickets',
        'purchase_invoice_lines' => 'setPurchaseInvoiceLines',
        'employee_hours' => 'setEmployeeHours',
        'contact_hours' => 'setContactHours',
        'profit' => 'setProfit',
        'item_count' => 'setItemCount',
        'cost_price' => 'setCostPrice',
        'selling_price' => 'setSellingPrice',
        'amount' => 'setAmount',
        'invoice_amount' => 'setInvoiceAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'material' => 'getMaterial',
        'equipment' => 'getEquipment',
        'garbage' => 'getGarbage',
        'delivery_tickets' => 'getDeliveryTickets',
        'purchase_invoice_lines' => 'getPurchaseInvoiceLines',
        'employee_hours' => 'getEmployeeHours',
        'contact_hours' => 'getContactHours',
        'profit' => 'getProfit',
        'item_count' => 'getItemCount',
        'cost_price' => 'getCostPrice',
        'selling_price' => 'getSellingPrice',
        'amount' => 'getAmount',
        'invoice_amount' => 'getInvoiceAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['material'] = isset($data['material']) ? $data['material'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['garbage'] = isset($data['garbage']) ? $data['garbage'] : null;
        $this->container['delivery_tickets'] = isset($data['delivery_tickets']) ? $data['delivery_tickets'] : null;
        $this->container['purchase_invoice_lines'] = isset($data['purchase_invoice_lines']) ? $data['purchase_invoice_lines'] : null;
        $this->container['employee_hours'] = isset($data['employee_hours']) ? $data['employee_hours'] : null;
        $this->container['contact_hours'] = isset($data['contact_hours']) ? $data['contact_hours'] : null;
        $this->container['profit'] = isset($data['profit']) ? $data['profit'] : null;
        $this->container['item_count'] = isset($data['item_count']) ? $data['item_count'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['selling_price'] = isset($data['selling_price']) ? $data['selling_price'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['invoice_amount'] = isset($data['invoice_amount']) ? $data['invoice_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets material
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param \Swagger\Client\Model\BookingItemSummary $material material
     *
     * @return $this
     */
    public function setMaterial($material)
    {
        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param \Swagger\Client\Model\BookingItemSummary $equipment equipment
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets garbage
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getGarbage()
    {
        return $this->container['garbage'];
    }

    /**
     * Sets garbage
     *
     * @param \Swagger\Client\Model\BookingItemSummary $garbage garbage
     *
     * @return $this
     */
    public function setGarbage($garbage)
    {
        $this->container['garbage'] = $garbage;

        return $this;
    }

    /**
     * Gets delivery_tickets
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getDeliveryTickets()
    {
        return $this->container['delivery_tickets'];
    }

    /**
     * Sets delivery_tickets
     *
     * @param \Swagger\Client\Model\BookingItemSummary $delivery_tickets delivery_tickets
     *
     * @return $this
     */
    public function setDeliveryTickets($delivery_tickets)
    {
        $this->container['delivery_tickets'] = $delivery_tickets;

        return $this;
    }

    /**
     * Gets purchase_invoice_lines
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getPurchaseInvoiceLines()
    {
        return $this->container['purchase_invoice_lines'];
    }

    /**
     * Sets purchase_invoice_lines
     *
     * @param \Swagger\Client\Model\BookingItemSummary $purchase_invoice_lines purchase_invoice_lines
     *
     * @return $this
     */
    public function setPurchaseInvoiceLines($purchase_invoice_lines)
    {
        $this->container['purchase_invoice_lines'] = $purchase_invoice_lines;

        return $this;
    }

    /**
     * Gets employee_hours
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getEmployeeHours()
    {
        return $this->container['employee_hours'];
    }

    /**
     * Sets employee_hours
     *
     * @param \Swagger\Client\Model\BookingItemSummary $employee_hours employee_hours
     *
     * @return $this
     */
    public function setEmployeeHours($employee_hours)
    {
        $this->container['employee_hours'] = $employee_hours;

        return $this;
    }

    /**
     * Gets contact_hours
     *
     * @return \Swagger\Client\Model\BookingItemSummary
     */
    public function getContactHours()
    {
        return $this->container['contact_hours'];
    }

    /**
     * Sets contact_hours
     *
     * @param \Swagger\Client\Model\BookingItemSummary $contact_hours contact_hours
     *
     * @return $this
     */
    public function setContactHours($contact_hours)
    {
        $this->container['contact_hours'] = $contact_hours;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return string
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param string $profit The profit.
     *
     * @return $this
     */
    public function setProfit($profit)
    {
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets item_count
     *
     * @return int
     */
    public function getItemCount()
    {
        return $this->container['item_count'];
    }

    /**
     * Sets item_count
     *
     * @param int $item_count Total amount of booking items in this category.
     *
     * @return $this
     */
    public function setItemCount($item_count)
    {
        $this->container['item_count'] = $item_count;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return string
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param string $cost_price Total cost price of all items in this category.
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets selling_price
     *
     * @return string
     */
    public function getSellingPrice()
    {
        return $this->container['selling_price'];
    }

    /**
     * Sets selling_price
     *
     * @param string $selling_price Total selling price of all items in this category.
     *
     * @return $this
     */
    public function setSellingPrice($selling_price)
    {
        $this->container['selling_price'] = $selling_price;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount Total amount of all items in this category.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets invoice_amount
     *
     * @return string
     */
    public function getInvoiceAmount()
    {
        return $this->container['invoice_amount'];
    }

    /**
     * Sets invoice_amount
     *
     * @param string $invoice_amount Total invoice amount of all items in this category.
     *
     * @return $this
     */
    public function setInvoiceAmount($invoice_amount)
    {
        $this->container['invoice_amount'] = $invoice_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


