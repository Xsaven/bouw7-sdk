<?php
/**
 * EmployeeListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'department' => '\Swagger\Client\Model\NestedDepartmentListItem',
        'email_address' => 'string',
        'address' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'phone_number' => 'string',
        'birth_date' => 'string',
        'date_of_employment' => 'string',
        'date_of_resignation' => 'string',
        'workload' => 'string',
        'hourly_rate' => 'string',
        'selling_hourly_rate' => 'string',
        'function_title' => 'string',
        'external' => 'bool',
        'scab_id' => 'string',
        'scab_employee_id' => 'int',
        'user' => '\Swagger\Client\Model\NestedUserLinkListItem',
        'avatar_file_hash' => 'string',
        'has_signature' => 'bool',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'first_name' => null,
        'last_name' => null,
        'department' => null,
        'email_address' => null,
        'address' => null,
        'zip_code' => null,
        'city' => null,
        'phone_number' => null,
        'birth_date' => null,
        'date_of_employment' => null,
        'date_of_resignation' => null,
        'workload' => null,
        'hourly_rate' => null,
        'selling_hourly_rate' => null,
        'function_title' => null,
        'external' => null,
        'scab_id' => null,
        'scab_employee_id' => null,
        'user' => null,
        'avatar_file_hash' => null,
        'has_signature' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'department' => 'department',
        'email_address' => 'emailAddress',
        'address' => 'address',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'phone_number' => 'phoneNumber',
        'birth_date' => 'birthDate',
        'date_of_employment' => 'dateOfEmployment',
        'date_of_resignation' => 'dateOfResignation',
        'workload' => 'workload',
        'hourly_rate' => 'hourlyRate',
        'selling_hourly_rate' => 'sellingHourlyRate',
        'function_title' => 'functionTitle',
        'external' => 'external',
        'scab_id' => 'scabId',
        'scab_employee_id' => 'scabEmployeeId',
        'user' => 'user',
        'avatar_file_hash' => 'avatarFileHash',
        'has_signature' => 'hasSignature',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'department' => 'setDepartment',
        'email_address' => 'setEmailAddress',
        'address' => 'setAddress',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'phone_number' => 'setPhoneNumber',
        'birth_date' => 'setBirthDate',
        'date_of_employment' => 'setDateOfEmployment',
        'date_of_resignation' => 'setDateOfResignation',
        'workload' => 'setWorkload',
        'hourly_rate' => 'setHourlyRate',
        'selling_hourly_rate' => 'setSellingHourlyRate',
        'function_title' => 'setFunctionTitle',
        'external' => 'setExternal',
        'scab_id' => 'setScabId',
        'scab_employee_id' => 'setScabEmployeeId',
        'user' => 'setUser',
        'avatar_file_hash' => 'setAvatarFileHash',
        'has_signature' => 'setHasSignature',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'department' => 'getDepartment',
        'email_address' => 'getEmailAddress',
        'address' => 'getAddress',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'phone_number' => 'getPhoneNumber',
        'birth_date' => 'getBirthDate',
        'date_of_employment' => 'getDateOfEmployment',
        'date_of_resignation' => 'getDateOfResignation',
        'workload' => 'getWorkload',
        'hourly_rate' => 'getHourlyRate',
        'selling_hourly_rate' => 'getSellingHourlyRate',
        'function_title' => 'getFunctionTitle',
        'external' => 'getExternal',
        'scab_id' => 'getScabId',
        'scab_employee_id' => 'getScabEmployeeId',
        'user' => 'getUser',
        'avatar_file_hash' => 'getAvatarFileHash',
        'has_signature' => 'getHasSignature',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['date_of_employment'] = isset($data['date_of_employment']) ? $data['date_of_employment'] : null;
        $this->container['date_of_resignation'] = isset($data['date_of_resignation']) ? $data['date_of_resignation'] : null;
        $this->container['workload'] = isset($data['workload']) ? $data['workload'] : null;
        $this->container['hourly_rate'] = isset($data['hourly_rate']) ? $data['hourly_rate'] : null;
        $this->container['selling_hourly_rate'] = isset($data['selling_hourly_rate']) ? $data['selling_hourly_rate'] : null;
        $this->container['function_title'] = isset($data['function_title']) ? $data['function_title'] : null;
        $this->container['external'] = isset($data['external']) ? $data['external'] : null;
        $this->container['scab_id'] = isset($data['scab_id']) ? $data['scab_id'] : null;
        $this->container['scab_employee_id'] = isset($data['scab_employee_id']) ? $data['scab_employee_id'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['avatar_file_hash'] = isset($data['avatar_file_hash']) ? $data['avatar_file_hash'] : null;
        $this->container['has_signature'] = isset($data['has_signature']) ? $data['has_signature'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of this employee.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The given name of the employee.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The family name of the employee.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \Swagger\Client\Model\NestedDepartmentListItem
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \Swagger\Client\Model\NestedDepartmentListItem $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address The email address of the employee.
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The address, consisting of street name and house/building number, of the employee.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip code, also known as postal code, associated with the address.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of residence of this employee.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The phone number of the employee.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string $birth_date The birth date of the employee.
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets date_of_employment
     *
     * @return string
     */
    public function getDateOfEmployment()
    {
        return $this->container['date_of_employment'];
    }

    /**
     * Sets date_of_employment
     *
     * @param string $date_of_employment The employment date of the employee.
     *
     * @return $this
     */
    public function setDateOfEmployment($date_of_employment)
    {
        $this->container['date_of_employment'] = $date_of_employment;

        return $this;
    }

    /**
     * Gets date_of_resignation
     *
     * @return string
     */
    public function getDateOfResignation()
    {
        return $this->container['date_of_resignation'];
    }

    /**
     * Sets date_of_resignation
     *
     * @param string $date_of_resignation The resignation date of the employee.
     *
     * @return $this
     */
    public function setDateOfResignation($date_of_resignation)
    {
        $this->container['date_of_resignation'] = $date_of_resignation;

        return $this;
    }

    /**
     * Gets workload
     *
     * @return string
     */
    public function getWorkload()
    {
        return $this->container['workload'];
    }

    /**
     * Sets workload
     *
     * @param string $workload The amount of hours this employee is working on a weekly basis.
     *
     * @return $this
     */
    public function setWorkload($workload)
    {
        $this->container['workload'] = $workload;

        return $this;
    }

    /**
     * Gets hourly_rate
     *
     * @return string
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     *
     * @param string $hourly_rate The hourly rate.
     *
     * @return $this
     */
    public function setHourlyRate($hourly_rate)
    {
        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets selling_hourly_rate
     *
     * @return string
     */
    public function getSellingHourlyRate()
    {
        return $this->container['selling_hourly_rate'];
    }

    /**
     * Sets selling_hourly_rate
     *
     * @param string $selling_hourly_rate The selling hourly rate.
     *
     * @return $this
     */
    public function setSellingHourlyRate($selling_hourly_rate)
    {
        $this->container['selling_hourly_rate'] = $selling_hourly_rate;

        return $this;
    }

    /**
     * Gets function_title
     *
     * @return string
     */
    public function getFunctionTitle()
    {
        return $this->container['function_title'];
    }

    /**
     * Sets function_title
     *
     * @param string $function_title The function title of this employee.
     *
     * @return $this
     */
    public function setFunctionTitle($function_title)
    {
        $this->container['function_title'] = $function_title;

        return $this;
    }

    /**
     * Gets external
     *
     * @return bool
     */
    public function getExternal()
    {
        return $this->container['external'];
    }

    /**
     * Sets external
     *
     * @param bool $external True if employee is external, otherwise false.
     *
     * @return $this
     */
    public function setExternal($external)
    {
        $this->container['external'] = $external;

        return $this;
    }

    /**
     * Gets scab_id
     *
     * @return string
     */
    public function getScabId()
    {
        return $this->container['scab_id'];
    }

    /**
     * Sets scab_id
     *
     * @param string $scab_id The scab ID of the employee.
     *
     * @return $this
     */
    public function setScabId($scab_id)
    {
        $this->container['scab_id'] = $scab_id;

        return $this;
    }

    /**
     * Gets scab_employee_id
     *
     * @return int
     */
    public function getScabEmployeeId()
    {
        return $this->container['scab_employee_id'];
    }

    /**
     * Sets scab_employee_id
     *
     * @param int $scab_employee_id The internal scab employee ID associated with this employee.
     *
     * @return $this
     */
    public function setScabEmployeeId($scab_employee_id)
    {
        $this->container['scab_employee_id'] = $scab_employee_id;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Swagger\Client\Model\NestedUserLinkListItem
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Swagger\Client\Model\NestedUserLinkListItem $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets avatar_file_hash
     *
     * @return string
     */
    public function getAvatarFileHash()
    {
        return $this->container['avatar_file_hash'];
    }

    /**
     * Sets avatar_file_hash
     *
     * @param string $avatar_file_hash The hash of the avatar/profile picture of this employee.
     *
     * @return $this
     */
    public function setAvatarFileHash($avatar_file_hash)
    {
        $this->container['avatar_file_hash'] = $avatar_file_hash;

        return $this;
    }

    /**
     * Gets has_signature
     *
     * @return bool
     */
    public function getHasSignature()
    {
        return $this->container['has_signature'];
    }

    /**
     * Sets has_signature
     *
     * @param bool $has_signature Wether the employee has a signature file configured.
     *
     * @return $this
     */
    public function setHasSignature($has_signature)
    {
        $this->container['has_signature'] = $has_signature;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


