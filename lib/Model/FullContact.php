<?php
/**
 * FullContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FullContact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FullContact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullContact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'street_name' => 'string',
        'house_number' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'information' => 'string',
        'contact_person_name' => 'string',
        'planning' => 'string',
        'coc_number' => 'string',
        'vat_number' => 'string',
        'account_number' => 'string',
        'hourly_rate' => 'string',
        'selling_hourly_rate' => 'string',
        'agreed_hourly_rate' => 'string',
        'email' => 'string',
        'phone_number' => 'string',
        'mobile_number' => 'string',
        'gl_account_code_purchase' => 'string',
        'gl_account_code_invoice' => 'string',
        'debtor_number' => 'string',
        'gln_number' => 'string',
        'contact_type' => '\Swagger\Client\Model\ContactType',
        'is_vat_shifted' => 'bool',
        'n_account_text' => 'string',
        'wage_component_percentage' => 'string',
        'g_account_text' => 'string',
        'g_account_percentage' => 'string',
        'expiration_reminder' => 'int',
        'invoice_mail' => 'string',
        'invoice_subject' => 'string',
        'reminder_mail' => 'string',
        'social_security_number' => 'string',
        'first_reminder' => 'int',
        'second_reminder' => 'int',
        'surcharges' => '\Swagger\Client\Model\Surcharges',
        'hour_type_prices' => '\Swagger\Client\Model\HourTypePrice[]',
        'contact_divisions' => '\Swagger\Client\Model\FullContactDivision[]',
        'invoice_ubl_version' => 'string',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string',
        'custom_attribute_values' => '\Swagger\Client\Model\CondensedCustomAttributeValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'street_name' => null,
        'house_number' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'information' => null,
        'contact_person_name' => null,
        'planning' => null,
        'coc_number' => null,
        'vat_number' => null,
        'account_number' => null,
        'hourly_rate' => null,
        'selling_hourly_rate' => null,
        'agreed_hourly_rate' => null,
        'email' => null,
        'phone_number' => null,
        'mobile_number' => null,
        'gl_account_code_purchase' => null,
        'gl_account_code_invoice' => null,
        'debtor_number' => null,
        'gln_number' => null,
        'contact_type' => null,
        'is_vat_shifted' => null,
        'n_account_text' => null,
        'wage_component_percentage' => null,
        'g_account_text' => null,
        'g_account_percentage' => null,
        'expiration_reminder' => null,
        'invoice_mail' => null,
        'invoice_subject' => null,
        'reminder_mail' => null,
        'social_security_number' => null,
        'first_reminder' => null,
        'second_reminder' => null,
        'surcharges' => null,
        'hour_type_prices' => null,
        'contact_divisions' => null,
        'invoice_ubl_version' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null,
        'custom_attribute_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'information' => 'information',
        'contact_person_name' => 'contactPersonName',
        'planning' => 'planning',
        'coc_number' => 'cocNumber',
        'vat_number' => 'vatNumber',
        'account_number' => 'accountNumber',
        'hourly_rate' => 'hourlyRate',
        'selling_hourly_rate' => 'sellingHourlyRate',
        'agreed_hourly_rate' => 'agreedHourlyRate',
        'email' => 'email',
        'phone_number' => 'phoneNumber',
        'mobile_number' => 'mobileNumber',
        'gl_account_code_purchase' => 'glAccountCodePurchase',
        'gl_account_code_invoice' => 'glAccountCodeInvoice',
        'debtor_number' => 'debtorNumber',
        'gln_number' => 'glnNumber',
        'contact_type' => 'contactType',
        'is_vat_shifted' => 'isVatShifted',
        'n_account_text' => 'nAccountText',
        'wage_component_percentage' => 'wageComponentPercentage',
        'g_account_text' => 'gAccountText',
        'g_account_percentage' => 'gAccountPercentage',
        'expiration_reminder' => 'expirationReminder',
        'invoice_mail' => 'invoiceMail',
        'invoice_subject' => 'invoiceSubject',
        'reminder_mail' => 'reminderMail',
        'social_security_number' => 'socialSecurityNumber',
        'first_reminder' => 'firstReminder',
        'second_reminder' => 'secondReminder',
        'surcharges' => 'surcharges',
        'hour_type_prices' => 'hourTypePrices',
        'contact_divisions' => 'contactDivisions',
        'invoice_ubl_version' => 'invoiceUblVersion',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy',
        'custom_attribute_values' => 'customAttributeValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'information' => 'setInformation',
        'contact_person_name' => 'setContactPersonName',
        'planning' => 'setPlanning',
        'coc_number' => 'setCocNumber',
        'vat_number' => 'setVatNumber',
        'account_number' => 'setAccountNumber',
        'hourly_rate' => 'setHourlyRate',
        'selling_hourly_rate' => 'setSellingHourlyRate',
        'agreed_hourly_rate' => 'setAgreedHourlyRate',
        'email' => 'setEmail',
        'phone_number' => 'setPhoneNumber',
        'mobile_number' => 'setMobileNumber',
        'gl_account_code_purchase' => 'setGlAccountCodePurchase',
        'gl_account_code_invoice' => 'setGlAccountCodeInvoice',
        'debtor_number' => 'setDebtorNumber',
        'gln_number' => 'setGlnNumber',
        'contact_type' => 'setContactType',
        'is_vat_shifted' => 'setIsVatShifted',
        'n_account_text' => 'setNAccountText',
        'wage_component_percentage' => 'setWageComponentPercentage',
        'g_account_text' => 'setGAccountText',
        'g_account_percentage' => 'setGAccountPercentage',
        'expiration_reminder' => 'setExpirationReminder',
        'invoice_mail' => 'setInvoiceMail',
        'invoice_subject' => 'setInvoiceSubject',
        'reminder_mail' => 'setReminderMail',
        'social_security_number' => 'setSocialSecurityNumber',
        'first_reminder' => 'setFirstReminder',
        'second_reminder' => 'setSecondReminder',
        'surcharges' => 'setSurcharges',
        'hour_type_prices' => 'setHourTypePrices',
        'contact_divisions' => 'setContactDivisions',
        'invoice_ubl_version' => 'setInvoiceUblVersion',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy',
        'custom_attribute_values' => 'setCustomAttributeValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'information' => 'getInformation',
        'contact_person_name' => 'getContactPersonName',
        'planning' => 'getPlanning',
        'coc_number' => 'getCocNumber',
        'vat_number' => 'getVatNumber',
        'account_number' => 'getAccountNumber',
        'hourly_rate' => 'getHourlyRate',
        'selling_hourly_rate' => 'getSellingHourlyRate',
        'agreed_hourly_rate' => 'getAgreedHourlyRate',
        'email' => 'getEmail',
        'phone_number' => 'getPhoneNumber',
        'mobile_number' => 'getMobileNumber',
        'gl_account_code_purchase' => 'getGlAccountCodePurchase',
        'gl_account_code_invoice' => 'getGlAccountCodeInvoice',
        'debtor_number' => 'getDebtorNumber',
        'gln_number' => 'getGlnNumber',
        'contact_type' => 'getContactType',
        'is_vat_shifted' => 'getIsVatShifted',
        'n_account_text' => 'getNAccountText',
        'wage_component_percentage' => 'getWageComponentPercentage',
        'g_account_text' => 'getGAccountText',
        'g_account_percentage' => 'getGAccountPercentage',
        'expiration_reminder' => 'getExpirationReminder',
        'invoice_mail' => 'getInvoiceMail',
        'invoice_subject' => 'getInvoiceSubject',
        'reminder_mail' => 'getReminderMail',
        'social_security_number' => 'getSocialSecurityNumber',
        'first_reminder' => 'getFirstReminder',
        'second_reminder' => 'getSecondReminder',
        'surcharges' => 'getSurcharges',
        'hour_type_prices' => 'getHourTypePrices',
        'contact_divisions' => 'getContactDivisions',
        'invoice_ubl_version' => 'getInvoiceUblVersion',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy',
        'custom_attribute_values' => 'getCustomAttributeValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['information'] = isset($data['information']) ? $data['information'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['planning'] = isset($data['planning']) ? $data['planning'] : null;
        $this->container['coc_number'] = isset($data['coc_number']) ? $data['coc_number'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['hourly_rate'] = isset($data['hourly_rate']) ? $data['hourly_rate'] : null;
        $this->container['selling_hourly_rate'] = isset($data['selling_hourly_rate']) ? $data['selling_hourly_rate'] : null;
        $this->container['agreed_hourly_rate'] = isset($data['agreed_hourly_rate']) ? $data['agreed_hourly_rate'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['gl_account_code_purchase'] = isset($data['gl_account_code_purchase']) ? $data['gl_account_code_purchase'] : null;
        $this->container['gl_account_code_invoice'] = isset($data['gl_account_code_invoice']) ? $data['gl_account_code_invoice'] : null;
        $this->container['debtor_number'] = isset($data['debtor_number']) ? $data['debtor_number'] : null;
        $this->container['gln_number'] = isset($data['gln_number']) ? $data['gln_number'] : null;
        $this->container['contact_type'] = isset($data['contact_type']) ? $data['contact_type'] : null;
        $this->container['is_vat_shifted'] = isset($data['is_vat_shifted']) ? $data['is_vat_shifted'] : null;
        $this->container['n_account_text'] = isset($data['n_account_text']) ? $data['n_account_text'] : null;
        $this->container['wage_component_percentage'] = isset($data['wage_component_percentage']) ? $data['wage_component_percentage'] : null;
        $this->container['g_account_text'] = isset($data['g_account_text']) ? $data['g_account_text'] : null;
        $this->container['g_account_percentage'] = isset($data['g_account_percentage']) ? $data['g_account_percentage'] : null;
        $this->container['expiration_reminder'] = isset($data['expiration_reminder']) ? $data['expiration_reminder'] : null;
        $this->container['invoice_mail'] = isset($data['invoice_mail']) ? $data['invoice_mail'] : null;
        $this->container['invoice_subject'] = isset($data['invoice_subject']) ? $data['invoice_subject'] : null;
        $this->container['reminder_mail'] = isset($data['reminder_mail']) ? $data['reminder_mail'] : null;
        $this->container['social_security_number'] = isset($data['social_security_number']) ? $data['social_security_number'] : null;
        $this->container['first_reminder'] = isset($data['first_reminder']) ? $data['first_reminder'] : null;
        $this->container['second_reminder'] = isset($data['second_reminder']) ? $data['second_reminder'] : null;
        $this->container['surcharges'] = isset($data['surcharges']) ? $data['surcharges'] : null;
        $this->container['hour_type_prices'] = isset($data['hour_type_prices']) ? $data['hour_type_prices'] : null;
        $this->container['contact_divisions'] = isset($data['contact_divisions']) ? $data['contact_divisions'] : null;
        $this->container['invoice_ubl_version'] = isset($data['invoice_ubl_version']) ? $data['invoice_ubl_version'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['custom_attribute_values'] = isset($data['custom_attribute_values']) ? $data['custom_attribute_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 256)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['coc_number']) && (mb_strlen($this->container['coc_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'coc_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 256)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['mobile_number']) && (mb_strlen($this->container['mobile_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'mobile_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['debtor_number']) && (mb_strlen($this->container['debtor_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'debtor_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['gln_number']) && (mb_strlen($this->container['gln_number']) > 13)) {
            $invalidProperties[] = "invalid value for 'gln_number', the character length must be smaller than or equal to 13.";
        }

        if ($this->container['contact_type'] === null) {
            $invalidProperties[] = "'contact_type' can't be null";
        }
        if (!is_null($this->container['n_account_text']) && (mb_strlen($this->container['n_account_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'n_account_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['g_account_text']) && (mb_strlen($this->container['g_account_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'g_account_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['expiration_reminder']) && ($this->container['expiration_reminder'] < 0)) {
            $invalidProperties[] = "invalid value for 'expiration_reminder', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_mail']) && (mb_strlen($this->container['invoice_mail']) > 255)) {
            $invalidProperties[] = "invalid value for 'invoice_mail', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['invoice_subject']) && (mb_strlen($this->container['invoice_subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'invoice_subject', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reminder_mail']) && (mb_strlen($this->container['reminder_mail']) > 255)) {
            $invalidProperties[] = "invalid value for 'reminder_mail', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['social_security_number']) && (mb_strlen($this->container['social_security_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_security_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['first_reminder']) && ($this->container['first_reminder'] < 0)) {
            $invalidProperties[] = "invalid value for 'first_reminder', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['second_reminder']) && ($this->container['second_reminder'] < 0)) {
            $invalidProperties[] = "invalid value for 'second_reminder', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of contact.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The contact name.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The street name of contact.
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number The house number (incl. additions).
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip-code.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling FullContact., must be smaller than or equal to 20.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city name.
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 256)) {
            throw new \InvalidArgumentException('invalid length for $city when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code An ISO 3166-2 representation of the country.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling FullContact., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets information
     *
     * @return string
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param string $information Additional information about the contact.
     *
     * @return $this
     */
    public function setInformation($information)
    {
        $this->container['information'] = $information;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name The name of person to contact.
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets planning
     *
     * @return string
     */
    public function getPlanning()
    {
        return $this->container['planning'];
    }

    /**
     * Sets planning
     *
     * @param string $planning The planning text.
     *
     * @return $this
     */
    public function setPlanning($planning)
    {
        $this->container['planning'] = $planning;

        return $this;
    }

    /**
     * Gets coc_number
     *
     * @return string
     */
    public function getCocNumber()
    {
        return $this->container['coc_number'];
    }

    /**
     * Sets coc_number
     *
     * @param string $coc_number The chamber of commerce number.
     *
     * @return $this
     */
    public function setCocNumber($coc_number)
    {
        if (!is_null($coc_number) && (mb_strlen($coc_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $coc_number when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['coc_number'] = $coc_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number The value added tax number.
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if (!is_null($vat_number) && (mb_strlen($vat_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The account number.
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        if (!is_null($account_number) && (mb_strlen($account_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets hourly_rate
     *
     * @return string
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     *
     * @param string $hourly_rate The hourly rate.
     *
     * @return $this
     */
    public function setHourlyRate($hourly_rate)
    {
        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets selling_hourly_rate
     *
     * @return string
     */
    public function getSellingHourlyRate()
    {
        return $this->container['selling_hourly_rate'];
    }

    /**
     * Sets selling_hourly_rate
     *
     * @param string $selling_hourly_rate The selling hourly rate.
     *
     * @return $this
     */
    public function setSellingHourlyRate($selling_hourly_rate)
    {
        $this->container['selling_hourly_rate'] = $selling_hourly_rate;

        return $this;
    }

    /**
     * Gets agreed_hourly_rate
     *
     * @return string
     */
    public function getAgreedHourlyRate()
    {
        return $this->container['agreed_hourly_rate'];
    }

    /**
     * Sets agreed_hourly_rate
     *
     * @param string $agreed_hourly_rate The agreed hourly rate.
     *
     * @return $this
     */
    public function setAgreedHourlyRate($agreed_hourly_rate)
    {
        $this->container['agreed_hourly_rate'] = $agreed_hourly_rate;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 256)) {
            throw new \InvalidArgumentException('invalid length for $email when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The phone number.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number The mobile phone number.
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        if (!is_null($mobile_number) && (mb_strlen($mobile_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $mobile_number when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets gl_account_code_purchase
     *
     * @return string
     */
    public function getGlAccountCodePurchase()
    {
        return $this->container['gl_account_code_purchase'];
    }

    /**
     * Sets gl_account_code_purchase
     *
     * @param string $gl_account_code_purchase A default general ledger account code to use for purchase related items.
     *
     * @return $this
     */
    public function setGlAccountCodePurchase($gl_account_code_purchase)
    {
        $this->container['gl_account_code_purchase'] = $gl_account_code_purchase;

        return $this;
    }

    /**
     * Gets gl_account_code_invoice
     *
     * @return string
     */
    public function getGlAccountCodeInvoice()
    {
        return $this->container['gl_account_code_invoice'];
    }

    /**
     * Sets gl_account_code_invoice
     *
     * @param string $gl_account_code_invoice A default general ledger account code to use for invoice related items.
     *
     * @return $this
     */
    public function setGlAccountCodeInvoice($gl_account_code_invoice)
    {
        $this->container['gl_account_code_invoice'] = $gl_account_code_invoice;

        return $this;
    }

    /**
     * Gets debtor_number
     *
     * @return string
     */
    public function getDebtorNumber()
    {
        return $this->container['debtor_number'];
    }

    /**
     * Sets debtor_number
     *
     * @param string $debtor_number The debtor number.
     *
     * @return $this
     */
    public function setDebtorNumber($debtor_number)
    {
        if (!is_null($debtor_number) && (mb_strlen($debtor_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $debtor_number when calling FullContact., must be smaller than or equal to 256.');
        }

        $this->container['debtor_number'] = $debtor_number;

        return $this;
    }

    /**
     * Gets gln_number
     *
     * @return string
     */
    public function getGlnNumber()
    {
        return $this->container['gln_number'];
    }

    /**
     * Sets gln_number
     *
     * @param string $gln_number The Global Location Number.
     *
     * @return $this
     */
    public function setGlnNumber($gln_number)
    {
        if (!is_null($gln_number) && (mb_strlen($gln_number) > 13)) {
            throw new \InvalidArgumentException('invalid length for $gln_number when calling FullContact., must be smaller than or equal to 13.');
        }

        $this->container['gln_number'] = $gln_number;

        return $this;
    }

    /**
     * Gets contact_type
     *
     * @return \Swagger\Client\Model\ContactType
     */
    public function getContactType()
    {
        return $this->container['contact_type'];
    }

    /**
     * Sets contact_type
     *
     * @param \Swagger\Client\Model\ContactType $contact_type contact_type
     *
     * @return $this
     */
    public function setContactType($contact_type)
    {
        $this->container['contact_type'] = $contact_type;

        return $this;
    }

    /**
     * Gets is_vat_shifted
     *
     * @return bool
     */
    public function getIsVatShifted()
    {
        return $this->container['is_vat_shifted'];
    }

    /**
     * Sets is_vat_shifted
     *
     * @param bool $is_vat_shifted Whether VAT is shifted for the contact.
     *
     * @return $this
     */
    public function setIsVatShifted($is_vat_shifted)
    {
        $this->container['is_vat_shifted'] = $is_vat_shifted;

        return $this;
    }

    /**
     * Gets n_account_text
     *
     * @return string
     */
    public function getNAccountText()
    {
        return $this->container['n_account_text'];
    }

    /**
     * Sets n_account_text
     *
     * @param string $n_account_text N-account text.
     *
     * @return $this
     */
    public function setNAccountText($n_account_text)
    {
        if (!is_null($n_account_text) && (mb_strlen($n_account_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $n_account_text when calling FullContact., must be smaller than or equal to 255.');
        }

        $this->container['n_account_text'] = $n_account_text;

        return $this;
    }

    /**
     * Gets wage_component_percentage
     *
     * @return string
     */
    public function getWageComponentPercentage()
    {
        return $this->container['wage_component_percentage'];
    }

    /**
     * Sets wage_component_percentage
     *
     * @param string $wage_component_percentage Wage component percentage.
     *
     * @return $this
     */
    public function setWageComponentPercentage($wage_component_percentage)
    {
        $this->container['wage_component_percentage'] = $wage_component_percentage;

        return $this;
    }

    /**
     * Gets g_account_text
     *
     * @return string
     */
    public function getGAccountText()
    {
        return $this->container['g_account_text'];
    }

    /**
     * Sets g_account_text
     *
     * @param string $g_account_text G-account text.
     *
     * @return $this
     */
    public function setGAccountText($g_account_text)
    {
        if (!is_null($g_account_text) && (mb_strlen($g_account_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $g_account_text when calling FullContact., must be smaller than or equal to 255.');
        }

        $this->container['g_account_text'] = $g_account_text;

        return $this;
    }

    /**
     * Gets g_account_percentage
     *
     * @return string
     */
    public function getGAccountPercentage()
    {
        return $this->container['g_account_percentage'];
    }

    /**
     * Sets g_account_percentage
     *
     * @param string $g_account_percentage G-account percentage.
     *
     * @return $this
     */
    public function setGAccountPercentage($g_account_percentage)
    {
        $this->container['g_account_percentage'] = $g_account_percentage;

        return $this;
    }

    /**
     * Gets expiration_reminder
     *
     * @return int
     */
    public function getExpirationReminder()
    {
        return $this->container['expiration_reminder'];
    }

    /**
     * Sets expiration_reminder
     *
     * @param int $expiration_reminder Expiration reminder days.
     *
     * @return $this
     */
    public function setExpirationReminder($expiration_reminder)
    {

        if (!is_null($expiration_reminder) && ($expiration_reminder < 0)) {
            throw new \InvalidArgumentException('invalid value for $expiration_reminder when calling FullContact., must be bigger than or equal to 0.');
        }

        $this->container['expiration_reminder'] = $expiration_reminder;

        return $this;
    }

    /**
     * Gets invoice_mail
     *
     * @return string
     */
    public function getInvoiceMail()
    {
        return $this->container['invoice_mail'];
    }

    /**
     * Sets invoice_mail
     *
     * @param string $invoice_mail The invoice mail.
     *
     * @return $this
     */
    public function setInvoiceMail($invoice_mail)
    {
        if (!is_null($invoice_mail) && (mb_strlen($invoice_mail) > 255)) {
            throw new \InvalidArgumentException('invalid length for $invoice_mail when calling FullContact., must be smaller than or equal to 255.');
        }

        $this->container['invoice_mail'] = $invoice_mail;

        return $this;
    }

    /**
     * Gets invoice_subject
     *
     * @return string
     */
    public function getInvoiceSubject()
    {
        return $this->container['invoice_subject'];
    }

    /**
     * Sets invoice_subject
     *
     * @param string $invoice_subject The invoice subject.
     *
     * @return $this
     */
    public function setInvoiceSubject($invoice_subject)
    {
        if (!is_null($invoice_subject) && (mb_strlen($invoice_subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $invoice_subject when calling FullContact., must be smaller than or equal to 255.');
        }

        $this->container['invoice_subject'] = $invoice_subject;

        return $this;
    }

    /**
     * Gets reminder_mail
     *
     * @return string
     */
    public function getReminderMail()
    {
        return $this->container['reminder_mail'];
    }

    /**
     * Sets reminder_mail
     *
     * @param string $reminder_mail The reminder mail.
     *
     * @return $this
     */
    public function setReminderMail($reminder_mail)
    {
        if (!is_null($reminder_mail) && (mb_strlen($reminder_mail) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reminder_mail when calling FullContact., must be smaller than or equal to 255.');
        }

        $this->container['reminder_mail'] = $reminder_mail;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string $social_security_number The Social Security Number.
     *
     * @return $this
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        if (!is_null($social_security_number) && (mb_strlen($social_security_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_security_number when calling FullContact., must be smaller than or equal to 255.');
        }

        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets first_reminder
     *
     * @return int
     */
    public function getFirstReminder()
    {
        return $this->container['first_reminder'];
    }

    /**
     * Sets first_reminder
     *
     * @param int $first_reminder The first reminder.
     *
     * @return $this
     */
    public function setFirstReminder($first_reminder)
    {

        if (!is_null($first_reminder) && ($first_reminder < 0)) {
            throw new \InvalidArgumentException('invalid value for $first_reminder when calling FullContact., must be bigger than or equal to 0.');
        }

        $this->container['first_reminder'] = $first_reminder;

        return $this;
    }

    /**
     * Gets second_reminder
     *
     * @return int
     */
    public function getSecondReminder()
    {
        return $this->container['second_reminder'];
    }

    /**
     * Sets second_reminder
     *
     * @param int $second_reminder The second reminder.
     *
     * @return $this
     */
    public function setSecondReminder($second_reminder)
    {

        if (!is_null($second_reminder) && ($second_reminder < 0)) {
            throw new \InvalidArgumentException('invalid value for $second_reminder when calling FullContact., must be bigger than or equal to 0.');
        }

        $this->container['second_reminder'] = $second_reminder;

        return $this;
    }

    /**
     * Gets surcharges
     *
     * @return \Swagger\Client\Model\Surcharges
     */
    public function getSurcharges()
    {
        return $this->container['surcharges'];
    }

    /**
     * Sets surcharges
     *
     * @param \Swagger\Client\Model\Surcharges $surcharges surcharges
     *
     * @return $this
     */
    public function setSurcharges($surcharges)
    {
        $this->container['surcharges'] = $surcharges;

        return $this;
    }

    /**
     * Gets hour_type_prices
     *
     * @return \Swagger\Client\Model\HourTypePrice[]
     */
    public function getHourTypePrices()
    {
        return $this->container['hour_type_prices'];
    }

    /**
     * Sets hour_type_prices
     *
     * @param \Swagger\Client\Model\HourTypePrice[] $hour_type_prices A list of prices per hour types
     *
     * @return $this
     */
    public function setHourTypePrices($hour_type_prices)
    {
        $this->container['hour_type_prices'] = $hour_type_prices;

        return $this;
    }

    /**
     * Gets contact_divisions
     *
     * @return \Swagger\Client\Model\FullContactDivision[]
     */
    public function getContactDivisions()
    {
        return $this->container['contact_divisions'];
    }

    /**
     * Sets contact_divisions
     *
     * @param \Swagger\Client\Model\FullContactDivision[] $contact_divisions The linked divisions this contact is associated with.
     *
     * @return $this
     */
    public function setContactDivisions($contact_divisions)
    {
        $this->container['contact_divisions'] = $contact_divisions;

        return $this;
    }

    /**
     * Gets invoice_ubl_version
     *
     * @return string
     */
    public function getInvoiceUblVersion()
    {
        return $this->container['invoice_ubl_version'];
    }

    /**
     * Sets invoice_ubl_version
     *
     * @param string $invoice_ubl_version The preferred UBL invoice version for this contact.
     *
     * @return $this
     */
    public function setInvoiceUblVersion($invoice_ubl_version)
    {
        $this->container['invoice_ubl_version'] = $invoice_ubl_version;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets custom_attribute_values
     *
     * @return \Swagger\Client\Model\CondensedCustomAttributeValue[]
     */
    public function getCustomAttributeValues()
    {
        return $this->container['custom_attribute_values'];
    }

    /**
     * Sets custom_attribute_values
     *
     * @param \Swagger\Client\Model\CondensedCustomAttributeValue[] $custom_attribute_values A list of CustomAttributeValues belonging to the instance.
     *
     * @return $this
     */
    public function setCustomAttributeValues($custom_attribute_values)
    {
        $this->container['custom_attribute_values'] = $custom_attribute_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


