<?php
/**
 * SubcontractorContractListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubcontractorContractListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubcontractorContractListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubcontractorContractListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'project' => '\Swagger\Client\Model\NestedProjectListItem',
        'subcontractor' => '\Swagger\Client\Model\NestedContactListItem',
        'status' => 'int',
        'status_name' => 'string',
        'type' => 'int',
        'start_date' => 'string',
        'start_date_text' => 'string',
        'expected_completion_date' => 'string',
        'expected_completion_date_text' => 'string',
        'outstanding_costs' => 'string',
        'current_approver' => 'string',
        'id' => 'int',
        'number' => 'string',
        'name' => 'string',
        'description' => 'string',
        'payment_agreement' => 'string',
        'linked_delivery_ticket' => '\Swagger\Client\Model\NestedDeliveryTicketListItem',
        'project_security_link' => '\Swagger\Client\Model\NestedProjectSecurityCodeLinkListItem',
        'price' => 'string',
        'is_email_sent' => 'bool',
        'email_sent_at' => 'string',
        'email_sent_by' => 'string',
        'accepted_at' => 'string',
        'denied_at' => 'string',
        'language' => 'string',
        'attachment_count' => 'int',
        'called_receipt_count' => 'int',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'project' => null,
        'subcontractor' => null,
        'status' => null,
        'status_name' => null,
        'type' => null,
        'start_date' => null,
        'start_date_text' => null,
        'expected_completion_date' => null,
        'expected_completion_date_text' => null,
        'outstanding_costs' => null,
        'current_approver' => null,
        'id' => null,
        'number' => null,
        'name' => null,
        'description' => null,
        'payment_agreement' => null,
        'linked_delivery_ticket' => null,
        'project_security_link' => null,
        'price' => null,
        'is_email_sent' => null,
        'email_sent_at' => null,
        'email_sent_by' => null,
        'accepted_at' => null,
        'denied_at' => null,
        'language' => null,
        'attachment_count' => null,
        'called_receipt_count' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'project' => 'project',
        'subcontractor' => 'subcontractor',
        'status' => 'status',
        'status_name' => 'statusName',
        'type' => 'type',
        'start_date' => 'startDate',
        'start_date_text' => 'startDateText',
        'expected_completion_date' => 'expectedCompletionDate',
        'expected_completion_date_text' => 'expectedCompletionDateText',
        'outstanding_costs' => 'outstandingCosts',
        'current_approver' => 'currentApprover',
        'id' => 'id',
        'number' => 'number',
        'name' => 'name',
        'description' => 'description',
        'payment_agreement' => 'paymentAgreement',
        'linked_delivery_ticket' => 'linkedDeliveryTicket',
        'project_security_link' => 'projectSecurityLink',
        'price' => 'price',
        'is_email_sent' => 'isEmailSent',
        'email_sent_at' => 'emailSentAt',
        'email_sent_by' => 'emailSentBy',
        'accepted_at' => 'acceptedAt',
        'denied_at' => 'deniedAt',
        'language' => 'language',
        'attachment_count' => 'attachmentCount',
        'called_receipt_count' => 'calledReceiptCount',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'project' => 'setProject',
        'subcontractor' => 'setSubcontractor',
        'status' => 'setStatus',
        'status_name' => 'setStatusName',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'start_date_text' => 'setStartDateText',
        'expected_completion_date' => 'setExpectedCompletionDate',
        'expected_completion_date_text' => 'setExpectedCompletionDateText',
        'outstanding_costs' => 'setOutstandingCosts',
        'current_approver' => 'setCurrentApprover',
        'id' => 'setId',
        'number' => 'setNumber',
        'name' => 'setName',
        'description' => 'setDescription',
        'payment_agreement' => 'setPaymentAgreement',
        'linked_delivery_ticket' => 'setLinkedDeliveryTicket',
        'project_security_link' => 'setProjectSecurityLink',
        'price' => 'setPrice',
        'is_email_sent' => 'setIsEmailSent',
        'email_sent_at' => 'setEmailSentAt',
        'email_sent_by' => 'setEmailSentBy',
        'accepted_at' => 'setAcceptedAt',
        'denied_at' => 'setDeniedAt',
        'language' => 'setLanguage',
        'attachment_count' => 'setAttachmentCount',
        'called_receipt_count' => 'setCalledReceiptCount',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'project' => 'getProject',
        'subcontractor' => 'getSubcontractor',
        'status' => 'getStatus',
        'status_name' => 'getStatusName',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'start_date_text' => 'getStartDateText',
        'expected_completion_date' => 'getExpectedCompletionDate',
        'expected_completion_date_text' => 'getExpectedCompletionDateText',
        'outstanding_costs' => 'getOutstandingCosts',
        'current_approver' => 'getCurrentApprover',
        'id' => 'getId',
        'number' => 'getNumber',
        'name' => 'getName',
        'description' => 'getDescription',
        'payment_agreement' => 'getPaymentAgreement',
        'linked_delivery_ticket' => 'getLinkedDeliveryTicket',
        'project_security_link' => 'getProjectSecurityLink',
        'price' => 'getPrice',
        'is_email_sent' => 'getIsEmailSent',
        'email_sent_at' => 'getEmailSentAt',
        'email_sent_by' => 'getEmailSentBy',
        'accepted_at' => 'getAcceptedAt',
        'denied_at' => 'getDeniedAt',
        'language' => 'getLanguage',
        'attachment_count' => 'getAttachmentCount',
        'called_receipt_count' => 'getCalledReceiptCount',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['subcontractor'] = isset($data['subcontractor']) ? $data['subcontractor'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_name'] = isset($data['status_name']) ? $data['status_name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_date_text'] = isset($data['start_date_text']) ? $data['start_date_text'] : null;
        $this->container['expected_completion_date'] = isset($data['expected_completion_date']) ? $data['expected_completion_date'] : null;
        $this->container['expected_completion_date_text'] = isset($data['expected_completion_date_text']) ? $data['expected_completion_date_text'] : null;
        $this->container['outstanding_costs'] = isset($data['outstanding_costs']) ? $data['outstanding_costs'] : null;
        $this->container['current_approver'] = isset($data['current_approver']) ? $data['current_approver'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['payment_agreement'] = isset($data['payment_agreement']) ? $data['payment_agreement'] : null;
        $this->container['linked_delivery_ticket'] = isset($data['linked_delivery_ticket']) ? $data['linked_delivery_ticket'] : null;
        $this->container['project_security_link'] = isset($data['project_security_link']) ? $data['project_security_link'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['is_email_sent'] = isset($data['is_email_sent']) ? $data['is_email_sent'] : null;
        $this->container['email_sent_at'] = isset($data['email_sent_at']) ? $data['email_sent_at'] : null;
        $this->container['email_sent_by'] = isset($data['email_sent_by']) ? $data['email_sent_by'] : null;
        $this->container['accepted_at'] = isset($data['accepted_at']) ? $data['accepted_at'] : null;
        $this->container['denied_at'] = isset($data['denied_at']) ? $data['denied_at'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['attachment_count'] = isset($data['attachment_count']) ? $data['attachment_count'] : null;
        $this->container['called_receipt_count'] = isset($data['called_receipt_count']) ? $data['called_receipt_count'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\NestedProjectListItem
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\NestedProjectListItem $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets subcontractor
     *
     * @return \Swagger\Client\Model\NestedContactListItem
     */
    public function getSubcontractor()
    {
        return $this->container['subcontractor'];
    }

    /**
     * Sets subcontractor
     *
     * @param \Swagger\Client\Model\NestedContactListItem $subcontractor subcontractor
     *
     * @return $this
     */
    public function setSubcontractor($subcontractor)
    {
        $this->container['subcontractor'] = $subcontractor;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Status of the contract.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_name
     *
     * @return string
     */
    public function getStatusName()
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     *
     * @param string $status_name The name of the current status.
     *
     * @return $this
     */
    public function setStatusName($status_name)
    {
        $this->container['status_name'] = $status_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Type of the contract. (0 = Permanent, 1 = Directing, 2 = Outsourced)
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date The starting date of the subcontractor contract.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_date_text
     *
     * @return string
     */
    public function getStartDateText()
    {
        return $this->container['start_date_text'];
    }

    /**
     * Sets start_date_text
     *
     * @param string $start_date_text The starting date text of the subcontractor contract.
     *
     * @return $this
     */
    public function setStartDateText($start_date_text)
    {
        $this->container['start_date_text'] = $start_date_text;

        return $this;
    }

    /**
     * Gets expected_completion_date
     *
     * @return string
     */
    public function getExpectedCompletionDate()
    {
        return $this->container['expected_completion_date'];
    }

    /**
     * Sets expected_completion_date
     *
     * @param string $expected_completion_date The expected completion date of the subcontractor contract.
     *
     * @return $this
     */
    public function setExpectedCompletionDate($expected_completion_date)
    {
        $this->container['expected_completion_date'] = $expected_completion_date;

        return $this;
    }

    /**
     * Gets expected_completion_date_text
     *
     * @return string
     */
    public function getExpectedCompletionDateText()
    {
        return $this->container['expected_completion_date_text'];
    }

    /**
     * Sets expected_completion_date_text
     *
     * @param string $expected_completion_date_text The expected completion date text of the subcontractor contract.
     *
     * @return $this
     */
    public function setExpectedCompletionDateText($expected_completion_date_text)
    {
        $this->container['expected_completion_date_text'] = $expected_completion_date_text;

        return $this;
    }

    /**
     * Gets outstanding_costs
     *
     * @return string
     */
    public function getOutstandingCosts()
    {
        return $this->container['outstanding_costs'];
    }

    /**
     * Sets outstanding_costs
     *
     * @param string $outstanding_costs The outstanding costs for this subcontractor contract.
     *
     * @return $this
     */
    public function setOutstandingCosts($outstanding_costs)
    {
        $this->container['outstanding_costs'] = $outstanding_costs;

        return $this;
    }

    /**
     * Gets current_approver
     *
     * @return string
     */
    public function getCurrentApprover()
    {
        return $this->container['current_approver'];
    }

    /**
     * Sets current_approver
     *
     * @param string $current_approver The full name of the current approver.
     *
     * @return $this
     */
    public function setCurrentApprover($current_approver)
    {
        $this->container['current_approver'] = $current_approver;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the Contract.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The identification number of the contract.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The display name of the contract. Can be NULL.
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SubcontractorContractListItem., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the contract. May contain HTML content.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payment_agreement
     *
     * @return string
     */
    public function getPaymentAgreement()
    {
        return $this->container['payment_agreement'];
    }

    /**
     * Sets payment_agreement
     *
     * @param string $payment_agreement The payment agreement of the contract. May contain HTML content.
     *
     * @return $this
     */
    public function setPaymentAgreement($payment_agreement)
    {
        $this->container['payment_agreement'] = $payment_agreement;

        return $this;
    }

    /**
     * Gets linked_delivery_ticket
     *
     * @return \Swagger\Client\Model\NestedDeliveryTicketListItem
     */
    public function getLinkedDeliveryTicket()
    {
        return $this->container['linked_delivery_ticket'];
    }

    /**
     * Sets linked_delivery_ticket
     *
     * @param \Swagger\Client\Model\NestedDeliveryTicketListItem $linked_delivery_ticket linked_delivery_ticket
     *
     * @return $this
     */
    public function setLinkedDeliveryTicket($linked_delivery_ticket)
    {
        $this->container['linked_delivery_ticket'] = $linked_delivery_ticket;

        return $this;
    }

    /**
     * Gets project_security_link
     *
     * @return \Swagger\Client\Model\NestedProjectSecurityCodeLinkListItem
     */
    public function getProjectSecurityLink()
    {
        return $this->container['project_security_link'];
    }

    /**
     * Sets project_security_link
     *
     * @param \Swagger\Client\Model\NestedProjectSecurityCodeLinkListItem $project_security_link project_security_link
     *
     * @return $this
     */
    public function setProjectSecurityLink($project_security_link)
    {
        $this->container['project_security_link'] = $project_security_link;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price The price of the contract.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets is_email_sent
     *
     * @return bool
     */
    public function getIsEmailSent()
    {
        return $this->container['is_email_sent'];
    }

    /**
     * Sets is_email_sent
     *
     * @param bool $is_email_sent True if an email was already sent.
     *
     * @return $this
     */
    public function setIsEmailSent($is_email_sent)
    {
        $this->container['is_email_sent'] = $is_email_sent;

        return $this;
    }

    /**
     * Gets email_sent_at
     *
     * @return string
     */
    public function getEmailSentAt()
    {
        return $this->container['email_sent_at'];
    }

    /**
     * Sets email_sent_at
     *
     * @param string $email_sent_at The date the email was sent in ATOM-format.
     *
     * @return $this
     */
    public function setEmailSentAt($email_sent_at)
    {
        $this->container['email_sent_at'] = $email_sent_at;

        return $this;
    }

    /**
     * Gets email_sent_by
     *
     * @return string
     */
    public function getEmailSentBy()
    {
        return $this->container['email_sent_by'];
    }

    /**
     * Sets email_sent_by
     *
     * @param string $email_sent_by The username of the user that sent the email.
     *
     * @return $this
     */
    public function setEmailSentBy($email_sent_by)
    {
        $this->container['email_sent_by'] = $email_sent_by;

        return $this;
    }

    /**
     * Gets accepted_at
     *
     * @return string
     */
    public function getAcceptedAt()
    {
        return $this->container['accepted_at'];
    }

    /**
     * Sets accepted_at
     *
     * @param string $accepted_at The date when contract was accepted in ATOM-format.
     *
     * @return $this
     */
    public function setAcceptedAt($accepted_at)
    {
        $this->container['accepted_at'] = $accepted_at;

        return $this;
    }

    /**
     * Gets denied_at
     *
     * @return string
     */
    public function getDeniedAt()
    {
        return $this->container['denied_at'];
    }

    /**
     * Sets denied_at
     *
     * @param string $denied_at The date the contract was denied in ATOM-format.
     *
     * @return $this
     */
    public function setDeniedAt($denied_at)
    {
        $this->container['denied_at'] = $denied_at;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The locale used by this contract, e.g.: nl-NL.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets attachment_count
     *
     * @return int
     */
    public function getAttachmentCount()
    {
        return $this->container['attachment_count'];
    }

    /**
     * Sets attachment_count
     *
     * @param int $attachment_count The attachment count for this contract.
     *
     * @return $this
     */
    public function setAttachmentCount($attachment_count)
    {
        $this->container['attachment_count'] = $attachment_count;

        return $this;
    }

    /**
     * Gets called_receipt_count
     *
     * @return int
     */
    public function getCalledReceiptCount()
    {
        return $this->container['called_receipt_count'];
    }

    /**
     * Sets called_receipt_count
     *
     * @param int $called_receipt_count The called receipt count for this contract.
     *
     * @return $this
     */
    public function setCalledReceiptCount($called_receipt_count)
    {
        $this->container['called_receipt_count'] = $called_receipt_count;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


