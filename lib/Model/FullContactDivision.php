<?php
/**
 * FullContactDivision
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FullContactDivision Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FullContactDivision implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullContactDivision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'division_id' => 'int',
        'gl_account_code' => 'string',
        'gl_account_code_purchase' => 'string',
        'payment_condition_sales' => 'string',
        'payment_condition_purchase' => 'string',
        'code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'division_id' => null,
        'gl_account_code' => null,
        'gl_account_code_purchase' => null,
        'payment_condition_sales' => null,
        'payment_condition_purchase' => null,
        'code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'division_id' => 'divisionId',
        'gl_account_code' => 'glAccountCode',
        'gl_account_code_purchase' => 'glAccountCodePurchase',
        'payment_condition_sales' => 'paymentConditionSales',
        'payment_condition_purchase' => 'paymentConditionPurchase',
        'code' => 'code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'division_id' => 'setDivisionId',
        'gl_account_code' => 'setGlAccountCode',
        'gl_account_code_purchase' => 'setGlAccountCodePurchase',
        'payment_condition_sales' => 'setPaymentConditionSales',
        'payment_condition_purchase' => 'setPaymentConditionPurchase',
        'code' => 'setCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'division_id' => 'getDivisionId',
        'gl_account_code' => 'getGlAccountCode',
        'gl_account_code_purchase' => 'getGlAccountCodePurchase',
        'payment_condition_sales' => 'getPaymentConditionSales',
        'payment_condition_purchase' => 'getPaymentConditionPurchase',
        'code' => 'getCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['division_id'] = isset($data['division_id']) ? $data['division_id'] : null;
        $this->container['gl_account_code'] = isset($data['gl_account_code']) ? $data['gl_account_code'] : null;
        $this->container['gl_account_code_purchase'] = isset($data['gl_account_code_purchase']) ? $data['gl_account_code_purchase'] : null;
        $this->container['payment_condition_sales'] = isset($data['payment_condition_sales']) ? $data['payment_condition_sales'] : null;
        $this->container['payment_condition_purchase'] = isset($data['payment_condition_purchase']) ? $data['payment_condition_purchase'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['division_id'] === null) {
            $invalidProperties[] = "'division_id' can't be null";
        }
        if (!is_null($this->container['payment_condition_sales']) && (mb_strlen($this->container['payment_condition_sales']) > 255)) {
            $invalidProperties[] = "invalid value for 'payment_condition_sales', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['payment_condition_purchase']) && (mb_strlen($this->container['payment_condition_purchase']) > 255)) {
            $invalidProperties[] = "invalid value for 'payment_condition_purchase', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the contact division link.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return int
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param int $division_id The division ID of an Exact Online environment.
     *
     * @return $this
     */
    public function setDivisionId($division_id)
    {
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets gl_account_code
     *
     * @return string
     */
    public function getGlAccountCode()
    {
        return $this->container['gl_account_code'];
    }

    /**
     * Sets gl_account_code
     *
     * @param string $gl_account_code A default general ledger account code to use for sales related items.
     *
     * @return $this
     */
    public function setGlAccountCode($gl_account_code)
    {
        $this->container['gl_account_code'] = $gl_account_code;

        return $this;
    }

    /**
     * Gets gl_account_code_purchase
     *
     * @return string
     */
    public function getGlAccountCodePurchase()
    {
        return $this->container['gl_account_code_purchase'];
    }

    /**
     * Sets gl_account_code_purchase
     *
     * @param string $gl_account_code_purchase A default general ledger account code to use for purchase related items.
     *
     * @return $this
     */
    public function setGlAccountCodePurchase($gl_account_code_purchase)
    {
        $this->container['gl_account_code_purchase'] = $gl_account_code_purchase;

        return $this;
    }

    /**
     * Gets payment_condition_sales
     *
     * @return string
     */
    public function getPaymentConditionSales()
    {
        return $this->container['payment_condition_sales'];
    }

    /**
     * Sets payment_condition_sales
     *
     * @param string $payment_condition_sales A default payment condition to use for sales related items.
     *
     * @return $this
     */
    public function setPaymentConditionSales($payment_condition_sales)
    {
        if (!is_null($payment_condition_sales) && (mb_strlen($payment_condition_sales) > 255)) {
            throw new \InvalidArgumentException('invalid length for $payment_condition_sales when calling FullContactDivision., must be smaller than or equal to 255.');
        }

        $this->container['payment_condition_sales'] = $payment_condition_sales;

        return $this;
    }

    /**
     * Gets payment_condition_purchase
     *
     * @return string
     */
    public function getPaymentConditionPurchase()
    {
        return $this->container['payment_condition_purchase'];
    }

    /**
     * Sets payment_condition_purchase
     *
     * @param string $payment_condition_purchase A default payment condition to use for purchase related items.
     *
     * @return $this
     */
    public function setPaymentConditionPurchase($payment_condition_purchase)
    {
        if (!is_null($payment_condition_purchase) && (mb_strlen($payment_condition_purchase) > 255)) {
            throw new \InvalidArgumentException('invalid length for $payment_condition_purchase when calling FullContactDivision., must be smaller than or equal to 255.');
        }

        $this->container['payment_condition_purchase'] = $payment_condition_purchase;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The debtor/creditor number (code) of the contact in the associated division
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


