<?php
/**
 * ContactListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'street_name' => 'string',
        'house_number' => 'string',
        'address' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'information' => 'string',
        'contact_person_name' => 'string',
        'planning_text' => 'string',
        'coc_number' => 'string',
        'vat_number' => 'string',
        'iban' => 'string',
        'hourly_rate' => 'string',
        'selling_hourly_rate' => 'string',
        'agreed_hourly_rate' => 'string',
        'email_address' => 'string',
        'invoice_mail' => 'string',
        'reminder_mail' => 'string',
        'invoice_subject' => 'string',
        'invoice_ubl_version' => 'string',
        'phone_number' => 'string',
        'mobile_phone_number' => 'string',
        'debtor_number' => 'string',
        'gln_number' => 'string',
        'expiration_reminder' => 'int',
        'type' => '\Swagger\Client\Model\NestedContactTypeListItem',
        'is_vat_shifted' => 'bool',
        'n_account_text' => 'string',
        'wage_component_percentage' => 'string',
        'g_account_text' => 'string',
        'g_account_percentage' => 'string',
        'associated_property_asset_names' => 'string',
        'has_accounting_software' => 'bool',
        'debtor_numbers' => 'string',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'street_name' => null,
        'house_number' => null,
        'address' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'information' => null,
        'contact_person_name' => null,
        'planning_text' => null,
        'coc_number' => null,
        'vat_number' => null,
        'iban' => null,
        'hourly_rate' => null,
        'selling_hourly_rate' => null,
        'agreed_hourly_rate' => null,
        'email_address' => null,
        'invoice_mail' => null,
        'reminder_mail' => null,
        'invoice_subject' => null,
        'invoice_ubl_version' => null,
        'phone_number' => null,
        'mobile_phone_number' => null,
        'debtor_number' => null,
        'gln_number' => null,
        'expiration_reminder' => null,
        'type' => null,
        'is_vat_shifted' => null,
        'n_account_text' => null,
        'wage_component_percentage' => null,
        'g_account_text' => null,
        'g_account_percentage' => null,
        'associated_property_asset_names' => null,
        'has_accounting_software' => null,
        'debtor_numbers' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'address' => 'address',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'information' => 'information',
        'contact_person_name' => 'contactPersonName',
        'planning_text' => 'planningText',
        'coc_number' => 'cocNumber',
        'vat_number' => 'vatNumber',
        'iban' => 'iban',
        'hourly_rate' => 'hourlyRate',
        'selling_hourly_rate' => 'sellingHourlyRate',
        'agreed_hourly_rate' => 'agreedHourlyRate',
        'email_address' => 'emailAddress',
        'invoice_mail' => 'invoiceMail',
        'reminder_mail' => 'reminderMail',
        'invoice_subject' => 'invoiceSubject',
        'invoice_ubl_version' => 'invoiceUblVersion',
        'phone_number' => 'phoneNumber',
        'mobile_phone_number' => 'mobilePhoneNumber',
        'debtor_number' => 'debtorNumber',
        'gln_number' => 'glnNumber',
        'expiration_reminder' => 'expirationReminder',
        'type' => 'type',
        'is_vat_shifted' => 'isVatShifted',
        'n_account_text' => 'nAccountText',
        'wage_component_percentage' => 'wageComponentPercentage',
        'g_account_text' => 'gAccountText',
        'g_account_percentage' => 'gAccountPercentage',
        'associated_property_asset_names' => 'associatedPropertyAssetNames',
        'has_accounting_software' => 'hasAccountingSoftware',
        'debtor_numbers' => 'debtorNumbers',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'address' => 'setAddress',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'information' => 'setInformation',
        'contact_person_name' => 'setContactPersonName',
        'planning_text' => 'setPlanningText',
        'coc_number' => 'setCocNumber',
        'vat_number' => 'setVatNumber',
        'iban' => 'setIban',
        'hourly_rate' => 'setHourlyRate',
        'selling_hourly_rate' => 'setSellingHourlyRate',
        'agreed_hourly_rate' => 'setAgreedHourlyRate',
        'email_address' => 'setEmailAddress',
        'invoice_mail' => 'setInvoiceMail',
        'reminder_mail' => 'setReminderMail',
        'invoice_subject' => 'setInvoiceSubject',
        'invoice_ubl_version' => 'setInvoiceUblVersion',
        'phone_number' => 'setPhoneNumber',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'debtor_number' => 'setDebtorNumber',
        'gln_number' => 'setGlnNumber',
        'expiration_reminder' => 'setExpirationReminder',
        'type' => 'setType',
        'is_vat_shifted' => 'setIsVatShifted',
        'n_account_text' => 'setNAccountText',
        'wage_component_percentage' => 'setWageComponentPercentage',
        'g_account_text' => 'setGAccountText',
        'g_account_percentage' => 'setGAccountPercentage',
        'associated_property_asset_names' => 'setAssociatedPropertyAssetNames',
        'has_accounting_software' => 'setHasAccountingSoftware',
        'debtor_numbers' => 'setDebtorNumbers',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'address' => 'getAddress',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'information' => 'getInformation',
        'contact_person_name' => 'getContactPersonName',
        'planning_text' => 'getPlanningText',
        'coc_number' => 'getCocNumber',
        'vat_number' => 'getVatNumber',
        'iban' => 'getIban',
        'hourly_rate' => 'getHourlyRate',
        'selling_hourly_rate' => 'getSellingHourlyRate',
        'agreed_hourly_rate' => 'getAgreedHourlyRate',
        'email_address' => 'getEmailAddress',
        'invoice_mail' => 'getInvoiceMail',
        'reminder_mail' => 'getReminderMail',
        'invoice_subject' => 'getInvoiceSubject',
        'invoice_ubl_version' => 'getInvoiceUblVersion',
        'phone_number' => 'getPhoneNumber',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'debtor_number' => 'getDebtorNumber',
        'gln_number' => 'getGlnNumber',
        'expiration_reminder' => 'getExpirationReminder',
        'type' => 'getType',
        'is_vat_shifted' => 'getIsVatShifted',
        'n_account_text' => 'getNAccountText',
        'wage_component_percentage' => 'getWageComponentPercentage',
        'g_account_text' => 'getGAccountText',
        'g_account_percentage' => 'getGAccountPercentage',
        'associated_property_asset_names' => 'getAssociatedPropertyAssetNames',
        'has_accounting_software' => 'getHasAccountingSoftware',
        'debtor_numbers' => 'getDebtorNumbers',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['information'] = isset($data['information']) ? $data['information'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['planning_text'] = isset($data['planning_text']) ? $data['planning_text'] : null;
        $this->container['coc_number'] = isset($data['coc_number']) ? $data['coc_number'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['hourly_rate'] = isset($data['hourly_rate']) ? $data['hourly_rate'] : null;
        $this->container['selling_hourly_rate'] = isset($data['selling_hourly_rate']) ? $data['selling_hourly_rate'] : null;
        $this->container['agreed_hourly_rate'] = isset($data['agreed_hourly_rate']) ? $data['agreed_hourly_rate'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['invoice_mail'] = isset($data['invoice_mail']) ? $data['invoice_mail'] : null;
        $this->container['reminder_mail'] = isset($data['reminder_mail']) ? $data['reminder_mail'] : null;
        $this->container['invoice_subject'] = isset($data['invoice_subject']) ? $data['invoice_subject'] : null;
        $this->container['invoice_ubl_version'] = isset($data['invoice_ubl_version']) ? $data['invoice_ubl_version'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_phone_number'] = isset($data['mobile_phone_number']) ? $data['mobile_phone_number'] : null;
        $this->container['debtor_number'] = isset($data['debtor_number']) ? $data['debtor_number'] : null;
        $this->container['gln_number'] = isset($data['gln_number']) ? $data['gln_number'] : null;
        $this->container['expiration_reminder'] = isset($data['expiration_reminder']) ? $data['expiration_reminder'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['is_vat_shifted'] = isset($data['is_vat_shifted']) ? $data['is_vat_shifted'] : null;
        $this->container['n_account_text'] = isset($data['n_account_text']) ? $data['n_account_text'] : null;
        $this->container['wage_component_percentage'] = isset($data['wage_component_percentage']) ? $data['wage_component_percentage'] : null;
        $this->container['g_account_text'] = isset($data['g_account_text']) ? $data['g_account_text'] : null;
        $this->container['g_account_percentage'] = isset($data['g_account_percentage']) ? $data['g_account_percentage'] : null;
        $this->container['associated_property_asset_names'] = isset($data['associated_property_asset_names']) ? $data['associated_property_asset_names'] : null;
        $this->container['has_accounting_software'] = isset($data['has_accounting_software']) ? $data['has_accounting_software'] : null;
        $this->container['debtor_numbers'] = isset($data['debtor_numbers']) ? $data['debtor_numbers'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 256)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['coc_number']) && (mb_strlen($this->container['coc_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'coc_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) > 256)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['hourly_rate']) && !preg_match("/^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/", $this->container['hourly_rate'])) {
            $invalidProperties[] = "invalid value for 'hourly_rate', must be conform to the pattern /^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.";
        }

        if (!is_null($this->container['selling_hourly_rate']) && !preg_match("/^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/", $this->container['selling_hourly_rate'])) {
            $invalidProperties[] = "invalid value for 'selling_hourly_rate', must be conform to the pattern /^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.";
        }

        if (!is_null($this->container['agreed_hourly_rate']) && !preg_match("/^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/", $this->container['agreed_hourly_rate'])) {
            $invalidProperties[] = "invalid value for 'agreed_hourly_rate', must be conform to the pattern /^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 256)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (mb_strlen($this->container['mobile_phone_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'mobile_phone_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['debtor_number']) && (mb_strlen($this->container['debtor_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'debtor_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['gln_number']) && (mb_strlen($this->container['gln_number']) > 13)) {
            $invalidProperties[] = "invalid value for 'gln_number', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['n_account_text']) && (mb_strlen($this->container['n_account_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'n_account_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['g_account_text']) && (mb_strlen($this->container['g_account_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'g_account_text', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of contact.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The contact name.
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The street name of contact.
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number The house number (incl. additions).
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The address.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip-code.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling ContactListItem., must be smaller than or equal to 20.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city name.
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 256)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code An ISO 3166-2 representation of the country.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets information
     *
     * @return string
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param string $information Additional information about the contact.
     *
     * @return $this
     */
    public function setInformation($information)
    {
        $this->container['information'] = $information;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name The name of the financial contact person, Primarily used for invoicing purposes.
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets planning_text
     *
     * @return string
     */
    public function getPlanningText()
    {
        return $this->container['planning_text'];
    }

    /**
     * Sets planning_text
     *
     * @param string $planning_text The planning text.
     *
     * @return $this
     */
    public function setPlanningText($planning_text)
    {
        $this->container['planning_text'] = $planning_text;

        return $this;
    }

    /**
     * Gets coc_number
     *
     * @return string
     */
    public function getCocNumber()
    {
        return $this->container['coc_number'];
    }

    /**
     * Sets coc_number
     *
     * @param string $coc_number The chamber of commerce number.
     *
     * @return $this
     */
    public function setCocNumber($coc_number)
    {
        if (!is_null($coc_number) && (mb_strlen($coc_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $coc_number when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['coc_number'] = $coc_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number The value added tax number.
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if (!is_null($vat_number) && (mb_strlen($vat_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban The IBAN account number.
     *
     * @return $this
     */
    public function setIban($iban)
    {
        if (!is_null($iban) && (mb_strlen($iban) > 256)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets hourly_rate
     *
     * @return string
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     *
     * @param string $hourly_rate The hourly rate.
     *
     * @return $this
     */
    public function setHourlyRate($hourly_rate)
    {

        if (!is_null($hourly_rate) && (!preg_match("/^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/", $hourly_rate))) {
            throw new \InvalidArgumentException("invalid value for $hourly_rate when calling ContactListItem., must conform to the pattern /^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.");
        }

        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets selling_hourly_rate
     *
     * @return string
     */
    public function getSellingHourlyRate()
    {
        return $this->container['selling_hourly_rate'];
    }

    /**
     * Sets selling_hourly_rate
     *
     * @param string $selling_hourly_rate The selling hourly rate.
     *
     * @return $this
     */
    public function setSellingHourlyRate($selling_hourly_rate)
    {

        if (!is_null($selling_hourly_rate) && (!preg_match("/^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/", $selling_hourly_rate))) {
            throw new \InvalidArgumentException("invalid value for $selling_hourly_rate when calling ContactListItem., must conform to the pattern /^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.");
        }

        $this->container['selling_hourly_rate'] = $selling_hourly_rate;

        return $this;
    }

    /**
     * Gets agreed_hourly_rate
     *
     * @return string
     */
    public function getAgreedHourlyRate()
    {
        return $this->container['agreed_hourly_rate'];
    }

    /**
     * Sets agreed_hourly_rate
     *
     * @param string $agreed_hourly_rate The agreed hourly rate.
     *
     * @return $this
     */
    public function setAgreedHourlyRate($agreed_hourly_rate)
    {

        if (!is_null($agreed_hourly_rate) && (!preg_match("/^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/", $agreed_hourly_rate))) {
            throw new \InvalidArgumentException("invalid value for $agreed_hourly_rate when calling ContactListItem., must conform to the pattern /^\\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.");
        }

        $this->container['agreed_hourly_rate'] = $agreed_hourly_rate;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address The email address.
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 256)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets invoice_mail
     *
     * @return string
     */
    public function getInvoiceMail()
    {
        return $this->container['invoice_mail'];
    }

    /**
     * Sets invoice_mail
     *
     * @param string $invoice_mail The invoice email address.
     *
     * @return $this
     */
    public function setInvoiceMail($invoice_mail)
    {
        $this->container['invoice_mail'] = $invoice_mail;

        return $this;
    }

    /**
     * Gets reminder_mail
     *
     * @return string
     */
    public function getReminderMail()
    {
        return $this->container['reminder_mail'];
    }

    /**
     * Sets reminder_mail
     *
     * @param string $reminder_mail The reminder email address.
     *
     * @return $this
     */
    public function setReminderMail($reminder_mail)
    {
        $this->container['reminder_mail'] = $reminder_mail;

        return $this;
    }

    /**
     * Gets invoice_subject
     *
     * @return string
     */
    public function getInvoiceSubject()
    {
        return $this->container['invoice_subject'];
    }

    /**
     * Sets invoice_subject
     *
     * @param string $invoice_subject The invoice subject.
     *
     * @return $this
     */
    public function setInvoiceSubject($invoice_subject)
    {
        $this->container['invoice_subject'] = $invoice_subject;

        return $this;
    }

    /**
     * Gets invoice_ubl_version
     *
     * @return string
     */
    public function getInvoiceUblVersion()
    {
        return $this->container['invoice_ubl_version'];
    }

    /**
     * Sets invoice_ubl_version
     *
     * @param string $invoice_ubl_version The invoice ubl version.
     *
     * @return $this
     */
    public function setInvoiceUblVersion($invoice_ubl_version)
    {
        $this->container['invoice_ubl_version'] = $invoice_ubl_version;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The phone number.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string $mobile_phone_number The mobile phone number.
     *
     * @return $this
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        if (!is_null($mobile_phone_number) && (mb_strlen($mobile_phone_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets debtor_number
     *
     * @return string
     */
    public function getDebtorNumber()
    {
        return $this->container['debtor_number'];
    }

    /**
     * Sets debtor_number
     *
     * @param string $debtor_number The debtor number. Only used if the organization has no divisions.
     *
     * @return $this
     */
    public function setDebtorNumber($debtor_number)
    {
        if (!is_null($debtor_number) && (mb_strlen($debtor_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $debtor_number when calling ContactListItem., must be smaller than or equal to 256.');
        }

        $this->container['debtor_number'] = $debtor_number;

        return $this;
    }

    /**
     * Gets gln_number
     *
     * @return string
     */
    public function getGlnNumber()
    {
        return $this->container['gln_number'];
    }

    /**
     * Sets gln_number
     *
     * @param string $gln_number The Global Location Number.
     *
     * @return $this
     */
    public function setGlnNumber($gln_number)
    {
        if (!is_null($gln_number) && (mb_strlen($gln_number) > 13)) {
            throw new \InvalidArgumentException('invalid length for $gln_number when calling ContactListItem., must be smaller than or equal to 13.');
        }

        $this->container['gln_number'] = $gln_number;

        return $this;
    }

    /**
     * Gets expiration_reminder
     *
     * @return int
     */
    public function getExpirationReminder()
    {
        return $this->container['expiration_reminder'];
    }

    /**
     * Sets expiration_reminder
     *
     * @param int $expiration_reminder The expiration reminder days.
     *
     * @return $this
     */
    public function setExpirationReminder($expiration_reminder)
    {
        $this->container['expiration_reminder'] = $expiration_reminder;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\NestedContactTypeListItem
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\NestedContactTypeListItem $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_vat_shifted
     *
     * @return bool
     */
    public function getIsVatShifted()
    {
        return $this->container['is_vat_shifted'];
    }

    /**
     * Sets is_vat_shifted
     *
     * @param bool $is_vat_shifted True if VAT is shifted from the invoice.
     *
     * @return $this
     */
    public function setIsVatShifted($is_vat_shifted)
    {
        $this->container['is_vat_shifted'] = $is_vat_shifted;

        return $this;
    }

    /**
     * Gets n_account_text
     *
     * @return string
     */
    public function getNAccountText()
    {
        return $this->container['n_account_text'];
    }

    /**
     * Sets n_account_text
     *
     * @param string $n_account_text N-account text.
     *
     * @return $this
     */
    public function setNAccountText($n_account_text)
    {
        if (!is_null($n_account_text) && (mb_strlen($n_account_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $n_account_text when calling ContactListItem., must be smaller than or equal to 255.');
        }

        $this->container['n_account_text'] = $n_account_text;

        return $this;
    }

    /**
     * Gets wage_component_percentage
     *
     * @return string
     */
    public function getWageComponentPercentage()
    {
        return $this->container['wage_component_percentage'];
    }

    /**
     * Sets wage_component_percentage
     *
     * @param string $wage_component_percentage Wage component percentage.
     *
     * @return $this
     */
    public function setWageComponentPercentage($wage_component_percentage)
    {
        $this->container['wage_component_percentage'] = $wage_component_percentage;

        return $this;
    }

    /**
     * Gets g_account_text
     *
     * @return string
     */
    public function getGAccountText()
    {
        return $this->container['g_account_text'];
    }

    /**
     * Sets g_account_text
     *
     * @param string $g_account_text G-account text.
     *
     * @return $this
     */
    public function setGAccountText($g_account_text)
    {
        if (!is_null($g_account_text) && (mb_strlen($g_account_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $g_account_text when calling ContactListItem., must be smaller than or equal to 255.');
        }

        $this->container['g_account_text'] = $g_account_text;

        return $this;
    }

    /**
     * Gets g_account_percentage
     *
     * @return string
     */
    public function getGAccountPercentage()
    {
        return $this->container['g_account_percentage'];
    }

    /**
     * Sets g_account_percentage
     *
     * @param string $g_account_percentage G-account percentage.
     *
     * @return $this
     */
    public function setGAccountPercentage($g_account_percentage)
    {
        $this->container['g_account_percentage'] = $g_account_percentage;

        return $this;
    }

    /**
     * Gets associated_property_asset_names
     *
     * @return string
     */
    public function getAssociatedPropertyAssetNames()
    {
        return $this->container['associated_property_asset_names'];
    }

    /**
     * Sets associated_property_asset_names
     *
     * @param string $associated_property_asset_names All property asset names related to this contact.
     *
     * @return $this
     */
    public function setAssociatedPropertyAssetNames($associated_property_asset_names)
    {
        $this->container['associated_property_asset_names'] = $associated_property_asset_names;

        return $this;
    }

    /**
     * Gets has_accounting_software
     *
     * @return bool
     */
    public function getHasAccountingSoftware()
    {
        return $this->container['has_accounting_software'];
    }

    /**
     * Sets has_accounting_software
     *
     * @param bool $has_accounting_software Whether the contact has either Exact or Twinfield accounting software. Not applicable if the organization has divisions.
     *
     * @return $this
     */
    public function setHasAccountingSoftware($has_accounting_software)
    {
        $this->container['has_accounting_software'] = $has_accounting_software;

        return $this;
    }

    /**
     * Gets debtor_numbers
     *
     * @return string
     */
    public function getDebtorNumbers()
    {
        return $this->container['debtor_numbers'];
    }

    /**
     * Sets debtor_numbers
     *
     * @param string $debtor_numbers The deptor numbers for each contact division associated with the contact. Only available if the organization has divisions.
     *
     * @return $this
     */
    public function setDebtorNumbers($debtor_numbers)
    {
        $this->container['debtor_numbers'] = $debtor_numbers;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


