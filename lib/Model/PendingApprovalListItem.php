<?php
/**
 * PendingApprovalListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PendingApprovalListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PendingApprovalListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PendingApprovalListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'int',
        'purchase_invoice_id' => 'int',
        'purchase_order_contract_id' => 'int',
        'subcontractor_contract_id' => 'int',
        'name' => 'string',
        'number' => 'string',
        'contact_name' => 'string',
        'project_name' => 'string',
        'date' => 'string',
        'status_id' => 'int',
        'cost_excluding_vat' => 'int',
        'cost_including_vat' => 'int',
        'comments' => 'string',
        'book_number' => 'string',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'purchase_invoice_id' => null,
        'purchase_order_contract_id' => null,
        'subcontractor_contract_id' => null,
        'name' => null,
        'number' => null,
        'contact_name' => null,
        'project_name' => null,
        'date' => null,
        'status_id' => null,
        'cost_excluding_vat' => null,
        'cost_including_vat' => null,
        'comments' => null,
        'book_number' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'purchase_invoice_id' => 'purchaseInvoiceId',
        'purchase_order_contract_id' => 'purchaseOrderContractId',
        'subcontractor_contract_id' => 'subcontractorContractId',
        'name' => 'name',
        'number' => 'number',
        'contact_name' => 'contactName',
        'project_name' => 'projectName',
        'date' => 'date',
        'status_id' => 'statusId',
        'cost_excluding_vat' => 'costExcludingVat',
        'cost_including_vat' => 'costIncludingVat',
        'comments' => 'comments',
        'book_number' => 'bookNumber',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'purchase_invoice_id' => 'setPurchaseInvoiceId',
        'purchase_order_contract_id' => 'setPurchaseOrderContractId',
        'subcontractor_contract_id' => 'setSubcontractorContractId',
        'name' => 'setName',
        'number' => 'setNumber',
        'contact_name' => 'setContactName',
        'project_name' => 'setProjectName',
        'date' => 'setDate',
        'status_id' => 'setStatusId',
        'cost_excluding_vat' => 'setCostExcludingVat',
        'cost_including_vat' => 'setCostIncludingVat',
        'comments' => 'setComments',
        'book_number' => 'setBookNumber',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'purchase_invoice_id' => 'getPurchaseInvoiceId',
        'purchase_order_contract_id' => 'getPurchaseOrderContractId',
        'subcontractor_contract_id' => 'getSubcontractorContractId',
        'name' => 'getName',
        'number' => 'getNumber',
        'contact_name' => 'getContactName',
        'project_name' => 'getProjectName',
        'date' => 'getDate',
        'status_id' => 'getStatusId',
        'cost_excluding_vat' => 'getCostExcludingVat',
        'cost_including_vat' => 'getCostIncludingVat',
        'comments' => 'getComments',
        'book_number' => 'getBookNumber',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['purchase_invoice_id'] = isset($data['purchase_invoice_id']) ? $data['purchase_invoice_id'] : null;
        $this->container['purchase_order_contract_id'] = isset($data['purchase_order_contract_id']) ? $data['purchase_order_contract_id'] : null;
        $this->container['subcontractor_contract_id'] = isset($data['subcontractor_contract_id']) ? $data['subcontractor_contract_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['cost_excluding_vat'] = isset($data['cost_excluding_vat']) ? $data['cost_excluding_vat'] : null;
        $this->container['cost_including_vat'] = isset($data['cost_including_vat']) ? $data['cost_including_vat'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['book_number'] = isset($data['book_number']) ? $data['book_number'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of this pending approval.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type 0 = Purchase invoice, 1 = Purchase order, 2 = Contract subcontractor.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets purchase_invoice_id
     *
     * @return int
     */
    public function getPurchaseInvoiceId()
    {
        return $this->container['purchase_invoice_id'];
    }

    /**
     * Sets purchase_invoice_id
     *
     * @param int $purchase_invoice_id Purchase invoice ID, can be null depends on the given type.
     *
     * @return $this
     */
    public function setPurchaseInvoiceId($purchase_invoice_id)
    {
        $this->container['purchase_invoice_id'] = $purchase_invoice_id;

        return $this;
    }

    /**
     * Gets purchase_order_contract_id
     *
     * @return int
     */
    public function getPurchaseOrderContractId()
    {
        return $this->container['purchase_order_contract_id'];
    }

    /**
     * Sets purchase_order_contract_id
     *
     * @param int $purchase_order_contract_id Purchase order contract ID, can be null depends on the given type.
     *
     * @return $this
     */
    public function setPurchaseOrderContractId($purchase_order_contract_id)
    {
        $this->container['purchase_order_contract_id'] = $purchase_order_contract_id;

        return $this;
    }

    /**
     * Gets subcontractor_contract_id
     *
     * @return int
     */
    public function getSubcontractorContractId()
    {
        return $this->container['subcontractor_contract_id'];
    }

    /**
     * Sets subcontractor_contract_id
     *
     * @param int $subcontractor_contract_id Subcontractor contract ID, can be null depends on the given type.
     *
     * @return $this
     */
    public function setSubcontractorContractId($subcontractor_contract_id)
    {
        $this->container['subcontractor_contract_id'] = $subcontractor_contract_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the contract or purchase invoice.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Number of the contract or purchase invoice.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name Contact name of the contact or purchase.
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name Project name of the contact or purchase.
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The date contract or purchase invoice in ATOM format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int $status_id Status id of the contract or purchase invoice.
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets cost_excluding_vat
     *
     * @return int
     */
    public function getCostExcludingVat()
    {
        return $this->container['cost_excluding_vat'];
    }

    /**
     * Sets cost_excluding_vat
     *
     * @param int $cost_excluding_vat The cost excluding vat of the contract or purchase invoice.
     *
     * @return $this
     */
    public function setCostExcludingVat($cost_excluding_vat)
    {
        $this->container['cost_excluding_vat'] = $cost_excluding_vat;

        return $this;
    }

    /**
     * Gets cost_including_vat
     *
     * @return int
     */
    public function getCostIncludingVat()
    {
        return $this->container['cost_including_vat'];
    }

    /**
     * Sets cost_including_vat
     *
     * @param int $cost_including_vat The cost including vat of the contract or purchase invoice.
     *
     * @return $this
     */
    public function setCostIncludingVat($cost_including_vat)
    {
        $this->container['cost_including_vat'] = $cost_including_vat;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments The comment of the purchase invoice.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets book_number
     *
     * @return string
     */
    public function getBookNumber()
    {
        return $this->container['book_number'];
    }

    /**
     * Sets book_number
     *
     * @param string $book_number The booking number of the purchase invoice.
     *
     * @return $this
     */
    public function setBookNumber($book_number)
    {
        $this->container['book_number'] = $book_number;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


