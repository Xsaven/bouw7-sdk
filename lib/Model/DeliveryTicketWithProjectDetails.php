<?php
/**
 * DeliveryTicketWithProjectDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeliveryTicketWithProjectDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryTicketWithProjectDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryTicketWithProjectDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'ticket_number' => 'string',
        'ticket_date' => 'string',
        'cost' => 'string',
        'processed' => 'bool',
        'project' => '\Swagger\Client\Model\CondensedProject',
        'initial_cost' => 'string',
        'purchase_order_contract' => '\Swagger\Client\Model\CondensedPurchaseOrderContract',
        'subcontractor_contract' => '\Swagger\Client\Model\CondensedSubcontractorContract',
        'project_security_link' => '\Swagger\Client\Model\CondensedProjectSecurityLink'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'ticket_number' => null,
        'ticket_date' => null,
        'cost' => null,
        'processed' => null,
        'project' => null,
        'initial_cost' => null,
        'purchase_order_contract' => null,
        'subcontractor_contract' => null,
        'project_security_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ticket_number' => 'ticketNumber',
        'ticket_date' => 'ticketDate',
        'cost' => 'cost',
        'processed' => 'processed',
        'project' => 'project',
        'initial_cost' => 'initialCost',
        'purchase_order_contract' => 'purchaseOrderContract',
        'subcontractor_contract' => 'subcontractorContract',
        'project_security_link' => 'projectSecurityLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ticket_number' => 'setTicketNumber',
        'ticket_date' => 'setTicketDate',
        'cost' => 'setCost',
        'processed' => 'setProcessed',
        'project' => 'setProject',
        'initial_cost' => 'setInitialCost',
        'purchase_order_contract' => 'setPurchaseOrderContract',
        'subcontractor_contract' => 'setSubcontractorContract',
        'project_security_link' => 'setProjectSecurityLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ticket_number' => 'getTicketNumber',
        'ticket_date' => 'getTicketDate',
        'cost' => 'getCost',
        'processed' => 'getProcessed',
        'project' => 'getProject',
        'initial_cost' => 'getInitialCost',
        'purchase_order_contract' => 'getPurchaseOrderContract',
        'subcontractor_contract' => 'getSubcontractorContract',
        'project_security_link' => 'getProjectSecurityLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ticket_number'] = isset($data['ticket_number']) ? $data['ticket_number'] : null;
        $this->container['ticket_date'] = isset($data['ticket_date']) ? $data['ticket_date'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['initial_cost'] = isset($data['initial_cost']) ? $data['initial_cost'] : null;
        $this->container['purchase_order_contract'] = isset($data['purchase_order_contract']) ? $data['purchase_order_contract'] : null;
        $this->container['subcontractor_contract'] = isset($data['subcontractor_contract']) ? $data['subcontractor_contract'] : null;
        $this->container['project_security_link'] = isset($data['project_security_link']) ? $data['project_security_link'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of delivery ticket.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ticket_number
     *
     * @return string
     */
    public function getTicketNumber()
    {
        return $this->container['ticket_number'];
    }

    /**
     * Sets ticket_number
     *
     * @param string $ticket_number Ticket number of delivery ticket.
     *
     * @return $this
     */
    public function setTicketNumber($ticket_number)
    {
        $this->container['ticket_number'] = $ticket_number;

        return $this;
    }

    /**
     * Gets ticket_date
     *
     * @return string
     */
    public function getTicketDate()
    {
        return $this->container['ticket_date'];
    }

    /**
     * Sets ticket_date
     *
     * @param string $ticket_date The date for which the delivery ticket were logged.
     *
     * @return $this
     */
    public function setTicketDate($ticket_date)
    {
        $this->container['ticket_date'] = $ticket_date;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string $cost The costs for this delivery ticket.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return bool
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param bool $processed Whether the delivery ticket has been processed.
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\CondensedProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\CondensedProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets initial_cost
     *
     * @return string
     */
    public function getInitialCost()
    {
        return $this->container['initial_cost'];
    }

    /**
     * Sets initial_cost
     *
     * @param string $initial_cost The initial costs for this delivery ticket.
     *
     * @return $this
     */
    public function setInitialCost($initial_cost)
    {
        $this->container['initial_cost'] = $initial_cost;

        return $this;
    }

    /**
     * Gets purchase_order_contract
     *
     * @return \Swagger\Client\Model\CondensedPurchaseOrderContract
     */
    public function getPurchaseOrderContract()
    {
        return $this->container['purchase_order_contract'];
    }

    /**
     * Sets purchase_order_contract
     *
     * @param \Swagger\Client\Model\CondensedPurchaseOrderContract $purchase_order_contract purchase_order_contract
     *
     * @return $this
     */
    public function setPurchaseOrderContract($purchase_order_contract)
    {
        $this->container['purchase_order_contract'] = $purchase_order_contract;

        return $this;
    }

    /**
     * Gets subcontractor_contract
     *
     * @return \Swagger\Client\Model\CondensedSubcontractorContract
     */
    public function getSubcontractorContract()
    {
        return $this->container['subcontractor_contract'];
    }

    /**
     * Sets subcontractor_contract
     *
     * @param \Swagger\Client\Model\CondensedSubcontractorContract $subcontractor_contract subcontractor_contract
     *
     * @return $this
     */
    public function setSubcontractorContract($subcontractor_contract)
    {
        $this->container['subcontractor_contract'] = $subcontractor_contract;

        return $this;
    }

    /**
     * Gets project_security_link
     *
     * @return \Swagger\Client\Model\CondensedProjectSecurityLink
     */
    public function getProjectSecurityLink()
    {
        return $this->container['project_security_link'];
    }

    /**
     * Sets project_security_link
     *
     * @param \Swagger\Client\Model\CondensedProjectSecurityLink $project_security_link project_security_link
     *
     * @return $this
     */
    public function setProjectSecurityLink($project_security_link)
    {
        $this->container['project_security_link'] = $project_security_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


