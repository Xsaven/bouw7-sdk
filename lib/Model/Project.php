<?php
/**
 * Project
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Project implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent_id' => 'int',
        'type' => 'int',
        'project_number' => 'string',
        'full_project_number' => 'string',
        'division' => '\Swagger\Client\Model\CondensedDivision',
        'is_booked' => 'bool',
        'name' => 'string',
        'street_name' => 'string',
        'house_number' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string',
        'information' => 'string',
        'planning' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'delivery_date' => 'string',
        'extra_work' => 'string',
        'hours_estimate' => 'string',
        'hours_estimate_per_hour_types' => '\Swagger\Client\Model\HoursEstimatePerHourType[]',
        'fixed_price' => 'string',
        'general_costs_amount' => 'string',
        'additional_work' => 'string',
        'profit_and_risk' => 'string',
        'note' => 'string',
        'has_mareon_association' => 'bool',
        'maintenance_status_code' => 'string',
        'is_security_coded' => 'bool',
        'plan_item_count' => 'int',
        'logged_hours' => 'string',
        'branch' => '\Swagger\Client\Model\CondensedBranch',
        'contact' => '\Swagger\Client\Model\CondensedContact',
        'category' => '\Swagger\Client\Model\CondensedProjectCategory',
        'contact_person' => '\Swagger\Client\Model\CondensedContactPerson',
        'employees' => '\Swagger\Client\Model\CondensedEmployee[]',
        'status' => '\Swagger\Client\Model\CondensedProjectStatus',
        'property_asset' => '\Swagger\Client\Model\CondensedPropertyAsset',
        'custom_attribute_values' => '\Swagger\Client\Model\CondensedCustomAttributeValue[]',
        'reference' => 'string',
        'work_address' => 'string',
        'executor' => '\Swagger\Client\Model\CondensedEmployee',
        'work_planner' => '\Swagger\Client\Model\CondensedEmployee',
        'project_leader' => '\Swagger\Client\Model\CondensedEmployee',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'parent_id' => null,
        'type' => null,
        'project_number' => null,
        'full_project_number' => null,
        'division' => null,
        'is_booked' => null,
        'name' => null,
        'street_name' => null,
        'house_number' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null,
        'information' => null,
        'planning' => null,
        'start_date' => null,
        'end_date' => null,
        'delivery_date' => null,
        'extra_work' => null,
        'hours_estimate' => null,
        'hours_estimate_per_hour_types' => null,
        'fixed_price' => null,
        'general_costs_amount' => null,
        'additional_work' => null,
        'profit_and_risk' => null,
        'note' => null,
        'has_mareon_association' => null,
        'maintenance_status_code' => null,
        'is_security_coded' => null,
        'plan_item_count' => null,
        'logged_hours' => null,
        'branch' => null,
        'contact' => null,
        'category' => null,
        'contact_person' => null,
        'employees' => null,
        'status' => null,
        'property_asset' => null,
        'custom_attribute_values' => null,
        'reference' => null,
        'work_address' => null,
        'executor' => null,
        'work_planner' => null,
        'project_leader' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parentId',
        'type' => 'type',
        'project_number' => 'projectNumber',
        'full_project_number' => 'fullProjectNumber',
        'division' => 'division',
        'is_booked' => 'isBooked',
        'name' => 'name',
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode',
        'information' => 'information',
        'planning' => 'planning',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'delivery_date' => 'deliveryDate',
        'extra_work' => 'extraWork',
        'hours_estimate' => 'hoursEstimate',
        'hours_estimate_per_hour_types' => 'hoursEstimatePerHourTypes',
        'fixed_price' => 'fixedPrice',
        'general_costs_amount' => 'generalCostsAmount',
        'additional_work' => 'additionalWork',
        'profit_and_risk' => 'profitAndRisk',
        'note' => 'note',
        'has_mareon_association' => 'hasMareonAssociation',
        'maintenance_status_code' => 'maintenanceStatusCode',
        'is_security_coded' => 'isSecurityCoded',
        'plan_item_count' => 'planItemCount',
        'logged_hours' => 'loggedHours',
        'branch' => 'branch',
        'contact' => 'contact',
        'category' => 'category',
        'contact_person' => 'contactPerson',
        'employees' => 'employees',
        'status' => 'status',
        'property_asset' => 'propertyAsset',
        'custom_attribute_values' => 'customAttributeValues',
        'reference' => 'reference',
        'work_address' => 'workAddress',
        'executor' => 'executor',
        'work_planner' => 'workPlanner',
        'project_leader' => 'projectLeader',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'type' => 'setType',
        'project_number' => 'setProjectNumber',
        'full_project_number' => 'setFullProjectNumber',
        'division' => 'setDivision',
        'is_booked' => 'setIsBooked',
        'name' => 'setName',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode',
        'information' => 'setInformation',
        'planning' => 'setPlanning',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'delivery_date' => 'setDeliveryDate',
        'extra_work' => 'setExtraWork',
        'hours_estimate' => 'setHoursEstimate',
        'hours_estimate_per_hour_types' => 'setHoursEstimatePerHourTypes',
        'fixed_price' => 'setFixedPrice',
        'general_costs_amount' => 'setGeneralCostsAmount',
        'additional_work' => 'setAdditionalWork',
        'profit_and_risk' => 'setProfitAndRisk',
        'note' => 'setNote',
        'has_mareon_association' => 'setHasMareonAssociation',
        'maintenance_status_code' => 'setMaintenanceStatusCode',
        'is_security_coded' => 'setIsSecurityCoded',
        'plan_item_count' => 'setPlanItemCount',
        'logged_hours' => 'setLoggedHours',
        'branch' => 'setBranch',
        'contact' => 'setContact',
        'category' => 'setCategory',
        'contact_person' => 'setContactPerson',
        'employees' => 'setEmployees',
        'status' => 'setStatus',
        'property_asset' => 'setPropertyAsset',
        'custom_attribute_values' => 'setCustomAttributeValues',
        'reference' => 'setReference',
        'work_address' => 'setWorkAddress',
        'executor' => 'setExecutor',
        'work_planner' => 'setWorkPlanner',
        'project_leader' => 'setProjectLeader',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'type' => 'getType',
        'project_number' => 'getProjectNumber',
        'full_project_number' => 'getFullProjectNumber',
        'division' => 'getDivision',
        'is_booked' => 'getIsBooked',
        'name' => 'getName',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode',
        'information' => 'getInformation',
        'planning' => 'getPlanning',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'delivery_date' => 'getDeliveryDate',
        'extra_work' => 'getExtraWork',
        'hours_estimate' => 'getHoursEstimate',
        'hours_estimate_per_hour_types' => 'getHoursEstimatePerHourTypes',
        'fixed_price' => 'getFixedPrice',
        'general_costs_amount' => 'getGeneralCostsAmount',
        'additional_work' => 'getAdditionalWork',
        'profit_and_risk' => 'getProfitAndRisk',
        'note' => 'getNote',
        'has_mareon_association' => 'getHasMareonAssociation',
        'maintenance_status_code' => 'getMaintenanceStatusCode',
        'is_security_coded' => 'getIsSecurityCoded',
        'plan_item_count' => 'getPlanItemCount',
        'logged_hours' => 'getLoggedHours',
        'branch' => 'getBranch',
        'contact' => 'getContact',
        'category' => 'getCategory',
        'contact_person' => 'getContactPerson',
        'employees' => 'getEmployees',
        'status' => 'getStatus',
        'property_asset' => 'getPropertyAsset',
        'custom_attribute_values' => 'getCustomAttributeValues',
        'reference' => 'getReference',
        'work_address' => 'getWorkAddress',
        'executor' => 'getExecutor',
        'work_planner' => 'getWorkPlanner',
        'project_leader' => 'getProjectLeader',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['project_number'] = isset($data['project_number']) ? $data['project_number'] : null;
        $this->container['full_project_number'] = isset($data['full_project_number']) ? $data['full_project_number'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['is_booked'] = isset($data['is_booked']) ? $data['is_booked'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['information'] = isset($data['information']) ? $data['information'] : null;
        $this->container['planning'] = isset($data['planning']) ? $data['planning'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['extra_work'] = isset($data['extra_work']) ? $data['extra_work'] : null;
        $this->container['hours_estimate'] = isset($data['hours_estimate']) ? $data['hours_estimate'] : null;
        $this->container['hours_estimate_per_hour_types'] = isset($data['hours_estimate_per_hour_types']) ? $data['hours_estimate_per_hour_types'] : null;
        $this->container['fixed_price'] = isset($data['fixed_price']) ? $data['fixed_price'] : null;
        $this->container['general_costs_amount'] = isset($data['general_costs_amount']) ? $data['general_costs_amount'] : null;
        $this->container['additional_work'] = isset($data['additional_work']) ? $data['additional_work'] : null;
        $this->container['profit_and_risk'] = isset($data['profit_and_risk']) ? $data['profit_and_risk'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['has_mareon_association'] = isset($data['has_mareon_association']) ? $data['has_mareon_association'] : null;
        $this->container['maintenance_status_code'] = isset($data['maintenance_status_code']) ? $data['maintenance_status_code'] : null;
        $this->container['is_security_coded'] = isset($data['is_security_coded']) ? $data['is_security_coded'] : null;
        $this->container['plan_item_count'] = isset($data['plan_item_count']) ? $data['plan_item_count'] : null;
        $this->container['logged_hours'] = isset($data['logged_hours']) ? $data['logged_hours'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['employees'] = isset($data['employees']) ? $data['employees'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['property_asset'] = isset($data['property_asset']) ? $data['property_asset'] : null;
        $this->container['custom_attribute_values'] = isset($data['custom_attribute_values']) ? $data['custom_attribute_values'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['work_address'] = isset($data['work_address']) ? $data['work_address'] : null;
        $this->container['executor'] = isset($data['executor']) ? $data['executor'] : null;
        $this->container['work_planner'] = isset($data['work_planner']) ? $data['work_planner'] : null;
        $this->container['project_leader'] = isset($data['project_leader']) ? $data['project_leader'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the project.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id The ID of the parent project if this project is a subproject.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The type of project.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets project_number
     *
     * @return string
     */
    public function getProjectNumber()
    {
        return $this->container['project_number'];
    }

    /**
     * Sets project_number
     *
     * @param string $project_number The project number.
     *
     * @return $this
     */
    public function setProjectNumber($project_number)
    {
        $this->container['project_number'] = $project_number;

        return $this;
    }

    /**
     * Gets full_project_number
     *
     * @return string
     */
    public function getFullProjectNumber()
    {
        return $this->container['full_project_number'];
    }

    /**
     * Sets full_project_number
     *
     * @param string $full_project_number The full project number including year.
     *
     * @return $this
     */
    public function setFullProjectNumber($full_project_number)
    {
        $this->container['full_project_number'] = $full_project_number;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \Swagger\Client\Model\CondensedDivision
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \Swagger\Client\Model\CondensedDivision $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets is_booked
     *
     * @return bool
     */
    public function getIsBooked()
    {
        return $this->container['is_booked'];
    }

    /**
     * Sets is_booked
     *
     * @param bool $is_booked Whether or not the project has been booked to a bookkeeping system.
     *
     * @return $this
     */
    public function setIsBooked($is_booked)
    {
        $this->container['is_booked'] = $is_booked;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the project.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The street name for the project.
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number The house number for the project.
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip code for the project.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of the project.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code An ISO 3166-2 representation of the country.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Project., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets information
     *
     * @return string
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param string $information Information about the project.
     *
     * @return $this
     */
    public function setInformation($information)
    {
        $this->container['information'] = $information;

        return $this;
    }

    /**
     * Gets planning
     *
     * @return string
     */
    public function getPlanning()
    {
        return $this->container['planning'];
    }

    /**
     * Sets planning
     *
     * @param string $planning The planning for the project.
     *
     * @return $this
     */
    public function setPlanning($planning)
    {
        $this->container['planning'] = $planning;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Start date for the project in ATOM format.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End date for the project in ATOM format.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Delivery date for the project.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets extra_work
     *
     * @return string
     */
    public function getExtraWork()
    {
        return $this->container['extra_work'];
    }

    /**
     * Sets extra_work
     *
     * @param string $extra_work Extra work for the project.
     *
     * @return $this
     */
    public function setExtraWork($extra_work)
    {
        $this->container['extra_work'] = $extra_work;

        return $this;
    }

    /**
     * Gets hours_estimate
     *
     * @return string
     */
    public function getHoursEstimate()
    {
        return $this->container['hours_estimate'];
    }

    /**
     * Sets hours_estimate
     *
     * @param string $hours_estimate Estimated hours for the project.
     *
     * @return $this
     */
    public function setHoursEstimate($hours_estimate)
    {
        $this->container['hours_estimate'] = $hours_estimate;

        return $this;
    }

    /**
     * Gets hours_estimate_per_hour_types
     *
     * @return \Swagger\Client\Model\HoursEstimatePerHourType[]
     */
    public function getHoursEstimatePerHourTypes()
    {
        return $this->container['hours_estimate_per_hour_types'];
    }

    /**
     * Sets hours_estimate_per_hour_types
     *
     * @param \Swagger\Client\Model\HoursEstimatePerHourType[] $hours_estimate_per_hour_types A list of HoursEstimatePerHourType schemas assigned to this project.
     *
     * @return $this
     */
    public function setHoursEstimatePerHourTypes($hours_estimate_per_hour_types)
    {
        $this->container['hours_estimate_per_hour_types'] = $hours_estimate_per_hour_types;

        return $this;
    }

    /**
     * Gets fixed_price
     *
     * @return string
     */
    public function getFixedPrice()
    {
        return $this->container['fixed_price'];
    }

    /**
     * Sets fixed_price
     *
     * @param string $fixed_price Fixed price for the project.
     *
     * @return $this
     */
    public function setFixedPrice($fixed_price)
    {
        $this->container['fixed_price'] = $fixed_price;

        return $this;
    }

    /**
     * Gets general_costs_amount
     *
     * @return string
     */
    public function getGeneralCostsAmount()
    {
        return $this->container['general_costs_amount'];
    }

    /**
     * Sets general_costs_amount
     *
     * @param string $general_costs_amount General costs amount for the project.
     *
     * @return $this
     */
    public function setGeneralCostsAmount($general_costs_amount)
    {
        $this->container['general_costs_amount'] = $general_costs_amount;

        return $this;
    }

    /**
     * Gets additional_work
     *
     * @return string
     */
    public function getAdditionalWork()
    {
        return $this->container['additional_work'];
    }

    /**
     * Sets additional_work
     *
     * @param string $additional_work Additional work amount for the project.
     *
     * @return $this
     */
    public function setAdditionalWork($additional_work)
    {
        $this->container['additional_work'] = $additional_work;

        return $this;
    }

    /**
     * Gets profit_and_risk
     *
     * @return string
     */
    public function getProfitAndRisk()
    {
        return $this->container['profit_and_risk'];
    }

    /**
     * Sets profit_and_risk
     *
     * @param string $profit_and_risk Profit and risk amount for the project.
     *
     * @return $this
     */
    public function setProfitAndRisk($profit_and_risk)
    {
        $this->container['profit_and_risk'] = $profit_and_risk;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Notes for the project.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets has_mareon_association
     *
     * @return bool
     */
    public function getHasMareonAssociation()
    {
        return $this->container['has_mareon_association'];
    }

    /**
     * Sets has_mareon_association
     *
     * @param bool $has_mareon_association Whether or not the project has an association with Mareon.
     *
     * @return $this
     */
    public function setHasMareonAssociation($has_mareon_association)
    {
        $this->container['has_mareon_association'] = $has_mareon_association;

        return $this;
    }

    /**
     * Gets maintenance_status_code
     *
     * @return string
     */
    public function getMaintenanceStatusCode()
    {
        return $this->container['maintenance_status_code'];
    }

    /**
     * Sets maintenance_status_code
     *
     * @param string $maintenance_status_code The maintenance status code for the project.
     *
     * @return $this
     */
    public function setMaintenanceStatusCode($maintenance_status_code)
    {
        $this->container['maintenance_status_code'] = $maintenance_status_code;

        return $this;
    }

    /**
     * Gets is_security_coded
     *
     * @return bool
     */
    public function getIsSecurityCoded()
    {
        return $this->container['is_security_coded'];
    }

    /**
     * Sets is_security_coded
     *
     * @param bool $is_security_coded Whether or not the project is security coded.
     *
     * @return $this
     */
    public function setIsSecurityCoded($is_security_coded)
    {
        $this->container['is_security_coded'] = $is_security_coded;

        return $this;
    }

    /**
     * Gets plan_item_count
     *
     * @return int
     */
    public function getPlanItemCount()
    {
        return $this->container['plan_item_count'];
    }

    /**
     * Sets plan_item_count
     *
     * @param int $plan_item_count The count of plan items associated with this project.
     *
     * @return $this
     */
    public function setPlanItemCount($plan_item_count)
    {
        $this->container['plan_item_count'] = $plan_item_count;

        return $this;
    }

    /**
     * Gets logged_hours
     *
     * @return string
     */
    public function getLoggedHours()
    {
        return $this->container['logged_hours'];
    }

    /**
     * Sets logged_hours
     *
     * @param string $logged_hours The amount of hours logged for the project.
     *
     * @return $this
     */
    public function setLoggedHours($logged_hours)
    {
        $this->container['logged_hours'] = $logged_hours;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\CondensedBranch
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\CondensedBranch $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\CondensedContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\CondensedContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\CondensedProjectCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\CondensedProjectCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\CondensedContactPerson
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\CondensedContactPerson $contact_person contact_person
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \Swagger\Client\Model\CondensedEmployee[]
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \Swagger\Client\Model\CondensedEmployee[] $employees A list of condensed employee schemas assigned to this project.
     *
     * @return $this
     */
    public function setEmployees($employees)
    {
        $this->container['employees'] = $employees;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\CondensedProjectStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\CondensedProjectStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets property_asset
     *
     * @return \Swagger\Client\Model\CondensedPropertyAsset
     */
    public function getPropertyAsset()
    {
        return $this->container['property_asset'];
    }

    /**
     * Sets property_asset
     *
     * @param \Swagger\Client\Model\CondensedPropertyAsset $property_asset property_asset
     *
     * @return $this
     */
    public function setPropertyAsset($property_asset)
    {
        $this->container['property_asset'] = $property_asset;

        return $this;
    }

    /**
     * Gets custom_attribute_values
     *
     * @return \Swagger\Client\Model\CondensedCustomAttributeValue[]
     */
    public function getCustomAttributeValues()
    {
        return $this->container['custom_attribute_values'];
    }

    /**
     * Sets custom_attribute_values
     *
     * @param \Swagger\Client\Model\CondensedCustomAttributeValue[] $custom_attribute_values A list of custom attribute values belonging to this project.
     *
     * @return $this
     */
    public function setCustomAttributeValues($custom_attribute_values)
    {
        $this->container['custom_attribute_values'] = $custom_attribute_values;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference A reference for this project.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets work_address
     *
     * @return string
     */
    public function getWorkAddress()
    {
        return $this->container['work_address'];
    }

    /**
     * Sets work_address
     *
     * @param string $work_address The work address for this project.
     *
     * @return $this
     */
    public function setWorkAddress($work_address)
    {
        $this->container['work_address'] = $work_address;

        return $this;
    }

    /**
     * Gets executor
     *
     * @return \Swagger\Client\Model\CondensedEmployee
     */
    public function getExecutor()
    {
        return $this->container['executor'];
    }

    /**
     * Sets executor
     *
     * @param \Swagger\Client\Model\CondensedEmployee $executor executor
     *
     * @return $this
     */
    public function setExecutor($executor)
    {
        $this->container['executor'] = $executor;

        return $this;
    }

    /**
     * Gets work_planner
     *
     * @return \Swagger\Client\Model\CondensedEmployee
     */
    public function getWorkPlanner()
    {
        return $this->container['work_planner'];
    }

    /**
     * Sets work_planner
     *
     * @param \Swagger\Client\Model\CondensedEmployee $work_planner work_planner
     *
     * @return $this
     */
    public function setWorkPlanner($work_planner)
    {
        $this->container['work_planner'] = $work_planner;

        return $this;
    }

    /**
     * Gets project_leader
     *
     * @return \Swagger\Client\Model\CondensedEmployee
     */
    public function getProjectLeader()
    {
        return $this->container['project_leader'];
    }

    /**
     * Sets project_leader
     *
     * @param \Swagger\Client\Model\CondensedEmployee $project_leader project_leader
     *
     * @return $this
     */
    public function setProjectLeader($project_leader)
    {
        $this->container['project_leader'] = $project_leader;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


