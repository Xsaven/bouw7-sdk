<?php
/**
 * NestedDeliveryTicketListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NestedDeliveryTicketListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NestedDeliveryTicketListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NestedDeliveryTicketListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'number' => 'string',
        'description' => 'string',
        'date' => 'string',
        'purchase_type_id' => 'int',
        'purchase_type_name' => 'string',
        'price' => 'string',
        'is_processed' => 'bool',
        'booking_status' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'number' => null,
        'description' => null,
        'date' => null,
        'purchase_type_id' => null,
        'purchase_type_name' => null,
        'price' => null,
        'is_processed' => null,
        'booking_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'description' => 'description',
        'date' => 'date',
        'purchase_type_id' => 'purchaseTypeId',
        'purchase_type_name' => 'purchaseTypeName',
        'price' => 'price',
        'is_processed' => 'isProcessed',
        'booking_status' => 'bookingStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'description' => 'setDescription',
        'date' => 'setDate',
        'purchase_type_id' => 'setPurchaseTypeId',
        'purchase_type_name' => 'setPurchaseTypeName',
        'price' => 'setPrice',
        'is_processed' => 'setIsProcessed',
        'booking_status' => 'setBookingStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'description' => 'getDescription',
        'date' => 'getDate',
        'purchase_type_id' => 'getPurchaseTypeId',
        'purchase_type_name' => 'getPurchaseTypeName',
        'price' => 'getPrice',
        'is_processed' => 'getIsProcessed',
        'booking_status' => 'getBookingStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['purchase_type_id'] = isset($data['purchase_type_id']) ? $data['purchase_type_id'] : null;
        $this->container['purchase_type_name'] = isset($data['purchase_type_name']) ? $data['purchase_type_name'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['is_processed'] = isset($data['is_processed']) ? $data['is_processed'] : null;
        $this->container['booking_status'] = isset($data['booking_status']) ? $data['booking_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of this delivery ticket.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The ticket number of this delivery ticket.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of this delivery ticket. May contain HTML content.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The date of the delivery ticket, represented in ATOM-format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets purchase_type_id
     *
     * @return int
     */
    public function getPurchaseTypeId()
    {
        return $this->container['purchase_type_id'];
    }

    /**
     * Sets purchase_type_id
     *
     * @param int $purchase_type_id The ID of the purchase type of this delivery ticket.
     *
     * @return $this
     */
    public function setPurchaseTypeId($purchase_type_id)
    {
        $this->container['purchase_type_id'] = $purchase_type_id;

        return $this;
    }

    /**
     * Gets purchase_type_name
     *
     * @return string
     */
    public function getPurchaseTypeName()
    {
        return $this->container['purchase_type_name'];
    }

    /**
     * Sets purchase_type_name
     *
     * @param string $purchase_type_name The name of the purchase type of this delivery ticket.
     *
     * @return $this
     */
    public function setPurchaseTypeName($purchase_type_name)
    {
        $this->container['purchase_type_name'] = $purchase_type_name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price The price of this delivery ticket.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets is_processed
     *
     * @return bool
     */
    public function getIsProcessed()
    {
        return $this->container['is_processed'];
    }

    /**
     * Sets is_processed
     *
     * @param bool $is_processed Whether this delivery ticket has been processed.
     *
     * @return $this
     */
    public function setIsProcessed($is_processed)
    {
        $this->container['is_processed'] = $is_processed;

        return $this;
    }

    /**
     * Gets booking_status
     *
     * @return int
     */
    public function getBookingStatus()
    {
        return $this->container['booking_status'];
    }

    /**
     * Sets booking_status
     *
     * @param int $booking_status The current booking status. 0 = Registered, 1 = Invoiced, 2 = Not billable, 3 = Credited.
     *
     * @return $this
     */
    public function setBookingStatus($booking_status)
    {
        $this->container['booking_status'] = $booking_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


