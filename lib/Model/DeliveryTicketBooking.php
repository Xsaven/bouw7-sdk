<?php
/**
 * DeliveryTicketBooking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeliveryTicketBooking Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryTicketBooking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryTicketBooking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'description' => 'string',
        'ticket_number' => 'string',
        'contact' => '\Swagger\Client\Model\CondensedContact',
        'purchase_type' => 'string',
        'cost_price' => 'string',
        'selling_price' => 'string',
        'total_cost_price' => 'string',
        'invoice_cost_status_id' => 'string',
        'surcharge_percentage' => 'string',
        'log_date' => 'string',
        'invoice_line_id' => 'int',
        'invoice_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'description' => null,
        'ticket_number' => null,
        'contact' => null,
        'purchase_type' => null,
        'cost_price' => null,
        'selling_price' => null,
        'total_cost_price' => null,
        'invoice_cost_status_id' => null,
        'surcharge_percentage' => null,
        'log_date' => null,
        'invoice_line_id' => null,
        'invoice_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'ticket_number' => 'ticketNumber',
        'contact' => 'contact',
        'purchase_type' => 'purchaseType',
        'cost_price' => 'costPrice',
        'selling_price' => 'sellingPrice',
        'total_cost_price' => 'totalCostPrice',
        'invoice_cost_status_id' => 'invoiceCostStatusId',
        'surcharge_percentage' => 'surchargePercentage',
        'log_date' => 'logDate',
        'invoice_line_id' => 'invoiceLineId',
        'invoice_description' => 'invoiceDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'ticket_number' => 'setTicketNumber',
        'contact' => 'setContact',
        'purchase_type' => 'setPurchaseType',
        'cost_price' => 'setCostPrice',
        'selling_price' => 'setSellingPrice',
        'total_cost_price' => 'setTotalCostPrice',
        'invoice_cost_status_id' => 'setInvoiceCostStatusId',
        'surcharge_percentage' => 'setSurchargePercentage',
        'log_date' => 'setLogDate',
        'invoice_line_id' => 'setInvoiceLineId',
        'invoice_description' => 'setInvoiceDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'ticket_number' => 'getTicketNumber',
        'contact' => 'getContact',
        'purchase_type' => 'getPurchaseType',
        'cost_price' => 'getCostPrice',
        'selling_price' => 'getSellingPrice',
        'total_cost_price' => 'getTotalCostPrice',
        'invoice_cost_status_id' => 'getInvoiceCostStatusId',
        'surcharge_percentage' => 'getSurchargePercentage',
        'log_date' => 'getLogDate',
        'invoice_line_id' => 'getInvoiceLineId',
        'invoice_description' => 'getInvoiceDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ticket_number'] = isset($data['ticket_number']) ? $data['ticket_number'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['purchase_type'] = isset($data['purchase_type']) ? $data['purchase_type'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['selling_price'] = isset($data['selling_price']) ? $data['selling_price'] : null;
        $this->container['total_cost_price'] = isset($data['total_cost_price']) ? $data['total_cost_price'] : null;
        $this->container['invoice_cost_status_id'] = isset($data['invoice_cost_status_id']) ? $data['invoice_cost_status_id'] : null;
        $this->container['surcharge_percentage'] = isset($data['surcharge_percentage']) ? $data['surcharge_percentage'] : null;
        $this->container['log_date'] = isset($data['log_date']) ? $data['log_date'] : null;
        $this->container['invoice_line_id'] = isset($data['invoice_line_id']) ? $data['invoice_line_id'] : null;
        $this->container['invoice_description'] = isset($data['invoice_description']) ? $data['invoice_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of DeliveryTicketBooking.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of DeliveryTicketBooking.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ticket_number
     *
     * @return string
     */
    public function getTicketNumber()
    {
        return $this->container['ticket_number'];
    }

    /**
     * Sets ticket_number
     *
     * @param string $ticket_number The ticketNumber of DeliveryTicketBooking.
     *
     * @return $this
     */
    public function setTicketNumber($ticket_number)
    {
        $this->container['ticket_number'] = $ticket_number;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\CondensedContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\CondensedContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets purchase_type
     *
     * @return string
     */
    public function getPurchaseType()
    {
        return $this->container['purchase_type'];
    }

    /**
     * Sets purchase_type
     *
     * @param string $purchase_type The purchaseType of DeliveryTicketBooking.
     *
     * @return $this
     */
    public function setPurchaseType($purchase_type)
    {
        $this->container['purchase_type'] = $purchase_type;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return string
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param string $cost_price The cost price.
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets selling_price
     *
     * @return string
     */
    public function getSellingPrice()
    {
        return $this->container['selling_price'];
    }

    /**
     * Sets selling_price
     *
     * @param string $selling_price The selling price.
     *
     * @return $this
     */
    public function setSellingPrice($selling_price)
    {
        $this->container['selling_price'] = $selling_price;

        return $this;
    }

    /**
     * Gets total_cost_price
     *
     * @return string
     */
    public function getTotalCostPrice()
    {
        return $this->container['total_cost_price'];
    }

    /**
     * Sets total_cost_price
     *
     * @param string $total_cost_price Total cost price.
     *
     * @return $this
     */
    public function setTotalCostPrice($total_cost_price)
    {
        $this->container['total_cost_price'] = $total_cost_price;

        return $this;
    }

    /**
     * Gets invoice_cost_status_id
     *
     * @return string
     */
    public function getInvoiceCostStatusId()
    {
        return $this->container['invoice_cost_status_id'];
    }

    /**
     * Sets invoice_cost_status_id
     *
     * @param string $invoice_cost_status_id The invoice cost status ID
     *
     * @return $this
     */
    public function setInvoiceCostStatusId($invoice_cost_status_id)
    {
        $this->container['invoice_cost_status_id'] = $invoice_cost_status_id;

        return $this;
    }

    /**
     * Gets surcharge_percentage
     *
     * @return string
     */
    public function getSurchargePercentage()
    {
        return $this->container['surcharge_percentage'];
    }

    /**
     * Sets surcharge_percentage
     *
     * @param string $surcharge_percentage If set, the selling price already includes the surcharge.
     *
     * @return $this
     */
    public function setSurchargePercentage($surcharge_percentage)
    {
        $this->container['surcharge_percentage'] = $surcharge_percentage;

        return $this;
    }

    /**
     * Gets log_date
     *
     * @return string
     */
    public function getLogDate()
    {
        return $this->container['log_date'];
    }

    /**
     * Sets log_date
     *
     * @param string $log_date The log date of this booking in ATOM format.
     *
     * @return $this
     */
    public function setLogDate($log_date)
    {
        $this->container['log_date'] = $log_date;

        return $this;
    }

    /**
     * Gets invoice_line_id
     *
     * @return int
     */
    public function getInvoiceLineId()
    {
        return $this->container['invoice_line_id'];
    }

    /**
     * Sets invoice_line_id
     *
     * @param int $invoice_line_id The id of the invoice line the booking line is linked to.
     *
     * @return $this
     */
    public function setInvoiceLineId($invoice_line_id)
    {
        $this->container['invoice_line_id'] = $invoice_line_id;

        return $this;
    }

    /**
     * Gets invoice_description
     *
     * @return string
     */
    public function getInvoiceDescription()
    {
        return $this->container['invoice_description'];
    }

    /**
     * Sets invoice_description
     *
     * @param string $invoice_description The invoice description.
     *
     * @return $this
     */
    public function setInvoiceDescription($invoice_description)
    {
        $this->container['invoice_description'] = $invoice_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


