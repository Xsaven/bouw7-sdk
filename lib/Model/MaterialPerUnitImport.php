<?php
/**
 * MaterialPerUnitImport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MaterialPerUnitImport Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialPerUnitImport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialPerUnitImport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'include' => 'bool',
        'material_group_name' => 'string',
        'article_number' => 'string',
        'material_name' => 'string',
        'material_information' => 'string',
        'material_unit_name' => 'string',
        'cost_price' => 'string',
        'selling_price' => 'string',
        'ean_code' => 'string',
        'gl_account_code' => 'string',
        'delivery_time_in_days' => 'string',
        'width' => 'string',
        'height' => 'string',
        'depth' => 'string',
        'radius' => 'string',
        'top_radius' => 'string',
        'bottom_radius' => 'string',
        'inner_radius' => 'string',
        'outer_radius' => 'string',
        'unit' => 'int',
        'weight' => 'string',
        'type' => 'int',
        'conversion_factor' => 'string',
        'is_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'include' => null,
        'material_group_name' => null,
        'article_number' => null,
        'material_name' => null,
        'material_information' => null,
        'material_unit_name' => null,
        'cost_price' => null,
        'selling_price' => null,
        'ean_code' => null,
        'gl_account_code' => null,
        'delivery_time_in_days' => null,
        'width' => null,
        'height' => null,
        'depth' => null,
        'radius' => null,
        'top_radius' => null,
        'bottom_radius' => null,
        'inner_radius' => null,
        'outer_radius' => null,
        'unit' => null,
        'weight' => null,
        'type' => null,
        'conversion_factor' => null,
        'is_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'include' => 'include',
        'material_group_name' => 'materialGroupName',
        'article_number' => 'articleNumber',
        'material_name' => 'materialName',
        'material_information' => 'materialInformation',
        'material_unit_name' => 'materialUnitName',
        'cost_price' => 'costPrice',
        'selling_price' => 'sellingPrice',
        'ean_code' => 'eanCode',
        'gl_account_code' => 'glAccountCode',
        'delivery_time_in_days' => 'deliveryTimeInDays',
        'width' => 'width',
        'height' => 'height',
        'depth' => 'depth',
        'radius' => 'radius',
        'top_radius' => 'topRadius',
        'bottom_radius' => 'bottomRadius',
        'inner_radius' => 'innerRadius',
        'outer_radius' => 'outerRadius',
        'unit' => 'unit',
        'weight' => 'weight',
        'type' => 'type',
        'conversion_factor' => 'conversionFactor',
        'is_active' => 'isActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'include' => 'setInclude',
        'material_group_name' => 'setMaterialGroupName',
        'article_number' => 'setArticleNumber',
        'material_name' => 'setMaterialName',
        'material_information' => 'setMaterialInformation',
        'material_unit_name' => 'setMaterialUnitName',
        'cost_price' => 'setCostPrice',
        'selling_price' => 'setSellingPrice',
        'ean_code' => 'setEanCode',
        'gl_account_code' => 'setGlAccountCode',
        'delivery_time_in_days' => 'setDeliveryTimeInDays',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'depth' => 'setDepth',
        'radius' => 'setRadius',
        'top_radius' => 'setTopRadius',
        'bottom_radius' => 'setBottomRadius',
        'inner_radius' => 'setInnerRadius',
        'outer_radius' => 'setOuterRadius',
        'unit' => 'setUnit',
        'weight' => 'setWeight',
        'type' => 'setType',
        'conversion_factor' => 'setConversionFactor',
        'is_active' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'include' => 'getInclude',
        'material_group_name' => 'getMaterialGroupName',
        'article_number' => 'getArticleNumber',
        'material_name' => 'getMaterialName',
        'material_information' => 'getMaterialInformation',
        'material_unit_name' => 'getMaterialUnitName',
        'cost_price' => 'getCostPrice',
        'selling_price' => 'getSellingPrice',
        'ean_code' => 'getEanCode',
        'gl_account_code' => 'getGlAccountCode',
        'delivery_time_in_days' => 'getDeliveryTimeInDays',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'depth' => 'getDepth',
        'radius' => 'getRadius',
        'top_radius' => 'getTopRadius',
        'bottom_radius' => 'getBottomRadius',
        'inner_radius' => 'getInnerRadius',
        'outer_radius' => 'getOuterRadius',
        'unit' => 'getUnit',
        'weight' => 'getWeight',
        'type' => 'getType',
        'conversion_factor' => 'getConversionFactor',
        'is_active' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['include'] = isset($data['include']) ? $data['include'] : null;
        $this->container['material_group_name'] = isset($data['material_group_name']) ? $data['material_group_name'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['material_name'] = isset($data['material_name']) ? $data['material_name'] : null;
        $this->container['material_information'] = isset($data['material_information']) ? $data['material_information'] : null;
        $this->container['material_unit_name'] = isset($data['material_unit_name']) ? $data['material_unit_name'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['selling_price'] = isset($data['selling_price']) ? $data['selling_price'] : null;
        $this->container['ean_code'] = isset($data['ean_code']) ? $data['ean_code'] : null;
        $this->container['gl_account_code'] = isset($data['gl_account_code']) ? $data['gl_account_code'] : null;
        $this->container['delivery_time_in_days'] = isset($data['delivery_time_in_days']) ? $data['delivery_time_in_days'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['radius'] = isset($data['radius']) ? $data['radius'] : null;
        $this->container['top_radius'] = isset($data['top_radius']) ? $data['top_radius'] : null;
        $this->container['bottom_radius'] = isset($data['bottom_radius']) ? $data['bottom_radius'] : null;
        $this->container['inner_radius'] = isset($data['inner_radius']) ? $data['inner_radius'] : null;
        $this->container['outer_radius'] = isset($data['outer_radius']) ? $data['outer_radius'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['conversion_factor'] = isset($data['conversion_factor']) ? $data['conversion_factor'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets include
     *
     * @return bool
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param bool $include Whether this record will be included in the import.
     *
     * @return $this
     */
    public function setInclude($include)
    {
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets material_group_name
     *
     * @return string
     */
    public function getMaterialGroupName()
    {
        return $this->container['material_group_name'];
    }

    /**
     * Sets material_group_name
     *
     * @param string $material_group_name The name of the associated material group.
     *
     * @return $this
     */
    public function setMaterialGroupName($material_group_name)
    {
        $this->container['material_group_name'] = $material_group_name;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number The article number.
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets material_name
     *
     * @return string
     */
    public function getMaterialName()
    {
        return $this->container['material_name'];
    }

    /**
     * Sets material_name
     *
     * @param string $material_name The name of the associated material.
     *
     * @return $this
     */
    public function setMaterialName($material_name)
    {
        $this->container['material_name'] = $material_name;

        return $this;
    }

    /**
     * Gets material_information
     *
     * @return string
     */
    public function getMaterialInformation()
    {
        return $this->container['material_information'];
    }

    /**
     * Sets material_information
     *
     * @param string $material_information The information of the associated material.
     *
     * @return $this
     */
    public function setMaterialInformation($material_information)
    {
        $this->container['material_information'] = $material_information;

        return $this;
    }

    /**
     * Gets material_unit_name
     *
     * @return string
     */
    public function getMaterialUnitName()
    {
        return $this->container['material_unit_name'];
    }

    /**
     * Sets material_unit_name
     *
     * @param string $material_unit_name The name of the associated material unit.
     *
     * @return $this
     */
    public function setMaterialUnitName($material_unit_name)
    {
        $this->container['material_unit_name'] = $material_unit_name;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return string
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param string $cost_price The cost price.
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets selling_price
     *
     * @return string
     */
    public function getSellingPrice()
    {
        return $this->container['selling_price'];
    }

    /**
     * Sets selling_price
     *
     * @param string $selling_price The selling price.
     *
     * @return $this
     */
    public function setSellingPrice($selling_price)
    {
        $this->container['selling_price'] = $selling_price;

        return $this;
    }

    /**
     * Gets ean_code
     *
     * @return string
     */
    public function getEanCode()
    {
        return $this->container['ean_code'];
    }

    /**
     * Sets ean_code
     *
     * @param string $ean_code The ean code.
     *
     * @return $this
     */
    public function setEanCode($ean_code)
    {
        $this->container['ean_code'] = $ean_code;

        return $this;
    }

    /**
     * Gets gl_account_code
     *
     * @return string
     */
    public function getGlAccountCode()
    {
        return $this->container['gl_account_code'];
    }

    /**
     * Sets gl_account_code
     *
     * @param string $gl_account_code The gl account code of the associated material per division.
     *
     * @return $this
     */
    public function setGlAccountCode($gl_account_code)
    {
        $this->container['gl_account_code'] = $gl_account_code;

        return $this;
    }

    /**
     * Gets delivery_time_in_days
     *
     * @return string
     */
    public function getDeliveryTimeInDays()
    {
        return $this->container['delivery_time_in_days'];
    }

    /**
     * Sets delivery_time_in_days
     *
     * @param string $delivery_time_in_days The delivery time in days.
     *
     * @return $this
     */
    public function setDeliveryTimeInDays($delivery_time_in_days)
    {
        $this->container['delivery_time_in_days'] = $delivery_time_in_days;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width The width of the material in the associated unit.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height The height of the material in the associated unit.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return string
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param string $depth The depth of the material in the associated unit.
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return string
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param string $radius The radius of the material in the associated unit.
     *
     * @return $this
     */
    public function setRadius($radius)
    {
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets top_radius
     *
     * @return string
     */
    public function getTopRadius()
    {
        return $this->container['top_radius'];
    }

    /**
     * Sets top_radius
     *
     * @param string $top_radius The top radius of the material in the associated unit.
     *
     * @return $this
     */
    public function setTopRadius($top_radius)
    {
        $this->container['top_radius'] = $top_radius;

        return $this;
    }

    /**
     * Gets bottom_radius
     *
     * @return string
     */
    public function getBottomRadius()
    {
        return $this->container['bottom_radius'];
    }

    /**
     * Sets bottom_radius
     *
     * @param string $bottom_radius The bottom radius of the material in the associated unit.
     *
     * @return $this
     */
    public function setBottomRadius($bottom_radius)
    {
        $this->container['bottom_radius'] = $bottom_radius;

        return $this;
    }

    /**
     * Gets inner_radius
     *
     * @return string
     */
    public function getInnerRadius()
    {
        return $this->container['inner_radius'];
    }

    /**
     * Sets inner_radius
     *
     * @param string $inner_radius The inner radius of the material in the associated unit.
     *
     * @return $this
     */
    public function setInnerRadius($inner_radius)
    {
        $this->container['inner_radius'] = $inner_radius;

        return $this;
    }

    /**
     * Gets outer_radius
     *
     * @return string
     */
    public function getOuterRadius()
    {
        return $this->container['outer_radius'];
    }

    /**
     * Sets outer_radius
     *
     * @param string $outer_radius The outer radius of the material in the associated unit.
     *
     * @return $this
     */
    public function setOuterRadius($outer_radius)
    {
        $this->container['outer_radius'] = $outer_radius;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return int
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param int $unit The unit of the form factor.
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight The weight of the material in grams.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The type of the form factor.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets conversion_factor
     *
     * @return string
     */
    public function getConversionFactor()
    {
        return $this->container['conversion_factor'];
    }

    /**
     * Sets conversion_factor
     *
     * @param string $conversion_factor The conversion factor.
     *
     * @return $this
     */
    public function setConversionFactor($conversion_factor)
    {
        $this->container['conversion_factor'] = $conversion_factor;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Whether the material is active.
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


