<?php
/**
 * ApprovalTemplateWorkflowListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApprovalTemplateWorkflowListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApprovalTemplateWorkflowListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApprovalTemplateWorkflowListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'is_restricted' => 'bool',
        'approver1' => '\Swagger\Client\Model\NestedApprovalTemplateApproverListItem',
        'approver2' => '\Swagger\Client\Model\NestedApprovalTemplateApproverListItem',
        'approver3' => '\Swagger\Client\Model\NestedApprovalTemplateApproverListItem',
        'approver4' => '\Swagger\Client\Model\NestedApprovalTemplateApproverListItem',
        'approver5' => '\Swagger\Client\Model\NestedApprovalTemplateApproverListItem',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'is_restricted' => null,
        'approver1' => null,
        'approver2' => null,
        'approver3' => null,
        'approver4' => null,
        'approver5' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'is_restricted' => 'isRestricted',
        'approver1' => 'approver1',
        'approver2' => 'approver2',
        'approver3' => 'approver3',
        'approver4' => 'approver4',
        'approver5' => 'approver5',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'is_restricted' => 'setIsRestricted',
        'approver1' => 'setApprover1',
        'approver2' => 'setApprover2',
        'approver3' => 'setApprover3',
        'approver4' => 'setApprover4',
        'approver5' => 'setApprover5',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'is_restricted' => 'getIsRestricted',
        'approver1' => 'getApprover1',
        'approver2' => 'getApprover2',
        'approver3' => 'getApprover3',
        'approver4' => 'getApprover4',
        'approver5' => 'getApprover5',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_restricted'] = isset($data['is_restricted']) ? $data['is_restricted'] : null;
        $this->container['approver1'] = isset($data['approver1']) ? $data['approver1'] : null;
        $this->container['approver2'] = isset($data['approver2']) ? $data['approver2'] : null;
        $this->container['approver3'] = isset($data['approver3']) ? $data['approver3'] : null;
        $this->container['approver4'] = isset($data['approver4']) ? $data['approver4'] : null;
        $this->container['approver5'] = isset($data['approver5']) ? $data['approver5'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of this workflow.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this workflow.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_restricted
     *
     * @return bool
     */
    public function getIsRestricted()
    {
        return $this->container['is_restricted'];
    }

    /**
     * Sets is_restricted
     *
     * @param bool $is_restricted Whether the workflow is restricted.
     *
     * @return $this
     */
    public function setIsRestricted($is_restricted)
    {
        $this->container['is_restricted'] = $is_restricted;

        return $this;
    }

    /**
     * Gets approver1
     *
     * @return \Swagger\Client\Model\NestedApprovalTemplateApproverListItem
     */
    public function getApprover1()
    {
        return $this->container['approver1'];
    }

    /**
     * Sets approver1
     *
     * @param \Swagger\Client\Model\NestedApprovalTemplateApproverListItem $approver1 approver1
     *
     * @return $this
     */
    public function setApprover1($approver1)
    {
        $this->container['approver1'] = $approver1;

        return $this;
    }

    /**
     * Gets approver2
     *
     * @return \Swagger\Client\Model\NestedApprovalTemplateApproverListItem
     */
    public function getApprover2()
    {
        return $this->container['approver2'];
    }

    /**
     * Sets approver2
     *
     * @param \Swagger\Client\Model\NestedApprovalTemplateApproverListItem $approver2 approver2
     *
     * @return $this
     */
    public function setApprover2($approver2)
    {
        $this->container['approver2'] = $approver2;

        return $this;
    }

    /**
     * Gets approver3
     *
     * @return \Swagger\Client\Model\NestedApprovalTemplateApproverListItem
     */
    public function getApprover3()
    {
        return $this->container['approver3'];
    }

    /**
     * Sets approver3
     *
     * @param \Swagger\Client\Model\NestedApprovalTemplateApproverListItem $approver3 approver3
     *
     * @return $this
     */
    public function setApprover3($approver3)
    {
        $this->container['approver3'] = $approver3;

        return $this;
    }

    /**
     * Gets approver4
     *
     * @return \Swagger\Client\Model\NestedApprovalTemplateApproverListItem
     */
    public function getApprover4()
    {
        return $this->container['approver4'];
    }

    /**
     * Sets approver4
     *
     * @param \Swagger\Client\Model\NestedApprovalTemplateApproverListItem $approver4 approver4
     *
     * @return $this
     */
    public function setApprover4($approver4)
    {
        $this->container['approver4'] = $approver4;

        return $this;
    }

    /**
     * Gets approver5
     *
     * @return \Swagger\Client\Model\NestedApprovalTemplateApproverListItem
     */
    public function getApprover5()
    {
        return $this->container['approver5'];
    }

    /**
     * Sets approver5
     *
     * @param \Swagger\Client\Model\NestedApprovalTemplateApproverListItem $approver5 approver5
     *
     * @return $this
     */
    public function setApprover5($approver5)
    {
        $this->container['approver5'] = $approver5;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


