<?php
/**
 * SubcontractorContract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubcontractorContract Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubcontractorContract implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubcontractorContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'subcontractor' => '\Swagger\Client\Model\CondensedContact',
        'status' => 'int',
        'type' => 'int',
        'start_date' => 'string',
        'start_date_text' => 'string',
        'expected_completion_date' => 'string',
        'expected_completion_date_text' => 'string',
        'called_receipts' => 'int',
        'log_entries' => 'int',
        'contract_terms' => '\Swagger\Client\Model\ContractTerm[]',
        'approval' => '\Swagger\Client\Model\Approval',
        'one_two_build_communication_id' => 'int',
        'project' => '\Swagger\Client\Model\CondensedProject',
        'number' => 'string',
        'contract_number' => 'string',
        'name' => 'string',
        'description' => 'string',
        'payment_agreement' => 'string',
        'linked_delivery_ticket' => '\Swagger\Client\Model\CondensedDeliveryTicket',
        'project_security_link' => '\Swagger\Client\Model\CondensedProjectSecurityLink',
        'cost' => 'string',
        'mail_sent' => 'bool',
        'mail_sent_at' => 'string',
        'mail_sent_by' => 'string',
        'accepted_at' => 'string',
        'denied_at' => 'string',
        'language' => 'string',
        'create_delivery_ticket' => 'bool',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'subcontractor' => null,
        'status' => null,
        'type' => null,
        'start_date' => null,
        'start_date_text' => null,
        'expected_completion_date' => null,
        'expected_completion_date_text' => null,
        'called_receipts' => null,
        'log_entries' => null,
        'contract_terms' => null,
        'approval' => null,
        'one_two_build_communication_id' => null,
        'project' => null,
        'number' => null,
        'contract_number' => null,
        'name' => null,
        'description' => null,
        'payment_agreement' => null,
        'linked_delivery_ticket' => null,
        'project_security_link' => null,
        'cost' => null,
        'mail_sent' => null,
        'mail_sent_at' => null,
        'mail_sent_by' => null,
        'accepted_at' => null,
        'denied_at' => null,
        'language' => null,
        'create_delivery_ticket' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'subcontractor' => 'subcontractor',
        'status' => 'status',
        'type' => 'type',
        'start_date' => 'startDate',
        'start_date_text' => 'startDateText',
        'expected_completion_date' => 'expectedCompletionDate',
        'expected_completion_date_text' => 'expectedCompletionDateText',
        'called_receipts' => 'calledReceipts',
        'log_entries' => 'logEntries',
        'contract_terms' => 'contractTerms',
        'approval' => 'approval',
        'one_two_build_communication_id' => 'oneTwoBuildCommunicationId',
        'project' => 'project',
        'number' => 'number',
        'contract_number' => 'contractNumber',
        'name' => 'name',
        'description' => 'description',
        'payment_agreement' => 'paymentAgreement',
        'linked_delivery_ticket' => 'linkedDeliveryTicket',
        'project_security_link' => 'projectSecurityLink',
        'cost' => 'cost',
        'mail_sent' => 'mailSent',
        'mail_sent_at' => 'mailSentAt',
        'mail_sent_by' => 'mailSentBy',
        'accepted_at' => 'acceptedAt',
        'denied_at' => 'deniedAt',
        'language' => 'language',
        'create_delivery_ticket' => 'createDeliveryTicket',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'subcontractor' => 'setSubcontractor',
        'status' => 'setStatus',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'start_date_text' => 'setStartDateText',
        'expected_completion_date' => 'setExpectedCompletionDate',
        'expected_completion_date_text' => 'setExpectedCompletionDateText',
        'called_receipts' => 'setCalledReceipts',
        'log_entries' => 'setLogEntries',
        'contract_terms' => 'setContractTerms',
        'approval' => 'setApproval',
        'one_two_build_communication_id' => 'setOneTwoBuildCommunicationId',
        'project' => 'setProject',
        'number' => 'setNumber',
        'contract_number' => 'setContractNumber',
        'name' => 'setName',
        'description' => 'setDescription',
        'payment_agreement' => 'setPaymentAgreement',
        'linked_delivery_ticket' => 'setLinkedDeliveryTicket',
        'project_security_link' => 'setProjectSecurityLink',
        'cost' => 'setCost',
        'mail_sent' => 'setMailSent',
        'mail_sent_at' => 'setMailSentAt',
        'mail_sent_by' => 'setMailSentBy',
        'accepted_at' => 'setAcceptedAt',
        'denied_at' => 'setDeniedAt',
        'language' => 'setLanguage',
        'create_delivery_ticket' => 'setCreateDeliveryTicket',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'subcontractor' => 'getSubcontractor',
        'status' => 'getStatus',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'start_date_text' => 'getStartDateText',
        'expected_completion_date' => 'getExpectedCompletionDate',
        'expected_completion_date_text' => 'getExpectedCompletionDateText',
        'called_receipts' => 'getCalledReceipts',
        'log_entries' => 'getLogEntries',
        'contract_terms' => 'getContractTerms',
        'approval' => 'getApproval',
        'one_two_build_communication_id' => 'getOneTwoBuildCommunicationId',
        'project' => 'getProject',
        'number' => 'getNumber',
        'contract_number' => 'getContractNumber',
        'name' => 'getName',
        'description' => 'getDescription',
        'payment_agreement' => 'getPaymentAgreement',
        'linked_delivery_ticket' => 'getLinkedDeliveryTicket',
        'project_security_link' => 'getProjectSecurityLink',
        'cost' => 'getCost',
        'mail_sent' => 'getMailSent',
        'mail_sent_at' => 'getMailSentAt',
        'mail_sent_by' => 'getMailSentBy',
        'accepted_at' => 'getAcceptedAt',
        'denied_at' => 'getDeniedAt',
        'language' => 'getLanguage',
        'create_delivery_ticket' => 'getCreateDeliveryTicket',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['subcontractor'] = isset($data['subcontractor']) ? $data['subcontractor'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_date_text'] = isset($data['start_date_text']) ? $data['start_date_text'] : null;
        $this->container['expected_completion_date'] = isset($data['expected_completion_date']) ? $data['expected_completion_date'] : null;
        $this->container['expected_completion_date_text'] = isset($data['expected_completion_date_text']) ? $data['expected_completion_date_text'] : null;
        $this->container['called_receipts'] = isset($data['called_receipts']) ? $data['called_receipts'] : null;
        $this->container['log_entries'] = isset($data['log_entries']) ? $data['log_entries'] : null;
        $this->container['contract_terms'] = isset($data['contract_terms']) ? $data['contract_terms'] : null;
        $this->container['approval'] = isset($data['approval']) ? $data['approval'] : null;
        $this->container['one_two_build_communication_id'] = isset($data['one_two_build_communication_id']) ? $data['one_two_build_communication_id'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['contract_number'] = isset($data['contract_number']) ? $data['contract_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['payment_agreement'] = isset($data['payment_agreement']) ? $data['payment_agreement'] : null;
        $this->container['linked_delivery_ticket'] = isset($data['linked_delivery_ticket']) ? $data['linked_delivery_ticket'] : null;
        $this->container['project_security_link'] = isset($data['project_security_link']) ? $data['project_security_link'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['mail_sent'] = isset($data['mail_sent']) ? $data['mail_sent'] : null;
        $this->container['mail_sent_at'] = isset($data['mail_sent_at']) ? $data['mail_sent_at'] : null;
        $this->container['mail_sent_by'] = isset($data['mail_sent_by']) ? $data['mail_sent_by'] : null;
        $this->container['accepted_at'] = isset($data['accepted_at']) ? $data['accepted_at'] : null;
        $this->container['denied_at'] = isset($data['denied_at']) ? $data['denied_at'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['create_delivery_ticket'] = isset($data['create_delivery_ticket']) ? $data['create_delivery_ticket'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subcontractor'] === null) {
            $invalidProperties[] = "'subcontractor' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['project'] === null) {
            $invalidProperties[] = "'project' can't be null";
        }
        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the subcontractor contract.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets subcontractor
     *
     * @return \Swagger\Client\Model\CondensedContact
     */
    public function getSubcontractor()
    {
        return $this->container['subcontractor'];
    }

    /**
     * Sets subcontractor
     *
     * @param \Swagger\Client\Model\CondensedContact $subcontractor subcontractor
     *
     * @return $this
     */
    public function setSubcontractor($subcontractor)
    {
        $this->container['subcontractor'] = $subcontractor;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Status of the contract.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Type of the contract.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date The starting date of the subcontractor contract.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_date_text
     *
     * @return string
     */
    public function getStartDateText()
    {
        return $this->container['start_date_text'];
    }

    /**
     * Sets start_date_text
     *
     * @param string $start_date_text The starting date text of the subcontractor contract.
     *
     * @return $this
     */
    public function setStartDateText($start_date_text)
    {
        $this->container['start_date_text'] = $start_date_text;

        return $this;
    }

    /**
     * Gets expected_completion_date
     *
     * @return string
     */
    public function getExpectedCompletionDate()
    {
        return $this->container['expected_completion_date'];
    }

    /**
     * Sets expected_completion_date
     *
     * @param string $expected_completion_date The expected completion date of the subcontractor contract.
     *
     * @return $this
     */
    public function setExpectedCompletionDate($expected_completion_date)
    {
        $this->container['expected_completion_date'] = $expected_completion_date;

        return $this;
    }

    /**
     * Gets expected_completion_date_text
     *
     * @return string
     */
    public function getExpectedCompletionDateText()
    {
        return $this->container['expected_completion_date_text'];
    }

    /**
     * Sets expected_completion_date_text
     *
     * @param string $expected_completion_date_text The expected completion date text of the subcontractor contract.
     *
     * @return $this
     */
    public function setExpectedCompletionDateText($expected_completion_date_text)
    {
        $this->container['expected_completion_date_text'] = $expected_completion_date_text;

        return $this;
    }

    /**
     * Gets called_receipts
     *
     * @return int
     */
    public function getCalledReceipts()
    {
        return $this->container['called_receipts'];
    }

    /**
     * Sets called_receipts
     *
     * @param int $called_receipts The amount of called receipt documents.
     *
     * @return $this
     */
    public function setCalledReceipts($called_receipts)
    {
        $this->container['called_receipts'] = $called_receipts;

        return $this;
    }

    /**
     * Gets log_entries
     *
     * @return int
     */
    public function getLogEntries()
    {
        return $this->container['log_entries'];
    }

    /**
     * Sets log_entries
     *
     * @param int $log_entries The amount of log entries.
     *
     * @return $this
     */
    public function setLogEntries($log_entries)
    {
        $this->container['log_entries'] = $log_entries;

        return $this;
    }

    /**
     * Gets contract_terms
     *
     * @return \Swagger\Client\Model\ContractTerm[]
     */
    public function getContractTerms()
    {
        return $this->container['contract_terms'];
    }

    /**
     * Sets contract_terms
     *
     * @param \Swagger\Client\Model\ContractTerm[] $contract_terms Contains the contract terms of this contract.
     *
     * @return $this
     */
    public function setContractTerms($contract_terms)
    {
        $this->container['contract_terms'] = $contract_terms;

        return $this;
    }

    /**
     * Gets approval
     *
     * @return \Swagger\Client\Model\Approval
     */
    public function getApproval()
    {
        return $this->container['approval'];
    }

    /**
     * Sets approval
     *
     * @param \Swagger\Client\Model\Approval $approval approval
     *
     * @return $this
     */
    public function setApproval($approval)
    {
        $this->container['approval'] = $approval;

        return $this;
    }

    /**
     * Gets one_two_build_communication_id
     *
     * @return int
     */
    public function getOneTwoBuildCommunicationId()
    {
        return $this->container['one_two_build_communication_id'];
    }

    /**
     * Sets one_two_build_communication_id
     *
     * @param int $one_two_build_communication_id The ID used by 12Build for this contract
     *
     * @return $this
     */
    public function setOneTwoBuildCommunicationId($one_two_build_communication_id)
    {
        $this->container['one_two_build_communication_id'] = $one_two_build_communication_id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\CondensedProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\CondensedProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Number of the contract.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets contract_number
     *
     * @return string
     */
    public function getContractNumber()
    {
        return $this->container['contract_number'];
    }

    /**
     * Sets contract_number
     *
     * @param string $contract_number The contract number of the contract.
     *
     * @return $this
     */
    public function setContractNumber($contract_number)
    {
        $this->container['contract_number'] = $contract_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the contract.
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SubcontractorContract., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the contract.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payment_agreement
     *
     * @return string
     */
    public function getPaymentAgreement()
    {
        return $this->container['payment_agreement'];
    }

    /**
     * Sets payment_agreement
     *
     * @param string $payment_agreement The payment agreement of the contract.
     *
     * @return $this
     */
    public function setPaymentAgreement($payment_agreement)
    {
        $this->container['payment_agreement'] = $payment_agreement;

        return $this;
    }

    /**
     * Gets linked_delivery_ticket
     *
     * @return \Swagger\Client\Model\CondensedDeliveryTicket
     */
    public function getLinkedDeliveryTicket()
    {
        return $this->container['linked_delivery_ticket'];
    }

    /**
     * Sets linked_delivery_ticket
     *
     * @param \Swagger\Client\Model\CondensedDeliveryTicket $linked_delivery_ticket linked_delivery_ticket
     *
     * @return $this
     */
    public function setLinkedDeliveryTicket($linked_delivery_ticket)
    {
        $this->container['linked_delivery_ticket'] = $linked_delivery_ticket;

        return $this;
    }

    /**
     * Gets project_security_link
     *
     * @return \Swagger\Client\Model\CondensedProjectSecurityLink
     */
    public function getProjectSecurityLink()
    {
        return $this->container['project_security_link'];
    }

    /**
     * Sets project_security_link
     *
     * @param \Swagger\Client\Model\CondensedProjectSecurityLink $project_security_link project_security_link
     *
     * @return $this
     */
    public function setProjectSecurityLink($project_security_link)
    {
        $this->container['project_security_link'] = $project_security_link;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string $cost The cost of the contract.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets mail_sent
     *
     * @return bool
     */
    public function getMailSent()
    {
        return $this->container['mail_sent'];
    }

    /**
     * Sets mail_sent
     *
     * @param bool $mail_sent Flag to indicate if mail was sent.
     *
     * @return $this
     */
    public function setMailSent($mail_sent)
    {
        $this->container['mail_sent'] = $mail_sent;

        return $this;
    }

    /**
     * Gets mail_sent_at
     *
     * @return string
     */
    public function getMailSentAt()
    {
        return $this->container['mail_sent_at'];
    }

    /**
     * Sets mail_sent_at
     *
     * @param string $mail_sent_at The date the contract was sent.
     *
     * @return $this
     */
    public function setMailSentAt($mail_sent_at)
    {
        $this->container['mail_sent_at'] = $mail_sent_at;

        return $this;
    }

    /**
     * Gets mail_sent_by
     *
     * @return string
     */
    public function getMailSentBy()
    {
        return $this->container['mail_sent_by'];
    }

    /**
     * Sets mail_sent_by
     *
     * @param string $mail_sent_by The user that sent the email.
     *
     * @return $this
     */
    public function setMailSentBy($mail_sent_by)
    {
        $this->container['mail_sent_by'] = $mail_sent_by;

        return $this;
    }

    /**
     * Gets accepted_at
     *
     * @return string
     */
    public function getAcceptedAt()
    {
        return $this->container['accepted_at'];
    }

    /**
     * Sets accepted_at
     *
     * @param string $accepted_at Datetime when contract was accepted.
     *
     * @return $this
     */
    public function setAcceptedAt($accepted_at)
    {
        $this->container['accepted_at'] = $accepted_at;

        return $this;
    }

    /**
     * Gets denied_at
     *
     * @return string
     */
    public function getDeniedAt()
    {
        return $this->container['denied_at'];
    }

    /**
     * Sets denied_at
     *
     * @param string $denied_at Datetime when contract was denied.
     *
     * @return $this
     */
    public function setDeniedAt($denied_at)
    {
        $this->container['denied_at'] = $denied_at;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The locale used by this contract, e.g.: nl-NL.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets create_delivery_ticket
     *
     * @return bool
     */
    public function getCreateDeliveryTicket()
    {
        return $this->container['create_delivery_ticket'];
    }

    /**
     * Sets create_delivery_ticket
     *
     * @param bool $create_delivery_ticket Whether or not to create a delivery ticket.
     *
     * @return $this
     */
    public function setCreateDeliveryTicket($create_delivery_ticket)
    {
        $this->container['create_delivery_ticket'] = $create_delivery_ticket;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


