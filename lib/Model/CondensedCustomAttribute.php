<?php
/**
 * CondensedCustomAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CondensedCustomAttribute Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CondensedCustomAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CondensedCustomAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'field_type' => 'string',
        'field_type_id' => 'int',
        'is_required' => 'bool',
        'is_read_only' => 'bool',
        'is_displayed_on_invoice' => 'bool',
        'is_displayed_on_completion' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'field_type' => null,
        'field_type_id' => null,
        'is_required' => null,
        'is_read_only' => null,
        'is_displayed_on_invoice' => null,
        'is_displayed_on_completion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'field_type' => 'fieldType',
        'field_type_id' => 'fieldTypeId',
        'is_required' => 'isRequired',
        'is_read_only' => 'isReadOnly',
        'is_displayed_on_invoice' => 'isDisplayedOnInvoice',
        'is_displayed_on_completion' => 'isDisplayedOnCompletion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'field_type' => 'setFieldType',
        'field_type_id' => 'setFieldTypeId',
        'is_required' => 'setIsRequired',
        'is_read_only' => 'setIsReadOnly',
        'is_displayed_on_invoice' => 'setIsDisplayedOnInvoice',
        'is_displayed_on_completion' => 'setIsDisplayedOnCompletion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'field_type' => 'getFieldType',
        'field_type_id' => 'getFieldTypeId',
        'is_required' => 'getIsRequired',
        'is_read_only' => 'getIsReadOnly',
        'is_displayed_on_invoice' => 'getIsDisplayedOnInvoice',
        'is_displayed_on_completion' => 'getIsDisplayedOnCompletion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['field_type_id'] = isset($data['field_type_id']) ? $data['field_type_id'] : null;
        $this->container['is_required'] = isset($data['is_required']) ? $data['is_required'] : null;
        $this->container['is_read_only'] = isset($data['is_read_only']) ? $data['is_read_only'] : null;
        $this->container['is_displayed_on_invoice'] = isset($data['is_displayed_on_invoice']) ? $data['is_displayed_on_invoice'] : null;
        $this->container['is_displayed_on_completion'] = isset($data['is_displayed_on_completion']) ? $data['is_displayed_on_completion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the custom attribute.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the custom attribute.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type The I18N key of the field type.
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets field_type_id
     *
     * @return int
     */
    public function getFieldTypeId()
    {
        return $this->container['field_type_id'];
    }

    /**
     * Sets field_type_id
     *
     * @param int $field_type_id The ID of the field type.
     *
     * @return $this
     */
    public function setFieldTypeId($field_type_id)
    {
        $this->container['field_type_id'] = $field_type_id;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool $is_required Whether the custom attribute is a required field.
     *
     * @return $this
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets is_read_only
     *
     * @return bool
     */
    public function getIsReadOnly()
    {
        return $this->container['is_read_only'];
    }

    /**
     * Sets is_read_only
     *
     * @param bool $is_read_only Whether the custom attribute is a read-only field.
     *
     * @return $this
     */
    public function setIsReadOnly($is_read_only)
    {
        $this->container['is_read_only'] = $is_read_only;

        return $this;
    }

    /**
     * Gets is_displayed_on_invoice
     *
     * @return bool
     */
    public function getIsDisplayedOnInvoice()
    {
        return $this->container['is_displayed_on_invoice'];
    }

    /**
     * Sets is_displayed_on_invoice
     *
     * @param bool $is_displayed_on_invoice Whether the custom attribute is displayed on an invoice document.
     *
     * @return $this
     */
    public function setIsDisplayedOnInvoice($is_displayed_on_invoice)
    {
        $this->container['is_displayed_on_invoice'] = $is_displayed_on_invoice;

        return $this;
    }

    /**
     * Gets is_displayed_on_completion
     *
     * @return bool
     */
    public function getIsDisplayedOnCompletion()
    {
        return $this->container['is_displayed_on_completion'];
    }

    /**
     * Sets is_displayed_on_completion
     *
     * @param bool $is_displayed_on_completion Whether the custom attribute is displayed on a completion document.
     *
     * @return $this
     */
    public function setIsDisplayedOnCompletion($is_displayed_on_completion)
    {
        $this->container['is_displayed_on_completion'] = $is_displayed_on_completion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


