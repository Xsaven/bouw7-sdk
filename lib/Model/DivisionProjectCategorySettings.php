<?php
/**
 * DivisionProjectCategorySettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DivisionProjectCategorySettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DivisionProjectCategorySettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DivisionProjectCategorySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'division_id' => 'int',
        'gl_account_code_general_costs' => 'string',
        'gl_account_code_general_costs_debit' => 'string',
        'gl_account_code_general_costs_closing' => 'string',
        'cost_center_general_costs' => 'string',
        'cost_center_general_costs_debit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'division_id' => null,
        'gl_account_code_general_costs' => null,
        'gl_account_code_general_costs_debit' => null,
        'gl_account_code_general_costs_closing' => null,
        'cost_center_general_costs' => null,
        'cost_center_general_costs_debit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'division_id' => 'divisionId',
        'gl_account_code_general_costs' => 'glAccountCodeGeneralCosts',
        'gl_account_code_general_costs_debit' => 'glAccountCodeGeneralCostsDebit',
        'gl_account_code_general_costs_closing' => 'glAccountCodeGeneralCostsClosing',
        'cost_center_general_costs' => 'costCenterGeneralCosts',
        'cost_center_general_costs_debit' => 'costCenterGeneralCostsDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'division_id' => 'setDivisionId',
        'gl_account_code_general_costs' => 'setGlAccountCodeGeneralCosts',
        'gl_account_code_general_costs_debit' => 'setGlAccountCodeGeneralCostsDebit',
        'gl_account_code_general_costs_closing' => 'setGlAccountCodeGeneralCostsClosing',
        'cost_center_general_costs' => 'setCostCenterGeneralCosts',
        'cost_center_general_costs_debit' => 'setCostCenterGeneralCostsDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'division_id' => 'getDivisionId',
        'gl_account_code_general_costs' => 'getGlAccountCodeGeneralCosts',
        'gl_account_code_general_costs_debit' => 'getGlAccountCodeGeneralCostsDebit',
        'gl_account_code_general_costs_closing' => 'getGlAccountCodeGeneralCostsClosing',
        'cost_center_general_costs' => 'getCostCenterGeneralCosts',
        'cost_center_general_costs_debit' => 'getCostCenterGeneralCostsDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['division_id'] = isset($data['division_id']) ? $data['division_id'] : null;
        $this->container['gl_account_code_general_costs'] = isset($data['gl_account_code_general_costs']) ? $data['gl_account_code_general_costs'] : null;
        $this->container['gl_account_code_general_costs_debit'] = isset($data['gl_account_code_general_costs_debit']) ? $data['gl_account_code_general_costs_debit'] : null;
        $this->container['gl_account_code_general_costs_closing'] = isset($data['gl_account_code_general_costs_closing']) ? $data['gl_account_code_general_costs_closing'] : null;
        $this->container['cost_center_general_costs'] = isset($data['cost_center_general_costs']) ? $data['cost_center_general_costs'] : null;
        $this->container['cost_center_general_costs_debit'] = isset($data['cost_center_general_costs_debit']) ? $data['cost_center_general_costs_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['gl_account_code_general_costs']) && (mb_strlen($this->container['gl_account_code_general_costs']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_general_costs', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_general_costs_debit']) && (mb_strlen($this->container['gl_account_code_general_costs_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_general_costs_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_general_costs_closing']) && (mb_strlen($this->container['gl_account_code_general_costs_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_general_costs_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_general_costs']) && (mb_strlen($this->container['cost_center_general_costs']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_general_costs', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_general_costs_debit']) && (mb_strlen($this->container['cost_center_general_costs_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_general_costs_debit', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the division project category settings.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return int
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param int $division_id The ID of the linked division.
     *
     * @return $this
     */
    public function setDivisionId($division_id)
    {
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets gl_account_code_general_costs
     *
     * @return string
     */
    public function getGlAccountCodeGeneralCosts()
    {
        return $this->container['gl_account_code_general_costs'];
    }

    /**
     * Sets gl_account_code_general_costs
     *
     * @param string $gl_account_code_general_costs A general ledger account code to use for general costs related items.
     *
     * @return $this
     */
    public function setGlAccountCodeGeneralCosts($gl_account_code_general_costs)
    {
        if (!is_null($gl_account_code_general_costs) && (mb_strlen($gl_account_code_general_costs) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_general_costs when calling DivisionProjectCategorySettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_general_costs'] = $gl_account_code_general_costs;

        return $this;
    }

    /**
     * Gets gl_account_code_general_costs_debit
     *
     * @return string
     */
    public function getGlAccountCodeGeneralCostsDebit()
    {
        return $this->container['gl_account_code_general_costs_debit'];
    }

    /**
     * Sets gl_account_code_general_costs_debit
     *
     * @param string $gl_account_code_general_costs_debit A general ledger account code to use for general costs debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeGeneralCostsDebit($gl_account_code_general_costs_debit)
    {
        if (!is_null($gl_account_code_general_costs_debit) && (mb_strlen($gl_account_code_general_costs_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_general_costs_debit when calling DivisionProjectCategorySettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_general_costs_debit'] = $gl_account_code_general_costs_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_general_costs_closing
     *
     * @return string
     */
    public function getGlAccountCodeGeneralCostsClosing()
    {
        return $this->container['gl_account_code_general_costs_closing'];
    }

    /**
     * Sets gl_account_code_general_costs_closing
     *
     * @param string $gl_account_code_general_costs_closing A general ledger account code to use for general costs closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeGeneralCostsClosing($gl_account_code_general_costs_closing)
    {
        if (!is_null($gl_account_code_general_costs_closing) && (mb_strlen($gl_account_code_general_costs_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_general_costs_closing when calling DivisionProjectCategorySettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_general_costs_closing'] = $gl_account_code_general_costs_closing;

        return $this;
    }

    /**
     * Gets cost_center_general_costs
     *
     * @return string
     */
    public function getCostCenterGeneralCosts()
    {
        return $this->container['cost_center_general_costs'];
    }

    /**
     * Sets cost_center_general_costs
     *
     * @param string $cost_center_general_costs A cost center to use for general costs related items.
     *
     * @return $this
     */
    public function setCostCenterGeneralCosts($cost_center_general_costs)
    {
        if (!is_null($cost_center_general_costs) && (mb_strlen($cost_center_general_costs) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_general_costs when calling DivisionProjectCategorySettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_general_costs'] = $cost_center_general_costs;

        return $this;
    }

    /**
     * Gets cost_center_general_costs_debit
     *
     * @return string
     */
    public function getCostCenterGeneralCostsDebit()
    {
        return $this->container['cost_center_general_costs_debit'];
    }

    /**
     * Sets cost_center_general_costs_debit
     *
     * @param string $cost_center_general_costs_debit A cost center to use for general costs debit related items.
     *
     * @return $this
     */
    public function setCostCenterGeneralCostsDebit($cost_center_general_costs_debit)
    {
        if (!is_null($cost_center_general_costs_debit) && (mb_strlen($cost_center_general_costs_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_general_costs_debit when calling DivisionProjectCategorySettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_general_costs_debit'] = $cost_center_general_costs_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


