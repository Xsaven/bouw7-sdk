<?php
/**
 * DivisionWipSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DivisionWipSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DivisionWipSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DivisionWipSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'division_id' => 'int',
        'closing_project_status' => '\Swagger\Client\Model\CondensedProjectStatus',
        'allow_invoice_lines_without_project' => 'bool',
        'gl_account_code_sales' => 'string',
        'gl_account_code_sales_debit' => 'string',
        'gl_account_code_sales_closing' => 'string',
        'gl_account_code_purchase' => 'string',
        'gl_account_code_purchase_debit' => 'string',
        'gl_account_code_purchase_closing' => 'string',
        'gl_account_code_hours' => 'string',
        'gl_account_code_hours_debit' => 'string',
        'gl_account_code_hours_closing' => 'string',
        'gl_account_code_material' => 'string',
        'gl_account_code_material_debit' => 'string',
        'gl_account_code_material_closing' => 'string',
        'gl_account_code_equipment' => 'string',
        'gl_account_code_equipment_debit' => 'string',
        'gl_account_code_equipment_closing' => 'string',
        'gl_account_code_waste' => 'string',
        'gl_account_code_waste_debit' => 'string',
        'gl_account_code_waste_closing' => 'string',
        'cost_center_sales' => 'string',
        'cost_center_sales_debit' => 'string',
        'cost_center_purchase' => 'string',
        'cost_center_purchase_debit' => 'string',
        'cost_center_hours' => 'string',
        'cost_center_hours_debit' => 'string',
        'cost_center_material' => 'string',
        'cost_center_material_debit' => 'string',
        'cost_center_equipment' => 'string',
        'cost_center_equipment_debit' => 'string',
        'cost_center_waste' => 'string',
        'cost_center_waste_debit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'division_id' => null,
        'closing_project_status' => null,
        'allow_invoice_lines_without_project' => null,
        'gl_account_code_sales' => null,
        'gl_account_code_sales_debit' => null,
        'gl_account_code_sales_closing' => null,
        'gl_account_code_purchase' => null,
        'gl_account_code_purchase_debit' => null,
        'gl_account_code_purchase_closing' => null,
        'gl_account_code_hours' => null,
        'gl_account_code_hours_debit' => null,
        'gl_account_code_hours_closing' => null,
        'gl_account_code_material' => null,
        'gl_account_code_material_debit' => null,
        'gl_account_code_material_closing' => null,
        'gl_account_code_equipment' => null,
        'gl_account_code_equipment_debit' => null,
        'gl_account_code_equipment_closing' => null,
        'gl_account_code_waste' => null,
        'gl_account_code_waste_debit' => null,
        'gl_account_code_waste_closing' => null,
        'cost_center_sales' => null,
        'cost_center_sales_debit' => null,
        'cost_center_purchase' => null,
        'cost_center_purchase_debit' => null,
        'cost_center_hours' => null,
        'cost_center_hours_debit' => null,
        'cost_center_material' => null,
        'cost_center_material_debit' => null,
        'cost_center_equipment' => null,
        'cost_center_equipment_debit' => null,
        'cost_center_waste' => null,
        'cost_center_waste_debit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'division_id' => 'divisionId',
        'closing_project_status' => 'closingProjectStatus',
        'allow_invoice_lines_without_project' => 'allowInvoiceLinesWithoutProject',
        'gl_account_code_sales' => 'glAccountCodeSales',
        'gl_account_code_sales_debit' => 'glAccountCodeSalesDebit',
        'gl_account_code_sales_closing' => 'glAccountCodeSalesClosing',
        'gl_account_code_purchase' => 'glAccountCodePurchase',
        'gl_account_code_purchase_debit' => 'glAccountCodePurchaseDebit',
        'gl_account_code_purchase_closing' => 'glAccountCodePurchaseClosing',
        'gl_account_code_hours' => 'glAccountCodeHours',
        'gl_account_code_hours_debit' => 'glAccountCodeHoursDebit',
        'gl_account_code_hours_closing' => 'glAccountCodeHoursClosing',
        'gl_account_code_material' => 'glAccountCodeMaterial',
        'gl_account_code_material_debit' => 'glAccountCodeMaterialDebit',
        'gl_account_code_material_closing' => 'glAccountCodeMaterialClosing',
        'gl_account_code_equipment' => 'glAccountCodeEquipment',
        'gl_account_code_equipment_debit' => 'glAccountCodeEquipmentDebit',
        'gl_account_code_equipment_closing' => 'glAccountCodeEquipmentClosing',
        'gl_account_code_waste' => 'glAccountCodeWaste',
        'gl_account_code_waste_debit' => 'glAccountCodeWasteDebit',
        'gl_account_code_waste_closing' => 'glAccountCodeWasteClosing',
        'cost_center_sales' => 'costCenterSales',
        'cost_center_sales_debit' => 'costCenterSalesDebit',
        'cost_center_purchase' => 'costCenterPurchase',
        'cost_center_purchase_debit' => 'costCenterPurchaseDebit',
        'cost_center_hours' => 'costCenterHours',
        'cost_center_hours_debit' => 'costCenterHoursDebit',
        'cost_center_material' => 'costCenterMaterial',
        'cost_center_material_debit' => 'costCenterMaterialDebit',
        'cost_center_equipment' => 'costCenterEquipment',
        'cost_center_equipment_debit' => 'costCenterEquipmentDebit',
        'cost_center_waste' => 'costCenterWaste',
        'cost_center_waste_debit' => 'costCenterWasteDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'division_id' => 'setDivisionId',
        'closing_project_status' => 'setClosingProjectStatus',
        'allow_invoice_lines_without_project' => 'setAllowInvoiceLinesWithoutProject',
        'gl_account_code_sales' => 'setGlAccountCodeSales',
        'gl_account_code_sales_debit' => 'setGlAccountCodeSalesDebit',
        'gl_account_code_sales_closing' => 'setGlAccountCodeSalesClosing',
        'gl_account_code_purchase' => 'setGlAccountCodePurchase',
        'gl_account_code_purchase_debit' => 'setGlAccountCodePurchaseDebit',
        'gl_account_code_purchase_closing' => 'setGlAccountCodePurchaseClosing',
        'gl_account_code_hours' => 'setGlAccountCodeHours',
        'gl_account_code_hours_debit' => 'setGlAccountCodeHoursDebit',
        'gl_account_code_hours_closing' => 'setGlAccountCodeHoursClosing',
        'gl_account_code_material' => 'setGlAccountCodeMaterial',
        'gl_account_code_material_debit' => 'setGlAccountCodeMaterialDebit',
        'gl_account_code_material_closing' => 'setGlAccountCodeMaterialClosing',
        'gl_account_code_equipment' => 'setGlAccountCodeEquipment',
        'gl_account_code_equipment_debit' => 'setGlAccountCodeEquipmentDebit',
        'gl_account_code_equipment_closing' => 'setGlAccountCodeEquipmentClosing',
        'gl_account_code_waste' => 'setGlAccountCodeWaste',
        'gl_account_code_waste_debit' => 'setGlAccountCodeWasteDebit',
        'gl_account_code_waste_closing' => 'setGlAccountCodeWasteClosing',
        'cost_center_sales' => 'setCostCenterSales',
        'cost_center_sales_debit' => 'setCostCenterSalesDebit',
        'cost_center_purchase' => 'setCostCenterPurchase',
        'cost_center_purchase_debit' => 'setCostCenterPurchaseDebit',
        'cost_center_hours' => 'setCostCenterHours',
        'cost_center_hours_debit' => 'setCostCenterHoursDebit',
        'cost_center_material' => 'setCostCenterMaterial',
        'cost_center_material_debit' => 'setCostCenterMaterialDebit',
        'cost_center_equipment' => 'setCostCenterEquipment',
        'cost_center_equipment_debit' => 'setCostCenterEquipmentDebit',
        'cost_center_waste' => 'setCostCenterWaste',
        'cost_center_waste_debit' => 'setCostCenterWasteDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'division_id' => 'getDivisionId',
        'closing_project_status' => 'getClosingProjectStatus',
        'allow_invoice_lines_without_project' => 'getAllowInvoiceLinesWithoutProject',
        'gl_account_code_sales' => 'getGlAccountCodeSales',
        'gl_account_code_sales_debit' => 'getGlAccountCodeSalesDebit',
        'gl_account_code_sales_closing' => 'getGlAccountCodeSalesClosing',
        'gl_account_code_purchase' => 'getGlAccountCodePurchase',
        'gl_account_code_purchase_debit' => 'getGlAccountCodePurchaseDebit',
        'gl_account_code_purchase_closing' => 'getGlAccountCodePurchaseClosing',
        'gl_account_code_hours' => 'getGlAccountCodeHours',
        'gl_account_code_hours_debit' => 'getGlAccountCodeHoursDebit',
        'gl_account_code_hours_closing' => 'getGlAccountCodeHoursClosing',
        'gl_account_code_material' => 'getGlAccountCodeMaterial',
        'gl_account_code_material_debit' => 'getGlAccountCodeMaterialDebit',
        'gl_account_code_material_closing' => 'getGlAccountCodeMaterialClosing',
        'gl_account_code_equipment' => 'getGlAccountCodeEquipment',
        'gl_account_code_equipment_debit' => 'getGlAccountCodeEquipmentDebit',
        'gl_account_code_equipment_closing' => 'getGlAccountCodeEquipmentClosing',
        'gl_account_code_waste' => 'getGlAccountCodeWaste',
        'gl_account_code_waste_debit' => 'getGlAccountCodeWasteDebit',
        'gl_account_code_waste_closing' => 'getGlAccountCodeWasteClosing',
        'cost_center_sales' => 'getCostCenterSales',
        'cost_center_sales_debit' => 'getCostCenterSalesDebit',
        'cost_center_purchase' => 'getCostCenterPurchase',
        'cost_center_purchase_debit' => 'getCostCenterPurchaseDebit',
        'cost_center_hours' => 'getCostCenterHours',
        'cost_center_hours_debit' => 'getCostCenterHoursDebit',
        'cost_center_material' => 'getCostCenterMaterial',
        'cost_center_material_debit' => 'getCostCenterMaterialDebit',
        'cost_center_equipment' => 'getCostCenterEquipment',
        'cost_center_equipment_debit' => 'getCostCenterEquipmentDebit',
        'cost_center_waste' => 'getCostCenterWaste',
        'cost_center_waste_debit' => 'getCostCenterWasteDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['division_id'] = isset($data['division_id']) ? $data['division_id'] : null;
        $this->container['closing_project_status'] = isset($data['closing_project_status']) ? $data['closing_project_status'] : null;
        $this->container['allow_invoice_lines_without_project'] = isset($data['allow_invoice_lines_without_project']) ? $data['allow_invoice_lines_without_project'] : null;
        $this->container['gl_account_code_sales'] = isset($data['gl_account_code_sales']) ? $data['gl_account_code_sales'] : null;
        $this->container['gl_account_code_sales_debit'] = isset($data['gl_account_code_sales_debit']) ? $data['gl_account_code_sales_debit'] : null;
        $this->container['gl_account_code_sales_closing'] = isset($data['gl_account_code_sales_closing']) ? $data['gl_account_code_sales_closing'] : null;
        $this->container['gl_account_code_purchase'] = isset($data['gl_account_code_purchase']) ? $data['gl_account_code_purchase'] : null;
        $this->container['gl_account_code_purchase_debit'] = isset($data['gl_account_code_purchase_debit']) ? $data['gl_account_code_purchase_debit'] : null;
        $this->container['gl_account_code_purchase_closing'] = isset($data['gl_account_code_purchase_closing']) ? $data['gl_account_code_purchase_closing'] : null;
        $this->container['gl_account_code_hours'] = isset($data['gl_account_code_hours']) ? $data['gl_account_code_hours'] : null;
        $this->container['gl_account_code_hours_debit'] = isset($data['gl_account_code_hours_debit']) ? $data['gl_account_code_hours_debit'] : null;
        $this->container['gl_account_code_hours_closing'] = isset($data['gl_account_code_hours_closing']) ? $data['gl_account_code_hours_closing'] : null;
        $this->container['gl_account_code_material'] = isset($data['gl_account_code_material']) ? $data['gl_account_code_material'] : null;
        $this->container['gl_account_code_material_debit'] = isset($data['gl_account_code_material_debit']) ? $data['gl_account_code_material_debit'] : null;
        $this->container['gl_account_code_material_closing'] = isset($data['gl_account_code_material_closing']) ? $data['gl_account_code_material_closing'] : null;
        $this->container['gl_account_code_equipment'] = isset($data['gl_account_code_equipment']) ? $data['gl_account_code_equipment'] : null;
        $this->container['gl_account_code_equipment_debit'] = isset($data['gl_account_code_equipment_debit']) ? $data['gl_account_code_equipment_debit'] : null;
        $this->container['gl_account_code_equipment_closing'] = isset($data['gl_account_code_equipment_closing']) ? $data['gl_account_code_equipment_closing'] : null;
        $this->container['gl_account_code_waste'] = isset($data['gl_account_code_waste']) ? $data['gl_account_code_waste'] : null;
        $this->container['gl_account_code_waste_debit'] = isset($data['gl_account_code_waste_debit']) ? $data['gl_account_code_waste_debit'] : null;
        $this->container['gl_account_code_waste_closing'] = isset($data['gl_account_code_waste_closing']) ? $data['gl_account_code_waste_closing'] : null;
        $this->container['cost_center_sales'] = isset($data['cost_center_sales']) ? $data['cost_center_sales'] : null;
        $this->container['cost_center_sales_debit'] = isset($data['cost_center_sales_debit']) ? $data['cost_center_sales_debit'] : null;
        $this->container['cost_center_purchase'] = isset($data['cost_center_purchase']) ? $data['cost_center_purchase'] : null;
        $this->container['cost_center_purchase_debit'] = isset($data['cost_center_purchase_debit']) ? $data['cost_center_purchase_debit'] : null;
        $this->container['cost_center_hours'] = isset($data['cost_center_hours']) ? $data['cost_center_hours'] : null;
        $this->container['cost_center_hours_debit'] = isset($data['cost_center_hours_debit']) ? $data['cost_center_hours_debit'] : null;
        $this->container['cost_center_material'] = isset($data['cost_center_material']) ? $data['cost_center_material'] : null;
        $this->container['cost_center_material_debit'] = isset($data['cost_center_material_debit']) ? $data['cost_center_material_debit'] : null;
        $this->container['cost_center_equipment'] = isset($data['cost_center_equipment']) ? $data['cost_center_equipment'] : null;
        $this->container['cost_center_equipment_debit'] = isset($data['cost_center_equipment_debit']) ? $data['cost_center_equipment_debit'] : null;
        $this->container['cost_center_waste'] = isset($data['cost_center_waste']) ? $data['cost_center_waste'] : null;
        $this->container['cost_center_waste_debit'] = isset($data['cost_center_waste_debit']) ? $data['cost_center_waste_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['division_id'] === null) {
            $invalidProperties[] = "'division_id' can't be null";
        }
        if ($this->container['allow_invoice_lines_without_project'] === null) {
            $invalidProperties[] = "'allow_invoice_lines_without_project' can't be null";
        }
        if (!is_null($this->container['gl_account_code_sales']) && (mb_strlen($this->container['gl_account_code_sales']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_sales', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_sales_debit']) && (mb_strlen($this->container['gl_account_code_sales_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_sales_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_sales_closing']) && (mb_strlen($this->container['gl_account_code_sales_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_sales_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_purchase']) && (mb_strlen($this->container['gl_account_code_purchase']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_purchase', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_purchase_debit']) && (mb_strlen($this->container['gl_account_code_purchase_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_purchase_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_purchase_closing']) && (mb_strlen($this->container['gl_account_code_purchase_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_purchase_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_hours']) && (mb_strlen($this->container['gl_account_code_hours']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_hours', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_hours_debit']) && (mb_strlen($this->container['gl_account_code_hours_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_hours_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_hours_closing']) && (mb_strlen($this->container['gl_account_code_hours_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_hours_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_material']) && (mb_strlen($this->container['gl_account_code_material']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_material', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_material_debit']) && (mb_strlen($this->container['gl_account_code_material_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_material_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_material_closing']) && (mb_strlen($this->container['gl_account_code_material_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_material_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_equipment']) && (mb_strlen($this->container['gl_account_code_equipment']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_equipment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_equipment_debit']) && (mb_strlen($this->container['gl_account_code_equipment_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_equipment_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_equipment_closing']) && (mb_strlen($this->container['gl_account_code_equipment_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_equipment_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_waste']) && (mb_strlen($this->container['gl_account_code_waste']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_waste', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_waste_debit']) && (mb_strlen($this->container['gl_account_code_waste_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_waste_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gl_account_code_waste_closing']) && (mb_strlen($this->container['gl_account_code_waste_closing']) > 255)) {
            $invalidProperties[] = "invalid value for 'gl_account_code_waste_closing', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_sales']) && (mb_strlen($this->container['cost_center_sales']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_sales', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_sales_debit']) && (mb_strlen($this->container['cost_center_sales_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_sales_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_purchase']) && (mb_strlen($this->container['cost_center_purchase']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_purchase', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_purchase_debit']) && (mb_strlen($this->container['cost_center_purchase_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_purchase_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_hours']) && (mb_strlen($this->container['cost_center_hours']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_hours', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_hours_debit']) && (mb_strlen($this->container['cost_center_hours_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_hours_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_material']) && (mb_strlen($this->container['cost_center_material']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_material', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_material_debit']) && (mb_strlen($this->container['cost_center_material_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_material_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_equipment']) && (mb_strlen($this->container['cost_center_equipment']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_equipment', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_equipment_debit']) && (mb_strlen($this->container['cost_center_equipment_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_equipment_debit', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_waste']) && (mb_strlen($this->container['cost_center_waste']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_waste', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['cost_center_waste_debit']) && (mb_strlen($this->container['cost_center_waste_debit']) > 255)) {
            $invalidProperties[] = "invalid value for 'cost_center_waste_debit', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the work in progress settings.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return int
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param int $division_id The division ID that belongs to these settings.
     *
     * @return $this
     */
    public function setDivisionId($division_id)
    {
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets closing_project_status
     *
     * @return \Swagger\Client\Model\CondensedProjectStatus
     */
    public function getClosingProjectStatus()
    {
        return $this->container['closing_project_status'];
    }

    /**
     * Sets closing_project_status
     *
     * @param \Swagger\Client\Model\CondensedProjectStatus $closing_project_status closing_project_status
     *
     * @return $this
     */
    public function setClosingProjectStatus($closing_project_status)
    {
        $this->container['closing_project_status'] = $closing_project_status;

        return $this;
    }

    /**
     * Gets allow_invoice_lines_without_project
     *
     * @return bool
     */
    public function getAllowInvoiceLinesWithoutProject()
    {
        return $this->container['allow_invoice_lines_without_project'];
    }

    /**
     * Sets allow_invoice_lines_without_project
     *
     * @param bool $allow_invoice_lines_without_project If invoice lines without project are allowed.
     *
     * @return $this
     */
    public function setAllowInvoiceLinesWithoutProject($allow_invoice_lines_without_project)
    {
        $this->container['allow_invoice_lines_without_project'] = $allow_invoice_lines_without_project;

        return $this;
    }

    /**
     * Gets gl_account_code_sales
     *
     * @return string
     */
    public function getGlAccountCodeSales()
    {
        return $this->container['gl_account_code_sales'];
    }

    /**
     * Sets gl_account_code_sales
     *
     * @param string $gl_account_code_sales A general ledger account code to use for sales related items.
     *
     * @return $this
     */
    public function setGlAccountCodeSales($gl_account_code_sales)
    {
        if (!is_null($gl_account_code_sales) && (mb_strlen($gl_account_code_sales) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_sales when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_sales'] = $gl_account_code_sales;

        return $this;
    }

    /**
     * Gets gl_account_code_sales_debit
     *
     * @return string
     */
    public function getGlAccountCodeSalesDebit()
    {
        return $this->container['gl_account_code_sales_debit'];
    }

    /**
     * Sets gl_account_code_sales_debit
     *
     * @param string $gl_account_code_sales_debit A general ledger account code to use for sales debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeSalesDebit($gl_account_code_sales_debit)
    {
        if (!is_null($gl_account_code_sales_debit) && (mb_strlen($gl_account_code_sales_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_sales_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_sales_debit'] = $gl_account_code_sales_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_sales_closing
     *
     * @return string
     */
    public function getGlAccountCodeSalesClosing()
    {
        return $this->container['gl_account_code_sales_closing'];
    }

    /**
     * Sets gl_account_code_sales_closing
     *
     * @param string $gl_account_code_sales_closing A general ledger account code to use for sales closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeSalesClosing($gl_account_code_sales_closing)
    {
        if (!is_null($gl_account_code_sales_closing) && (mb_strlen($gl_account_code_sales_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_sales_closing when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_sales_closing'] = $gl_account_code_sales_closing;

        return $this;
    }

    /**
     * Gets gl_account_code_purchase
     *
     * @return string
     */
    public function getGlAccountCodePurchase()
    {
        return $this->container['gl_account_code_purchase'];
    }

    /**
     * Sets gl_account_code_purchase
     *
     * @param string $gl_account_code_purchase A general ledger account code to use for purchase related items.
     *
     * @return $this
     */
    public function setGlAccountCodePurchase($gl_account_code_purchase)
    {
        if (!is_null($gl_account_code_purchase) && (mb_strlen($gl_account_code_purchase) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_purchase when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_purchase'] = $gl_account_code_purchase;

        return $this;
    }

    /**
     * Gets gl_account_code_purchase_debit
     *
     * @return string
     */
    public function getGlAccountCodePurchaseDebit()
    {
        return $this->container['gl_account_code_purchase_debit'];
    }

    /**
     * Sets gl_account_code_purchase_debit
     *
     * @param string $gl_account_code_purchase_debit A general ledger account code to use for purchase debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodePurchaseDebit($gl_account_code_purchase_debit)
    {
        if (!is_null($gl_account_code_purchase_debit) && (mb_strlen($gl_account_code_purchase_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_purchase_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_purchase_debit'] = $gl_account_code_purchase_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_purchase_closing
     *
     * @return string
     */
    public function getGlAccountCodePurchaseClosing()
    {
        return $this->container['gl_account_code_purchase_closing'];
    }

    /**
     * Sets gl_account_code_purchase_closing
     *
     * @param string $gl_account_code_purchase_closing A general ledger account code to use for purchase closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodePurchaseClosing($gl_account_code_purchase_closing)
    {
        if (!is_null($gl_account_code_purchase_closing) && (mb_strlen($gl_account_code_purchase_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_purchase_closing when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_purchase_closing'] = $gl_account_code_purchase_closing;

        return $this;
    }

    /**
     * Gets gl_account_code_hours
     *
     * @return string
     */
    public function getGlAccountCodeHours()
    {
        return $this->container['gl_account_code_hours'];
    }

    /**
     * Sets gl_account_code_hours
     *
     * @param string $gl_account_code_hours A general ledger account code to use for hours related items.
     *
     * @return $this
     */
    public function setGlAccountCodeHours($gl_account_code_hours)
    {
        if (!is_null($gl_account_code_hours) && (mb_strlen($gl_account_code_hours) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_hours when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_hours'] = $gl_account_code_hours;

        return $this;
    }

    /**
     * Gets gl_account_code_hours_debit
     *
     * @return string
     */
    public function getGlAccountCodeHoursDebit()
    {
        return $this->container['gl_account_code_hours_debit'];
    }

    /**
     * Sets gl_account_code_hours_debit
     *
     * @param string $gl_account_code_hours_debit A general ledger account code to use for hours debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeHoursDebit($gl_account_code_hours_debit)
    {
        if (!is_null($gl_account_code_hours_debit) && (mb_strlen($gl_account_code_hours_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_hours_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_hours_debit'] = $gl_account_code_hours_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_hours_closing
     *
     * @return string
     */
    public function getGlAccountCodeHoursClosing()
    {
        return $this->container['gl_account_code_hours_closing'];
    }

    /**
     * Sets gl_account_code_hours_closing
     *
     * @param string $gl_account_code_hours_closing A general ledger account code to use for hours closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeHoursClosing($gl_account_code_hours_closing)
    {
        if (!is_null($gl_account_code_hours_closing) && (mb_strlen($gl_account_code_hours_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_hours_closing when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_hours_closing'] = $gl_account_code_hours_closing;

        return $this;
    }

    /**
     * Gets gl_account_code_material
     *
     * @return string
     */
    public function getGlAccountCodeMaterial()
    {
        return $this->container['gl_account_code_material'];
    }

    /**
     * Sets gl_account_code_material
     *
     * @param string $gl_account_code_material A general ledger account code to use for material related items.
     *
     * @return $this
     */
    public function setGlAccountCodeMaterial($gl_account_code_material)
    {
        if (!is_null($gl_account_code_material) && (mb_strlen($gl_account_code_material) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_material when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_material'] = $gl_account_code_material;

        return $this;
    }

    /**
     * Gets gl_account_code_material_debit
     *
     * @return string
     */
    public function getGlAccountCodeMaterialDebit()
    {
        return $this->container['gl_account_code_material_debit'];
    }

    /**
     * Sets gl_account_code_material_debit
     *
     * @param string $gl_account_code_material_debit A general ledger account code to use for material debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeMaterialDebit($gl_account_code_material_debit)
    {
        if (!is_null($gl_account_code_material_debit) && (mb_strlen($gl_account_code_material_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_material_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_material_debit'] = $gl_account_code_material_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_material_closing
     *
     * @return string
     */
    public function getGlAccountCodeMaterialClosing()
    {
        return $this->container['gl_account_code_material_closing'];
    }

    /**
     * Sets gl_account_code_material_closing
     *
     * @param string $gl_account_code_material_closing A general ledger account code to use for material closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeMaterialClosing($gl_account_code_material_closing)
    {
        if (!is_null($gl_account_code_material_closing) && (mb_strlen($gl_account_code_material_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_material_closing when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_material_closing'] = $gl_account_code_material_closing;

        return $this;
    }

    /**
     * Gets gl_account_code_equipment
     *
     * @return string
     */
    public function getGlAccountCodeEquipment()
    {
        return $this->container['gl_account_code_equipment'];
    }

    /**
     * Sets gl_account_code_equipment
     *
     * @param string $gl_account_code_equipment A general ledger account code to use for equipment related items.
     *
     * @return $this
     */
    public function setGlAccountCodeEquipment($gl_account_code_equipment)
    {
        if (!is_null($gl_account_code_equipment) && (mb_strlen($gl_account_code_equipment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_equipment when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_equipment'] = $gl_account_code_equipment;

        return $this;
    }

    /**
     * Gets gl_account_code_equipment_debit
     *
     * @return string
     */
    public function getGlAccountCodeEquipmentDebit()
    {
        return $this->container['gl_account_code_equipment_debit'];
    }

    /**
     * Sets gl_account_code_equipment_debit
     *
     * @param string $gl_account_code_equipment_debit A general ledger account code to use for equipment debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeEquipmentDebit($gl_account_code_equipment_debit)
    {
        if (!is_null($gl_account_code_equipment_debit) && (mb_strlen($gl_account_code_equipment_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_equipment_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_equipment_debit'] = $gl_account_code_equipment_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_equipment_closing
     *
     * @return string
     */
    public function getGlAccountCodeEquipmentClosing()
    {
        return $this->container['gl_account_code_equipment_closing'];
    }

    /**
     * Sets gl_account_code_equipment_closing
     *
     * @param string $gl_account_code_equipment_closing A general ledger account code to use for equipment closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeEquipmentClosing($gl_account_code_equipment_closing)
    {
        if (!is_null($gl_account_code_equipment_closing) && (mb_strlen($gl_account_code_equipment_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_equipment_closing when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_equipment_closing'] = $gl_account_code_equipment_closing;

        return $this;
    }

    /**
     * Gets gl_account_code_waste
     *
     * @return string
     */
    public function getGlAccountCodeWaste()
    {
        return $this->container['gl_account_code_waste'];
    }

    /**
     * Sets gl_account_code_waste
     *
     * @param string $gl_account_code_waste A general ledger account code to use for waste related items.
     *
     * @return $this
     */
    public function setGlAccountCodeWaste($gl_account_code_waste)
    {
        if (!is_null($gl_account_code_waste) && (mb_strlen($gl_account_code_waste) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_waste when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_waste'] = $gl_account_code_waste;

        return $this;
    }

    /**
     * Gets gl_account_code_waste_debit
     *
     * @return string
     */
    public function getGlAccountCodeWasteDebit()
    {
        return $this->container['gl_account_code_waste_debit'];
    }

    /**
     * Sets gl_account_code_waste_debit
     *
     * @param string $gl_account_code_waste_debit A general ledger account code to use for waste debit related items.
     *
     * @return $this
     */
    public function setGlAccountCodeWasteDebit($gl_account_code_waste_debit)
    {
        if (!is_null($gl_account_code_waste_debit) && (mb_strlen($gl_account_code_waste_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_waste_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_waste_debit'] = $gl_account_code_waste_debit;

        return $this;
    }

    /**
     * Gets gl_account_code_waste_closing
     *
     * @return string
     */
    public function getGlAccountCodeWasteClosing()
    {
        return $this->container['gl_account_code_waste_closing'];
    }

    /**
     * Sets gl_account_code_waste_closing
     *
     * @param string $gl_account_code_waste_closing A general ledger account code to use for waste closing related items.
     *
     * @return $this
     */
    public function setGlAccountCodeWasteClosing($gl_account_code_waste_closing)
    {
        if (!is_null($gl_account_code_waste_closing) && (mb_strlen($gl_account_code_waste_closing) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gl_account_code_waste_closing when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['gl_account_code_waste_closing'] = $gl_account_code_waste_closing;

        return $this;
    }

    /**
     * Gets cost_center_sales
     *
     * @return string
     */
    public function getCostCenterSales()
    {
        return $this->container['cost_center_sales'];
    }

    /**
     * Sets cost_center_sales
     *
     * @param string $cost_center_sales A cost center to use for sales related items.
     *
     * @return $this
     */
    public function setCostCenterSales($cost_center_sales)
    {
        if (!is_null($cost_center_sales) && (mb_strlen($cost_center_sales) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_sales when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_sales'] = $cost_center_sales;

        return $this;
    }

    /**
     * Gets cost_center_sales_debit
     *
     * @return string
     */
    public function getCostCenterSalesDebit()
    {
        return $this->container['cost_center_sales_debit'];
    }

    /**
     * Sets cost_center_sales_debit
     *
     * @param string $cost_center_sales_debit A cost center to use for sales debit related items.
     *
     * @return $this
     */
    public function setCostCenterSalesDebit($cost_center_sales_debit)
    {
        if (!is_null($cost_center_sales_debit) && (mb_strlen($cost_center_sales_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_sales_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_sales_debit'] = $cost_center_sales_debit;

        return $this;
    }

    /**
     * Gets cost_center_purchase
     *
     * @return string
     */
    public function getCostCenterPurchase()
    {
        return $this->container['cost_center_purchase'];
    }

    /**
     * Sets cost_center_purchase
     *
     * @param string $cost_center_purchase A cost center to use for purchase related items.
     *
     * @return $this
     */
    public function setCostCenterPurchase($cost_center_purchase)
    {
        if (!is_null($cost_center_purchase) && (mb_strlen($cost_center_purchase) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_purchase when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_purchase'] = $cost_center_purchase;

        return $this;
    }

    /**
     * Gets cost_center_purchase_debit
     *
     * @return string
     */
    public function getCostCenterPurchaseDebit()
    {
        return $this->container['cost_center_purchase_debit'];
    }

    /**
     * Sets cost_center_purchase_debit
     *
     * @param string $cost_center_purchase_debit A cost center to use for purchase debit related items.
     *
     * @return $this
     */
    public function setCostCenterPurchaseDebit($cost_center_purchase_debit)
    {
        if (!is_null($cost_center_purchase_debit) && (mb_strlen($cost_center_purchase_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_purchase_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_purchase_debit'] = $cost_center_purchase_debit;

        return $this;
    }

    /**
     * Gets cost_center_hours
     *
     * @return string
     */
    public function getCostCenterHours()
    {
        return $this->container['cost_center_hours'];
    }

    /**
     * Sets cost_center_hours
     *
     * @param string $cost_center_hours A cost center to use for hours related items.
     *
     * @return $this
     */
    public function setCostCenterHours($cost_center_hours)
    {
        if (!is_null($cost_center_hours) && (mb_strlen($cost_center_hours) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_hours when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_hours'] = $cost_center_hours;

        return $this;
    }

    /**
     * Gets cost_center_hours_debit
     *
     * @return string
     */
    public function getCostCenterHoursDebit()
    {
        return $this->container['cost_center_hours_debit'];
    }

    /**
     * Sets cost_center_hours_debit
     *
     * @param string $cost_center_hours_debit A cost center to use for hours debit related items.
     *
     * @return $this
     */
    public function setCostCenterHoursDebit($cost_center_hours_debit)
    {
        if (!is_null($cost_center_hours_debit) && (mb_strlen($cost_center_hours_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_hours_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_hours_debit'] = $cost_center_hours_debit;

        return $this;
    }

    /**
     * Gets cost_center_material
     *
     * @return string
     */
    public function getCostCenterMaterial()
    {
        return $this->container['cost_center_material'];
    }

    /**
     * Sets cost_center_material
     *
     * @param string $cost_center_material A cost center to use for material related items.
     *
     * @return $this
     */
    public function setCostCenterMaterial($cost_center_material)
    {
        if (!is_null($cost_center_material) && (mb_strlen($cost_center_material) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_material when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_material'] = $cost_center_material;

        return $this;
    }

    /**
     * Gets cost_center_material_debit
     *
     * @return string
     */
    public function getCostCenterMaterialDebit()
    {
        return $this->container['cost_center_material_debit'];
    }

    /**
     * Sets cost_center_material_debit
     *
     * @param string $cost_center_material_debit A cost center to use for material debit related items.
     *
     * @return $this
     */
    public function setCostCenterMaterialDebit($cost_center_material_debit)
    {
        if (!is_null($cost_center_material_debit) && (mb_strlen($cost_center_material_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_material_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_material_debit'] = $cost_center_material_debit;

        return $this;
    }

    /**
     * Gets cost_center_equipment
     *
     * @return string
     */
    public function getCostCenterEquipment()
    {
        return $this->container['cost_center_equipment'];
    }

    /**
     * Sets cost_center_equipment
     *
     * @param string $cost_center_equipment A cost center to use for equipment related items.
     *
     * @return $this
     */
    public function setCostCenterEquipment($cost_center_equipment)
    {
        if (!is_null($cost_center_equipment) && (mb_strlen($cost_center_equipment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_equipment when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_equipment'] = $cost_center_equipment;

        return $this;
    }

    /**
     * Gets cost_center_equipment_debit
     *
     * @return string
     */
    public function getCostCenterEquipmentDebit()
    {
        return $this->container['cost_center_equipment_debit'];
    }

    /**
     * Sets cost_center_equipment_debit
     *
     * @param string $cost_center_equipment_debit A cost center to use for equipment debit related items.
     *
     * @return $this
     */
    public function setCostCenterEquipmentDebit($cost_center_equipment_debit)
    {
        if (!is_null($cost_center_equipment_debit) && (mb_strlen($cost_center_equipment_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_equipment_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_equipment_debit'] = $cost_center_equipment_debit;

        return $this;
    }

    /**
     * Gets cost_center_waste
     *
     * @return string
     */
    public function getCostCenterWaste()
    {
        return $this->container['cost_center_waste'];
    }

    /**
     * Sets cost_center_waste
     *
     * @param string $cost_center_waste A cost center to use for waste related items.
     *
     * @return $this
     */
    public function setCostCenterWaste($cost_center_waste)
    {
        if (!is_null($cost_center_waste) && (mb_strlen($cost_center_waste) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_waste when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_waste'] = $cost_center_waste;

        return $this;
    }

    /**
     * Gets cost_center_waste_debit
     *
     * @return string
     */
    public function getCostCenterWasteDebit()
    {
        return $this->container['cost_center_waste_debit'];
    }

    /**
     * Sets cost_center_waste_debit
     *
     * @param string $cost_center_waste_debit A cost center to use for waste debit related items.
     *
     * @return $this
     */
    public function setCostCenterWasteDebit($cost_center_waste_debit)
    {
        if (!is_null($cost_center_waste_debit) && (mb_strlen($cost_center_waste_debit) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cost_center_waste_debit when calling DivisionWipSettings., must be smaller than or equal to 255.');
        }

        $this->container['cost_center_waste_debit'] = $cost_center_waste_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


