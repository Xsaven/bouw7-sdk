<?php
/**
 * CondensedPurchaseInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CondensedPurchaseInvoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CondensedPurchaseInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CondensedPurchaseInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'is_booked' => 'bool',
        'can_be_deleted' => 'bool',
        'book_number' => 'int',
        'order_number' => 'int',
        'invoice_number' => 'int',
        'contact' => '\Swagger\Client\Model\CondensedContact',
        'date' => 'string',
        'status' => 'int',
        'total_excluding_vat' => 'string',
        'total_including_vat' => 'string',
        'project' => '\Swagger\Client\Model\CondensedProject',
        'delivery_ticket' => '\Swagger\Client\Model\CondensedDeliveryTicket',
        'comments' => 'string',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'is_booked' => null,
        'can_be_deleted' => null,
        'book_number' => null,
        'order_number' => null,
        'invoice_number' => null,
        'contact' => null,
        'date' => null,
        'status' => null,
        'total_excluding_vat' => null,
        'total_including_vat' => null,
        'project' => null,
        'delivery_ticket' => null,
        'comments' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'is_booked' => 'isBooked',
        'can_be_deleted' => 'canBeDeleted',
        'book_number' => 'bookNumber',
        'order_number' => 'orderNumber',
        'invoice_number' => 'invoiceNumber',
        'contact' => 'contact',
        'date' => 'date',
        'status' => 'status',
        'total_excluding_vat' => 'totalExcludingVat',
        'total_including_vat' => 'totalIncludingVat',
        'project' => 'project',
        'delivery_ticket' => 'deliveryTicket',
        'comments' => 'comments',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_booked' => 'setIsBooked',
        'can_be_deleted' => 'setCanBeDeleted',
        'book_number' => 'setBookNumber',
        'order_number' => 'setOrderNumber',
        'invoice_number' => 'setInvoiceNumber',
        'contact' => 'setContact',
        'date' => 'setDate',
        'status' => 'setStatus',
        'total_excluding_vat' => 'setTotalExcludingVat',
        'total_including_vat' => 'setTotalIncludingVat',
        'project' => 'setProject',
        'delivery_ticket' => 'setDeliveryTicket',
        'comments' => 'setComments',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_booked' => 'getIsBooked',
        'can_be_deleted' => 'getCanBeDeleted',
        'book_number' => 'getBookNumber',
        'order_number' => 'getOrderNumber',
        'invoice_number' => 'getInvoiceNumber',
        'contact' => 'getContact',
        'date' => 'getDate',
        'status' => 'getStatus',
        'total_excluding_vat' => 'getTotalExcludingVat',
        'total_including_vat' => 'getTotalIncludingVat',
        'project' => 'getProject',
        'delivery_ticket' => 'getDeliveryTicket',
        'comments' => 'getComments',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_booked'] = isset($data['is_booked']) ? $data['is_booked'] : null;
        $this->container['can_be_deleted'] = isset($data['can_be_deleted']) ? $data['can_be_deleted'] : null;
        $this->container['book_number'] = isset($data['book_number']) ? $data['book_number'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['total_excluding_vat'] = isset($data['total_excluding_vat']) ? $data['total_excluding_vat'] : null;
        $this->container['total_including_vat'] = isset($data['total_including_vat']) ? $data['total_including_vat'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['delivery_ticket'] = isset($data['delivery_ticket']) ? $data['delivery_ticket'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of purchase invoice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_booked
     *
     * @return bool
     */
    public function getIsBooked()
    {
        return $this->container['is_booked'];
    }

    /**
     * Sets is_booked
     *
     * @param bool $is_booked Whether or not the purchase invoice has been booked to a bookkeeping system.
     *
     * @return $this
     */
    public function setIsBooked($is_booked)
    {
        $this->container['is_booked'] = $is_booked;

        return $this;
    }

    /**
     * Gets can_be_deleted
     *
     * @return bool
     */
    public function getCanBeDeleted()
    {
        return $this->container['can_be_deleted'];
    }

    /**
     * Sets can_be_deleted
     *
     * @param bool $can_be_deleted Whether the invoice can be deleted.
     *
     * @return $this
     */
    public function setCanBeDeleted($can_be_deleted)
    {
        $this->container['can_be_deleted'] = $can_be_deleted;

        return $this;
    }

    /**
     * Gets book_number
     *
     * @return int
     */
    public function getBookNumber()
    {
        return $this->container['book_number'];
    }

    /**
     * Sets book_number
     *
     * @param int $book_number The booknumber of the purchase invoice.
     *
     * @return $this
     */
    public function setBookNumber($book_number)
    {
        $this->container['book_number'] = $book_number;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return int
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param int $order_number The order number of the purchase invoice.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int $invoice_number The invoice number of purchase invoice.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\CondensedContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\CondensedContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Purchase invoice date.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Status of the purchase invoice.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets total_excluding_vat
     *
     * @return string
     */
    public function getTotalExcludingVat()
    {
        return $this->container['total_excluding_vat'];
    }

    /**
     * Sets total_excluding_vat
     *
     * @param string $total_excluding_vat Price excluding VAT of the purchase invoice.
     *
     * @return $this
     */
    public function setTotalExcludingVat($total_excluding_vat)
    {
        $this->container['total_excluding_vat'] = $total_excluding_vat;

        return $this;
    }

    /**
     * Gets total_including_vat
     *
     * @return string
     */
    public function getTotalIncludingVat()
    {
        return $this->container['total_including_vat'];
    }

    /**
     * Sets total_including_vat
     *
     * @param string $total_including_vat Price including VAT of the purchase invoice.
     *
     * @return $this
     */
    public function setTotalIncludingVat($total_including_vat)
    {
        $this->container['total_including_vat'] = $total_including_vat;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\CondensedProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\CondensedProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets delivery_ticket
     *
     * @return \Swagger\Client\Model\CondensedDeliveryTicket
     */
    public function getDeliveryTicket()
    {
        return $this->container['delivery_ticket'];
    }

    /**
     * Sets delivery_ticket
     *
     * @param \Swagger\Client\Model\CondensedDeliveryTicket $delivery_ticket delivery_ticket
     *
     * @return $this
     */
    public function setDeliveryTicket($delivery_ticket)
    {
        $this->container['delivery_ticket'] = $delivery_ticket;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments Comment associated with the purchase invoice.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


