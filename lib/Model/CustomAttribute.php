<?php
/**
 * CustomAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomAttribute Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'field_type' => 'string',
        'field_type_id' => 'int',
        'owner_type' => 'string',
        'owner_type_id' => 'int',
        'is_required' => 'bool',
        'is_read_only' => 'bool',
        'is_displayed_on_invoice' => 'bool',
        'is_displayed_on_completion' => 'bool',
        'is_displayed_on_hour_register' => 'bool',
        'is_displayed_on_delivery' => 'bool',
        'is_displayed_on_extra_work' => 'bool',
        'is_displayed_on_garbage' => 'bool',
        'is_displayed_on_material' => 'bool',
        'is_displayed_on_outsourcing' => 'bool',
        'is_displayed_on_checkout_document' => 'bool',
        'is_displayed_on_qhse' => 'bool',
        'is_displayed_on_contract' => 'bool',
        'dropdown_values' => 'string[]',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'field_type' => null,
        'field_type_id' => null,
        'owner_type' => null,
        'owner_type_id' => null,
        'is_required' => null,
        'is_read_only' => null,
        'is_displayed_on_invoice' => null,
        'is_displayed_on_completion' => null,
        'is_displayed_on_hour_register' => null,
        'is_displayed_on_delivery' => null,
        'is_displayed_on_extra_work' => null,
        'is_displayed_on_garbage' => null,
        'is_displayed_on_material' => null,
        'is_displayed_on_outsourcing' => null,
        'is_displayed_on_checkout_document' => null,
        'is_displayed_on_qhse' => null,
        'is_displayed_on_contract' => null,
        'dropdown_values' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'field_type' => 'fieldType',
        'field_type_id' => 'fieldTypeId',
        'owner_type' => 'ownerType',
        'owner_type_id' => 'ownerTypeId',
        'is_required' => 'isRequired',
        'is_read_only' => 'isReadOnly',
        'is_displayed_on_invoice' => 'isDisplayedOnInvoice',
        'is_displayed_on_completion' => 'isDisplayedOnCompletion',
        'is_displayed_on_hour_register' => 'isDisplayedOnHourRegister',
        'is_displayed_on_delivery' => 'isDisplayedOnDelivery',
        'is_displayed_on_extra_work' => 'isDisplayedOnExtraWork',
        'is_displayed_on_garbage' => 'isDisplayedOnGarbage',
        'is_displayed_on_material' => 'isDisplayedOnMaterial',
        'is_displayed_on_outsourcing' => 'isDisplayedOnOutsourcing',
        'is_displayed_on_checkout_document' => 'isDisplayedOnCheckoutDocument',
        'is_displayed_on_qhse' => 'isDisplayedOnQhse',
        'is_displayed_on_contract' => 'isDisplayedOnContract',
        'dropdown_values' => 'dropdownValues',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'field_type' => 'setFieldType',
        'field_type_id' => 'setFieldTypeId',
        'owner_type' => 'setOwnerType',
        'owner_type_id' => 'setOwnerTypeId',
        'is_required' => 'setIsRequired',
        'is_read_only' => 'setIsReadOnly',
        'is_displayed_on_invoice' => 'setIsDisplayedOnInvoice',
        'is_displayed_on_completion' => 'setIsDisplayedOnCompletion',
        'is_displayed_on_hour_register' => 'setIsDisplayedOnHourRegister',
        'is_displayed_on_delivery' => 'setIsDisplayedOnDelivery',
        'is_displayed_on_extra_work' => 'setIsDisplayedOnExtraWork',
        'is_displayed_on_garbage' => 'setIsDisplayedOnGarbage',
        'is_displayed_on_material' => 'setIsDisplayedOnMaterial',
        'is_displayed_on_outsourcing' => 'setIsDisplayedOnOutsourcing',
        'is_displayed_on_checkout_document' => 'setIsDisplayedOnCheckoutDocument',
        'is_displayed_on_qhse' => 'setIsDisplayedOnQhse',
        'is_displayed_on_contract' => 'setIsDisplayedOnContract',
        'dropdown_values' => 'setDropdownValues',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'field_type' => 'getFieldType',
        'field_type_id' => 'getFieldTypeId',
        'owner_type' => 'getOwnerType',
        'owner_type_id' => 'getOwnerTypeId',
        'is_required' => 'getIsRequired',
        'is_read_only' => 'getIsReadOnly',
        'is_displayed_on_invoice' => 'getIsDisplayedOnInvoice',
        'is_displayed_on_completion' => 'getIsDisplayedOnCompletion',
        'is_displayed_on_hour_register' => 'getIsDisplayedOnHourRegister',
        'is_displayed_on_delivery' => 'getIsDisplayedOnDelivery',
        'is_displayed_on_extra_work' => 'getIsDisplayedOnExtraWork',
        'is_displayed_on_garbage' => 'getIsDisplayedOnGarbage',
        'is_displayed_on_material' => 'getIsDisplayedOnMaterial',
        'is_displayed_on_outsourcing' => 'getIsDisplayedOnOutsourcing',
        'is_displayed_on_checkout_document' => 'getIsDisplayedOnCheckoutDocument',
        'is_displayed_on_qhse' => 'getIsDisplayedOnQhse',
        'is_displayed_on_contract' => 'getIsDisplayedOnContract',
        'dropdown_values' => 'getDropdownValues',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OWNER_TYPE_PROJECT = 'project';
    const OWNER_TYPE_CONTACT = 'contact';
    const OWNER_TYPE_JOURNAL_DAY = 'journal_day';
    const OWNER_TYPE_EMPLOYEE = 'employee';
    const OWNER_TYPE_PROPERTY_ASSET = 'property_asset';
    const OWNER_TYPE_JOURNAL_REPORT = 'journal_report';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerTypeAllowableValues()
    {
        return [
            self::OWNER_TYPE_PROJECT,
            self::OWNER_TYPE_CONTACT,
            self::OWNER_TYPE_JOURNAL_DAY,
            self::OWNER_TYPE_EMPLOYEE,
            self::OWNER_TYPE_PROPERTY_ASSET,
            self::OWNER_TYPE_JOURNAL_REPORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['field_type_id'] = isset($data['field_type_id']) ? $data['field_type_id'] : null;
        $this->container['owner_type'] = isset($data['owner_type']) ? $data['owner_type'] : null;
        $this->container['owner_type_id'] = isset($data['owner_type_id']) ? $data['owner_type_id'] : null;
        $this->container['is_required'] = isset($data['is_required']) ? $data['is_required'] : null;
        $this->container['is_read_only'] = isset($data['is_read_only']) ? $data['is_read_only'] : null;
        $this->container['is_displayed_on_invoice'] = isset($data['is_displayed_on_invoice']) ? $data['is_displayed_on_invoice'] : null;
        $this->container['is_displayed_on_completion'] = isset($data['is_displayed_on_completion']) ? $data['is_displayed_on_completion'] : null;
        $this->container['is_displayed_on_hour_register'] = isset($data['is_displayed_on_hour_register']) ? $data['is_displayed_on_hour_register'] : null;
        $this->container['is_displayed_on_delivery'] = isset($data['is_displayed_on_delivery']) ? $data['is_displayed_on_delivery'] : null;
        $this->container['is_displayed_on_extra_work'] = isset($data['is_displayed_on_extra_work']) ? $data['is_displayed_on_extra_work'] : null;
        $this->container['is_displayed_on_garbage'] = isset($data['is_displayed_on_garbage']) ? $data['is_displayed_on_garbage'] : null;
        $this->container['is_displayed_on_material'] = isset($data['is_displayed_on_material']) ? $data['is_displayed_on_material'] : null;
        $this->container['is_displayed_on_outsourcing'] = isset($data['is_displayed_on_outsourcing']) ? $data['is_displayed_on_outsourcing'] : null;
        $this->container['is_displayed_on_checkout_document'] = isset($data['is_displayed_on_checkout_document']) ? $data['is_displayed_on_checkout_document'] : null;
        $this->container['is_displayed_on_qhse'] = isset($data['is_displayed_on_qhse']) ? $data['is_displayed_on_qhse'] : null;
        $this->container['is_displayed_on_contract'] = isset($data['is_displayed_on_contract']) ? $data['is_displayed_on_contract'] : null;
        $this->container['dropdown_values'] = isset($data['dropdown_values']) ? $data['dropdown_values'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['field_type_id'] === null) {
            $invalidProperties[] = "'field_type_id' can't be null";
        }
        $allowedValues = $this->getOwnerTypeAllowableValues();
        if (!is_null($this->container['owner_type']) && !in_array($this->container['owner_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'owner_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['owner_type_id'] === null) {
            $invalidProperties[] = "'owner_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the custom attribute.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the custom attribute.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomAttribute., must be smaller than or equal to 256.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type The I18N key of the field type.
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets field_type_id
     *
     * @return int
     */
    public function getFieldTypeId()
    {
        return $this->container['field_type_id'];
    }

    /**
     * Sets field_type_id
     *
     * @param int $field_type_id The ID of the field type.
     *
     * @return $this
     */
    public function setFieldTypeId($field_type_id)
    {
        $this->container['field_type_id'] = $field_type_id;

        return $this;
    }

    /**
     * Gets owner_type
     *
     * @return string
     */
    public function getOwnerType()
    {
        return $this->container['owner_type'];
    }

    /**
     * Sets owner_type
     *
     * @param string $owner_type The I18N key of the owner type.
     *
     * @return $this
     */
    public function setOwnerType($owner_type)
    {
        $allowedValues = $this->getOwnerTypeAllowableValues();
        if (!is_null($owner_type) && !in_array($owner_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'owner_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owner_type'] = $owner_type;

        return $this;
    }

    /**
     * Gets owner_type_id
     *
     * @return int
     */
    public function getOwnerTypeId()
    {
        return $this->container['owner_type_id'];
    }

    /**
     * Sets owner_type_id
     *
     * @param int $owner_type_id The ID of the owner type.
     *
     * @return $this
     */
    public function setOwnerTypeId($owner_type_id)
    {
        $this->container['owner_type_id'] = $owner_type_id;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool $is_required Whether the custom attribute is a required field.
     *
     * @return $this
     */
    public function setIsRequired($is_required)
    {
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets is_read_only
     *
     * @return bool
     */
    public function getIsReadOnly()
    {
        return $this->container['is_read_only'];
    }

    /**
     * Sets is_read_only
     *
     * @param bool $is_read_only Whether the custom attribute is a read-only field.
     *
     * @return $this
     */
    public function setIsReadOnly($is_read_only)
    {
        $this->container['is_read_only'] = $is_read_only;

        return $this;
    }

    /**
     * Gets is_displayed_on_invoice
     *
     * @return bool
     */
    public function getIsDisplayedOnInvoice()
    {
        return $this->container['is_displayed_on_invoice'];
    }

    /**
     * Sets is_displayed_on_invoice
     *
     * @param bool $is_displayed_on_invoice Whether the custom attribute is displayed on an invoice document.
     *
     * @return $this
     */
    public function setIsDisplayedOnInvoice($is_displayed_on_invoice)
    {
        $this->container['is_displayed_on_invoice'] = $is_displayed_on_invoice;

        return $this;
    }

    /**
     * Gets is_displayed_on_completion
     *
     * @return bool
     */
    public function getIsDisplayedOnCompletion()
    {
        return $this->container['is_displayed_on_completion'];
    }

    /**
     * Sets is_displayed_on_completion
     *
     * @param bool $is_displayed_on_completion Whether the custom attribute is displayed on a completion document.
     *
     * @return $this
     */
    public function setIsDisplayedOnCompletion($is_displayed_on_completion)
    {
        $this->container['is_displayed_on_completion'] = $is_displayed_on_completion;

        return $this;
    }

    /**
     * Gets is_displayed_on_hour_register
     *
     * @return bool
     */
    public function getIsDisplayedOnHourRegister()
    {
        return $this->container['is_displayed_on_hour_register'];
    }

    /**
     * Sets is_displayed_on_hour_register
     *
     * @param bool $is_displayed_on_hour_register Whether the custom attribute is displayed on a hour register document.
     *
     * @return $this
     */
    public function setIsDisplayedOnHourRegister($is_displayed_on_hour_register)
    {
        $this->container['is_displayed_on_hour_register'] = $is_displayed_on_hour_register;

        return $this;
    }

    /**
     * Gets is_displayed_on_delivery
     *
     * @return bool
     */
    public function getIsDisplayedOnDelivery()
    {
        return $this->container['is_displayed_on_delivery'];
    }

    /**
     * Sets is_displayed_on_delivery
     *
     * @param bool $is_displayed_on_delivery Whether the custom attribute is displayed on a delivery document.
     *
     * @return $this
     */
    public function setIsDisplayedOnDelivery($is_displayed_on_delivery)
    {
        $this->container['is_displayed_on_delivery'] = $is_displayed_on_delivery;

        return $this;
    }

    /**
     * Gets is_displayed_on_extra_work
     *
     * @return bool
     */
    public function getIsDisplayedOnExtraWork()
    {
        return $this->container['is_displayed_on_extra_work'];
    }

    /**
     * Sets is_displayed_on_extra_work
     *
     * @param bool $is_displayed_on_extra_work Whether the custom attribute is displayed on a extra work document.
     *
     * @return $this
     */
    public function setIsDisplayedOnExtraWork($is_displayed_on_extra_work)
    {
        $this->container['is_displayed_on_extra_work'] = $is_displayed_on_extra_work;

        return $this;
    }

    /**
     * Gets is_displayed_on_garbage
     *
     * @return bool
     */
    public function getIsDisplayedOnGarbage()
    {
        return $this->container['is_displayed_on_garbage'];
    }

    /**
     * Sets is_displayed_on_garbage
     *
     * @param bool $is_displayed_on_garbage Whether the custom attribute is displayed on a waste document and object.
     *
     * @return $this
     */
    public function setIsDisplayedOnGarbage($is_displayed_on_garbage)
    {
        $this->container['is_displayed_on_garbage'] = $is_displayed_on_garbage;

        return $this;
    }

    /**
     * Gets is_displayed_on_material
     *
     * @return bool
     */
    public function getIsDisplayedOnMaterial()
    {
        return $this->container['is_displayed_on_material'];
    }

    /**
     * Sets is_displayed_on_material
     *
     * @param bool $is_displayed_on_material Whether the custom attribute is displayed on a material document and object.
     *
     * @return $this
     */
    public function setIsDisplayedOnMaterial($is_displayed_on_material)
    {
        $this->container['is_displayed_on_material'] = $is_displayed_on_material;

        return $this;
    }

    /**
     * Gets is_displayed_on_outsourcing
     *
     * @return bool
     */
    public function getIsDisplayedOnOutsourcing()
    {
        return $this->container['is_displayed_on_outsourcing'];
    }

    /**
     * Sets is_displayed_on_outsourcing
     *
     * @param bool $is_displayed_on_outsourcing Whether the custom attribute is displayed on a outsourcing document and object.
     *
     * @return $this
     */
    public function setIsDisplayedOnOutsourcing($is_displayed_on_outsourcing)
    {
        $this->container['is_displayed_on_outsourcing'] = $is_displayed_on_outsourcing;

        return $this;
    }

    /**
     * Gets is_displayed_on_checkout_document
     *
     * @return bool
     */
    public function getIsDisplayedOnCheckoutDocument()
    {
        return $this->container['is_displayed_on_checkout_document'];
    }

    /**
     * Sets is_displayed_on_checkout_document
     *
     * @param bool $is_displayed_on_checkout_document Whether the custom attribute is displayed on a checkout document.
     *
     * @return $this
     */
    public function setIsDisplayedOnCheckoutDocument($is_displayed_on_checkout_document)
    {
        $this->container['is_displayed_on_checkout_document'] = $is_displayed_on_checkout_document;

        return $this;
    }

    /**
     * Gets is_displayed_on_qhse
     *
     * @return bool
     */
    public function getIsDisplayedOnQhse()
    {
        return $this->container['is_displayed_on_qhse'];
    }

    /**
     * Sets is_displayed_on_qhse
     *
     * @param bool $is_displayed_on_qhse Whether the custom attribute is displayed on a QHSE document.
     *
     * @return $this
     */
    public function setIsDisplayedOnQhse($is_displayed_on_qhse)
    {
        $this->container['is_displayed_on_qhse'] = $is_displayed_on_qhse;

        return $this;
    }

    /**
     * Gets is_displayed_on_contract
     *
     * @return bool
     */
    public function getIsDisplayedOnContract()
    {
        return $this->container['is_displayed_on_contract'];
    }

    /**
     * Sets is_displayed_on_contract
     *
     * @param bool $is_displayed_on_contract Whether the custom attribute is visible on a contract.
     *
     * @return $this
     */
    public function setIsDisplayedOnContract($is_displayed_on_contract)
    {
        $this->container['is_displayed_on_contract'] = $is_displayed_on_contract;

        return $this;
    }

    /**
     * Gets dropdown_values
     *
     * @return string[]
     */
    public function getDropdownValues()
    {
        return $this->container['dropdown_values'];
    }

    /**
     * Sets dropdown_values
     *
     * @param string[] $dropdown_values The dropdown values for the custom attribute.
     *
     * @return $this
     */
    public function setDropdownValues($dropdown_values)
    {
        $this->container['dropdown_values'] = $dropdown_values;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation time of the entity.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that created the entity.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The last updated time of the entity.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by The user that last updated the entity.
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


