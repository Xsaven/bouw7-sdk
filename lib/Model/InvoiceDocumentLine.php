<?php
/**
 * InvoiceDocumentLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceDocumentLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceDocumentLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceDocumentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'project_id' => 'int',
        'sort_index' => 'int',
        'linked_booking_items' => '\Swagger\Client\Model\LinkedBookingItem[]',
        'project_invoice_term_id' => 'int',
        'description' => 'string',
        'quantity' => 'string',
        'unit_name' => 'string',
        'unit_price' => 'string',
        'sub_total' => 'string',
        'surcharge_percentage' => 'string',
        'vat_tariff_percentage' => 'string',
        'vat_tariff_id' => 'int',
        'ledger' => 'string',
        'cost_center' => 'string',
        'reference' => 'string',
        'price_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'project_id' => null,
        'sort_index' => null,
        'linked_booking_items' => null,
        'project_invoice_term_id' => null,
        'description' => null,
        'quantity' => null,
        'unit_name' => null,
        'unit_price' => null,
        'sub_total' => null,
        'surcharge_percentage' => null,
        'vat_tariff_percentage' => null,
        'vat_tariff_id' => null,
        'ledger' => null,
        'cost_center' => null,
        'reference' => null,
        'price_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project_id' => 'projectId',
        'sort_index' => 'sortIndex',
        'linked_booking_items' => 'linkedBookingItems',
        'project_invoice_term_id' => 'projectInvoiceTermId',
        'description' => 'description',
        'quantity' => 'quantity',
        'unit_name' => 'unitName',
        'unit_price' => 'unitPrice',
        'sub_total' => 'subTotal',
        'surcharge_percentage' => 'surchargePercentage',
        'vat_tariff_percentage' => 'vatTariffPercentage',
        'vat_tariff_id' => 'vatTariffId',
        'ledger' => 'ledger',
        'cost_center' => 'costCenter',
        'reference' => 'reference',
        'price_code' => 'priceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project_id' => 'setProjectId',
        'sort_index' => 'setSortIndex',
        'linked_booking_items' => 'setLinkedBookingItems',
        'project_invoice_term_id' => 'setProjectInvoiceTermId',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'unit_name' => 'setUnitName',
        'unit_price' => 'setUnitPrice',
        'sub_total' => 'setSubTotal',
        'surcharge_percentage' => 'setSurchargePercentage',
        'vat_tariff_percentage' => 'setVatTariffPercentage',
        'vat_tariff_id' => 'setVatTariffId',
        'ledger' => 'setLedger',
        'cost_center' => 'setCostCenter',
        'reference' => 'setReference',
        'price_code' => 'setPriceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project_id' => 'getProjectId',
        'sort_index' => 'getSortIndex',
        'linked_booking_items' => 'getLinkedBookingItems',
        'project_invoice_term_id' => 'getProjectInvoiceTermId',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'unit_name' => 'getUnitName',
        'unit_price' => 'getUnitPrice',
        'sub_total' => 'getSubTotal',
        'surcharge_percentage' => 'getSurchargePercentage',
        'vat_tariff_percentage' => 'getVatTariffPercentage',
        'vat_tariff_id' => 'getVatTariffId',
        'ledger' => 'getLedger',
        'cost_center' => 'getCostCenter',
        'reference' => 'getReference',
        'price_code' => 'getPriceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['sort_index'] = isset($data['sort_index']) ? $data['sort_index'] : null;
        $this->container['linked_booking_items'] = isset($data['linked_booking_items']) ? $data['linked_booking_items'] : null;
        $this->container['project_invoice_term_id'] = isset($data['project_invoice_term_id']) ? $data['project_invoice_term_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['surcharge_percentage'] = isset($data['surcharge_percentage']) ? $data['surcharge_percentage'] : null;
        $this->container['vat_tariff_percentage'] = isset($data['vat_tariff_percentage']) ? $data['vat_tariff_percentage'] : null;
        $this->container['vat_tariff_id'] = isset($data['vat_tariff_id']) ? $data['vat_tariff_id'] : null;
        $this->container['ledger'] = isset($data['ledger']) ? $data['ledger'] : null;
        $this->container['cost_center'] = isset($data['cost_center']) ? $data['cost_center'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['price_code'] = isset($data['price_code']) ? $data['price_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sort_index'] === null) {
            $invalidProperties[] = "'sort_index' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['sub_total'] === null) {
            $invalidProperties[] = "'sub_total' can't be null";
        }
        if ($this->container['vat_tariff_id'] === null) {
            $invalidProperties[] = "'vat_tariff_id' can't be null";
        }
        if (!is_null($this->container['price_code']) && (mb_strlen($this->container['price_code']) > 35)) {
            $invalidProperties[] = "invalid value for 'price_code', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the invoice line. Must be omitted to create a new invoice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int $project_id The ID of the project associated with this invoice line.
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets sort_index
     *
     * @return int
     */
    public function getSortIndex()
    {
        return $this->container['sort_index'];
    }

    /**
     * Sets sort_index
     *
     * @param int $sort_index The sort index of this invoice line.
     *
     * @return $this
     */
    public function setSortIndex($sort_index)
    {
        $this->container['sort_index'] = $sort_index;

        return $this;
    }

    /**
     * Gets linked_booking_items
     *
     * @return \Swagger\Client\Model\LinkedBookingItem[]
     */
    public function getLinkedBookingItems()
    {
        return $this->container['linked_booking_items'];
    }

    /**
     * Sets linked_booking_items
     *
     * @param \Swagger\Client\Model\LinkedBookingItem[] $linked_booking_items The linked booking items of this invoice line.
     *
     * @return $this
     */
    public function setLinkedBookingItems($linked_booking_items)
    {
        $this->container['linked_booking_items'] = $linked_booking_items;

        return $this;
    }

    /**
     * Gets project_invoice_term_id
     *
     * @return int
     */
    public function getProjectInvoiceTermId()
    {
        return $this->container['project_invoice_term_id'];
    }

    /**
     * Sets project_invoice_term_id
     *
     * @param int $project_invoice_term_id The ID of the project invoice term associated with this line.
     *
     * @return $this
     */
    public function setProjectInvoiceTermId($project_invoice_term_id)
    {
        $this->container['project_invoice_term_id'] = $project_invoice_term_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The name of the invoice line.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling InvoiceDocumentLine., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity The unit quantity of the invoice line.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string $unit_name The name of the unit in the invoice line.
     *
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return string
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param string $unit_price The unit price of the invoice line.
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return string
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param string $sub_total The sub-total price of the invoice line.
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets surcharge_percentage
     *
     * @return string
     */
    public function getSurchargePercentage()
    {
        return $this->container['surcharge_percentage'];
    }

    /**
     * Sets surcharge_percentage
     *
     * @param string $surcharge_percentage The surcharge percentage of the invoice line.
     *
     * @return $this
     */
    public function setSurchargePercentage($surcharge_percentage)
    {
        $this->container['surcharge_percentage'] = $surcharge_percentage;

        return $this;
    }

    /**
     * Gets vat_tariff_percentage
     *
     * @return string
     */
    public function getVatTariffPercentage()
    {
        return $this->container['vat_tariff_percentage'];
    }

    /**
     * Sets vat_tariff_percentage
     *
     * @param string $vat_tariff_percentage The VAT-tariff percentage used on the invoice line. Must be set to 0 if VAT is shifted.
     *
     * @return $this
     */
    public function setVatTariffPercentage($vat_tariff_percentage)
    {
        $this->container['vat_tariff_percentage'] = $vat_tariff_percentage;

        return $this;
    }

    /**
     * Gets vat_tariff_id
     *
     * @return int
     */
    public function getVatTariffId()
    {
        return $this->container['vat_tariff_id'];
    }

    /**
     * Sets vat_tariff_id
     *
     * @param int $vat_tariff_id The VAT-tariff ID used on the invoice line.
     *
     * @return $this
     */
    public function setVatTariffId($vat_tariff_id)
    {
        $this->container['vat_tariff_id'] = $vat_tariff_id;

        return $this;
    }

    /**
     * Gets ledger
     *
     * @return string
     */
    public function getLedger()
    {
        return $this->container['ledger'];
    }

    /**
     * Sets ledger
     *
     * @param string $ledger A reference to the ledger of the invoice line.
     *
     * @return $this
     */
    public function setLedger($ledger)
    {
        $this->container['ledger'] = $ledger;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string $cost_center A reference to the cost center associated with the invoice line.
     *
     * @return $this
     */
    public function setCostCenter($cost_center)
    {
        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference field of project (if available) from the invoice line.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets price_code
     *
     * @return string
     */
    public function getPriceCode()
    {
        return $this->container['price_code'];
    }

    /**
     * Sets price_code
     *
     * @param string $price_code The price code of the invoice line.
     *
     * @return $this
     */
    public function setPriceCode($price_code)
    {
        if (!is_null($price_code) && (mb_strlen($price_code) > 35)) {
            throw new \InvalidArgumentException('invalid length for $price_code when calling InvoiceDocumentLine., must be smaller than or equal to 35.');
        }

        $this->container['price_code'] = $price_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


