<?php
/**
 * SurchargeCollection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SurchargeCollection Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SurchargeCollection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SurchargeCollection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'delivery_ticket_percentage' => 'string',
        'work_outsourcing_percentage' => 'string',
        'purchase_invoice_percentage' => 'string',
        'material_percentage' => 'string',
        'equipment_percentage' => 'string',
        'subcontracting_percentage' => 'string',
        'misc_percentage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'delivery_ticket_percentage' => null,
        'work_outsourcing_percentage' => null,
        'purchase_invoice_percentage' => null,
        'material_percentage' => null,
        'equipment_percentage' => null,
        'subcontracting_percentage' => null,
        'misc_percentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_ticket_percentage' => 'deliveryTicketPercentage',
        'work_outsourcing_percentage' => 'workOutsourcingPercentage',
        'purchase_invoice_percentage' => 'purchaseInvoicePercentage',
        'material_percentage' => 'materialPercentage',
        'equipment_percentage' => 'equipmentPercentage',
        'subcontracting_percentage' => 'subcontractingPercentage',
        'misc_percentage' => 'miscPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_ticket_percentage' => 'setDeliveryTicketPercentage',
        'work_outsourcing_percentage' => 'setWorkOutsourcingPercentage',
        'purchase_invoice_percentage' => 'setPurchaseInvoicePercentage',
        'material_percentage' => 'setMaterialPercentage',
        'equipment_percentage' => 'setEquipmentPercentage',
        'subcontracting_percentage' => 'setSubcontractingPercentage',
        'misc_percentage' => 'setMiscPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_ticket_percentage' => 'getDeliveryTicketPercentage',
        'work_outsourcing_percentage' => 'getWorkOutsourcingPercentage',
        'purchase_invoice_percentage' => 'getPurchaseInvoicePercentage',
        'material_percentage' => 'getMaterialPercentage',
        'equipment_percentage' => 'getEquipmentPercentage',
        'subcontracting_percentage' => 'getSubcontractingPercentage',
        'misc_percentage' => 'getMiscPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delivery_ticket_percentage'] = isset($data['delivery_ticket_percentage']) ? $data['delivery_ticket_percentage'] : null;
        $this->container['work_outsourcing_percentage'] = isset($data['work_outsourcing_percentage']) ? $data['work_outsourcing_percentage'] : null;
        $this->container['purchase_invoice_percentage'] = isset($data['purchase_invoice_percentage']) ? $data['purchase_invoice_percentage'] : null;
        $this->container['material_percentage'] = isset($data['material_percentage']) ? $data['material_percentage'] : null;
        $this->container['equipment_percentage'] = isset($data['equipment_percentage']) ? $data['equipment_percentage'] : null;
        $this->container['subcontracting_percentage'] = isset($data['subcontracting_percentage']) ? $data['subcontracting_percentage'] : null;
        $this->container['misc_percentage'] = isset($data['misc_percentage']) ? $data['misc_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_ticket_percentage
     *
     * @return string
     */
    public function getDeliveryTicketPercentage()
    {
        return $this->container['delivery_ticket_percentage'];
    }

    /**
     * Sets delivery_ticket_percentage
     *
     * @param string $delivery_ticket_percentage Delivery ticket surcharge percentage.
     *
     * @return $this
     */
    public function setDeliveryTicketPercentage($delivery_ticket_percentage)
    {
        $this->container['delivery_ticket_percentage'] = $delivery_ticket_percentage;

        return $this;
    }

    /**
     * Gets work_outsourcing_percentage
     *
     * @return string
     */
    public function getWorkOutsourcingPercentage()
    {
        return $this->container['work_outsourcing_percentage'];
    }

    /**
     * Sets work_outsourcing_percentage
     *
     * @param string $work_outsourcing_percentage Outsourcing surcharge percentage.
     *
     * @return $this
     */
    public function setWorkOutsourcingPercentage($work_outsourcing_percentage)
    {
        $this->container['work_outsourcing_percentage'] = $work_outsourcing_percentage;

        return $this;
    }

    /**
     * Gets purchase_invoice_percentage
     *
     * @return string
     */
    public function getPurchaseInvoicePercentage()
    {
        return $this->container['purchase_invoice_percentage'];
    }

    /**
     * Sets purchase_invoice_percentage
     *
     * @param string $purchase_invoice_percentage Purchase invoice surcharge percentage.
     *
     * @return $this
     */
    public function setPurchaseInvoicePercentage($purchase_invoice_percentage)
    {
        $this->container['purchase_invoice_percentage'] = $purchase_invoice_percentage;

        return $this;
    }

    /**
     * Gets material_percentage
     *
     * @return string
     */
    public function getMaterialPercentage()
    {
        return $this->container['material_percentage'];
    }

    /**
     * Sets material_percentage
     *
     * @param string $material_percentage Material surcharge percentage.
     *
     * @return $this
     */
    public function setMaterialPercentage($material_percentage)
    {
        $this->container['material_percentage'] = $material_percentage;

        return $this;
    }

    /**
     * Gets equipment_percentage
     *
     * @return string
     */
    public function getEquipmentPercentage()
    {
        return $this->container['equipment_percentage'];
    }

    /**
     * Sets equipment_percentage
     *
     * @param string $equipment_percentage Equipment surcharge percentage.
     *
     * @return $this
     */
    public function setEquipmentPercentage($equipment_percentage)
    {
        $this->container['equipment_percentage'] = $equipment_percentage;

        return $this;
    }

    /**
     * Gets subcontracting_percentage
     *
     * @return string
     */
    public function getSubcontractingPercentage()
    {
        return $this->container['subcontracting_percentage'];
    }

    /**
     * Sets subcontracting_percentage
     *
     * @param string $subcontracting_percentage Subcontracting surcharge percentage.
     *
     * @return $this
     */
    public function setSubcontractingPercentage($subcontracting_percentage)
    {
        $this->container['subcontracting_percentage'] = $subcontracting_percentage;

        return $this;
    }

    /**
     * Gets misc_percentage
     *
     * @return string
     */
    public function getMiscPercentage()
    {
        return $this->container['misc_percentage'];
    }

    /**
     * Sets misc_percentage
     *
     * @param string $misc_percentage Miscellaneous surcharge percentage.
     *
     * @return $this
     */
    public function setMiscPercentage($misc_percentage)
    {
        $this->container['misc_percentage'] = $misc_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


