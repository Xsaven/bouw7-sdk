<?php
/**
 * HourLogBookingAttachmentType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HourLogBookingAttachmentType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HourLogBookingAttachmentType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HourLogBookingAttachmentType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_booking_items' => 'bool',
        'start_date' => 'string',
        'end_date' => 'string',
        'display_type' => 'int',
        'show_project_description' => 'bool',
        'hour_types' => '\Swagger\Client\Model\HourType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_booking_items' => null,
        'start_date' => null,
        'end_date' => null,
        'display_type' => null,
        'show_project_description' => null,
        'hour_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_booking_items' => 'fromBookingItems',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'display_type' => 'displayType',
        'show_project_description' => 'showProjectDescription',
        'hour_types' => 'hourTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_booking_items' => 'setFromBookingItems',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'display_type' => 'setDisplayType',
        'show_project_description' => 'setShowProjectDescription',
        'hour_types' => 'setHourTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_booking_items' => 'getFromBookingItems',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'display_type' => 'getDisplayType',
        'show_project_description' => 'getShowProjectDescription',
        'hour_types' => 'getHourTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_booking_items'] = isset($data['from_booking_items']) ? $data['from_booking_items'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['display_type'] = isset($data['display_type']) ? $data['display_type'] : null;
        $this->container['show_project_description'] = isset($data['show_project_description']) ? $data['show_project_description'] : null;
        $this->container['hour_types'] = isset($data['hour_types']) ? $data['hour_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_type'] === null) {
            $invalidProperties[] = "'display_type' can't be null";
        }
        if ($this->container['show_project_description'] === null) {
            $invalidProperties[] = "'show_project_description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_booking_items
     *
     * @return bool
     */
    public function getFromBookingItems()
    {
        return $this->container['from_booking_items'];
    }

    /**
     * Sets from_booking_items
     *
     * @param bool $from_booking_items Whether or not to generate the HourLog PDF based on booking items (false = based on project).
     *
     * @return $this
     */
    public function setFromBookingItems($from_booking_items)
    {
        $this->container['from_booking_items'] = $from_booking_items;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Start date of the date range filter.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End date of the date range filter.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets display_type
     *
     * @return int
     */
    public function getDisplayType()
    {
        return $this->container['display_type'];
    }

    /**
     * Sets display_type
     *
     * @param int $display_type The display type for the hours.
     *
     * @return $this
     */
    public function setDisplayType($display_type)
    {
        $this->container['display_type'] = $display_type;

        return $this;
    }

    /**
     * Gets show_project_description
     *
     * @return bool
     */
    public function getShowProjectDescription()
    {
        return $this->container['show_project_description'];
    }

    /**
     * Sets show_project_description
     *
     * @param bool $show_project_description Whether to display the project description on the PDF.
     *
     * @return $this
     */
    public function setShowProjectDescription($show_project_description)
    {
        $this->container['show_project_description'] = $show_project_description;

        return $this;
    }

    /**
     * Gets hour_types
     *
     * @return \Swagger\Client\Model\HourType[]
     */
    public function getHourTypes()
    {
        return $this->container['hour_types'];
    }

    /**
     * Sets hour_types
     *
     * @param \Swagger\Client\Model\HourType[] $hour_types hour_types
     *
     * @return $this
     */
    public function setHourTypes($hour_types)
    {
        $this->container['hour_types'] = $hour_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


