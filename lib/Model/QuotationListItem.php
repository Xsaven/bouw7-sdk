<?php
/**
 * QuotationListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QuotationListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuotationListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuotationListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'quotation_number' => 'string',
        'subject' => 'string',
        'reference' => 'string',
        'quotation_date' => 'string',
        'closing_chance' => 'int',
        'expected_closing_date' => 'string',
        'commission_percentage' => 'string',
        'salutation' => 'int',
        'salutation_text' => 'string',
        'language' => 'string',
        'internal_note' => 'string',
        'subtotal' => 'string',
        'total' => 'string',
        'employee' => '\Swagger\Client\Model\NestedEmployeeListItem',
        'contact' => '\Swagger\Client\Model\NestedContactListItem',
        'branch' => '\Swagger\Client\Model\NestedBranchListItem',
        'project' => '\Swagger\Client\Model\NestedProjectListItem',
        'quotation_status' => '\Swagger\Client\Model\NestedQuotationStatusListItem',
        'contact_person' => '\Swagger\Client\Model\NestedContactPersonListItem',
        'contact_person_text' => 'string',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'quotation_number' => null,
        'subject' => null,
        'reference' => null,
        'quotation_date' => null,
        'closing_chance' => null,
        'expected_closing_date' => null,
        'commission_percentage' => null,
        'salutation' => null,
        'salutation_text' => null,
        'language' => null,
        'internal_note' => null,
        'subtotal' => null,
        'total' => null,
        'employee' => null,
        'contact' => null,
        'branch' => null,
        'project' => null,
        'quotation_status' => null,
        'contact_person' => null,
        'contact_person_text' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'quotation_number' => 'quotationNumber',
        'subject' => 'subject',
        'reference' => 'reference',
        'quotation_date' => 'quotationDate',
        'closing_chance' => 'closingChance',
        'expected_closing_date' => 'expectedClosingDate',
        'commission_percentage' => 'commissionPercentage',
        'salutation' => 'salutation',
        'salutation_text' => 'salutationText',
        'language' => 'language',
        'internal_note' => 'internalNote',
        'subtotal' => 'subtotal',
        'total' => 'total',
        'employee' => 'employee',
        'contact' => 'contact',
        'branch' => 'branch',
        'project' => 'project',
        'quotation_status' => 'quotationStatus',
        'contact_person' => 'contactPerson',
        'contact_person_text' => 'contactPersonText',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'quotation_number' => 'setQuotationNumber',
        'subject' => 'setSubject',
        'reference' => 'setReference',
        'quotation_date' => 'setQuotationDate',
        'closing_chance' => 'setClosingChance',
        'expected_closing_date' => 'setExpectedClosingDate',
        'commission_percentage' => 'setCommissionPercentage',
        'salutation' => 'setSalutation',
        'salutation_text' => 'setSalutationText',
        'language' => 'setLanguage',
        'internal_note' => 'setInternalNote',
        'subtotal' => 'setSubtotal',
        'total' => 'setTotal',
        'employee' => 'setEmployee',
        'contact' => 'setContact',
        'branch' => 'setBranch',
        'project' => 'setProject',
        'quotation_status' => 'setQuotationStatus',
        'contact_person' => 'setContactPerson',
        'contact_person_text' => 'setContactPersonText',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'quotation_number' => 'getQuotationNumber',
        'subject' => 'getSubject',
        'reference' => 'getReference',
        'quotation_date' => 'getQuotationDate',
        'closing_chance' => 'getClosingChance',
        'expected_closing_date' => 'getExpectedClosingDate',
        'commission_percentage' => 'getCommissionPercentage',
        'salutation' => 'getSalutation',
        'salutation_text' => 'getSalutationText',
        'language' => 'getLanguage',
        'internal_note' => 'getInternalNote',
        'subtotal' => 'getSubtotal',
        'total' => 'getTotal',
        'employee' => 'getEmployee',
        'contact' => 'getContact',
        'branch' => 'getBranch',
        'project' => 'getProject',
        'quotation_status' => 'getQuotationStatus',
        'contact_person' => 'getContactPerson',
        'contact_person_text' => 'getContactPersonText',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['quotation_number'] = isset($data['quotation_number']) ? $data['quotation_number'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['quotation_date'] = isset($data['quotation_date']) ? $data['quotation_date'] : null;
        $this->container['closing_chance'] = isset($data['closing_chance']) ? $data['closing_chance'] : null;
        $this->container['expected_closing_date'] = isset($data['expected_closing_date']) ? $data['expected_closing_date'] : null;
        $this->container['commission_percentage'] = isset($data['commission_percentage']) ? $data['commission_percentage'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['salutation_text'] = isset($data['salutation_text']) ? $data['salutation_text'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['internal_note'] = isset($data['internal_note']) ? $data['internal_note'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['quotation_status'] = isset($data['quotation_status']) ? $data['quotation_status'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['contact_person_text'] = isset($data['contact_person_text']) ? $data['contact_person_text'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['closing_chance']) && ($this->container['closing_chance'] > 100)) {
            $invalidProperties[] = "invalid value for 'closing_chance', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['closing_chance']) && ($this->container['closing_chance'] < 0)) {
            $invalidProperties[] = "invalid value for 'closing_chance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['salutation_text']) && (mb_strlen($this->container['salutation_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'salutation_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_person_text']) && (mb_strlen($this->container['contact_person_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_person_text', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the quotation.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quotation_number
     *
     * @return string
     */
    public function getQuotationNumber()
    {
        return $this->container['quotation_number'];
    }

    /**
     * Sets quotation_number
     *
     * @param string $quotation_number The number of the quotation.
     *
     * @return $this
     */
    public function setQuotationNumber($quotation_number)
    {
        $this->container['quotation_number'] = $quotation_number;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The subject of the quotation.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference of the quotation.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets quotation_date
     *
     * @return string
     */
    public function getQuotationDate()
    {
        return $this->container['quotation_date'];
    }

    /**
     * Sets quotation_date
     *
     * @param string $quotation_date The date of the quotation, represented in ATOM-format.
     *
     * @return $this
     */
    public function setQuotationDate($quotation_date)
    {
        $this->container['quotation_date'] = $quotation_date;

        return $this;
    }

    /**
     * Gets closing_chance
     *
     * @return int
     */
    public function getClosingChance()
    {
        return $this->container['closing_chance'];
    }

    /**
     * Sets closing_chance
     *
     * @param int $closing_chance The closing chance of this quotation.
     *
     * @return $this
     */
    public function setClosingChance($closing_chance)
    {

        if (!is_null($closing_chance) && ($closing_chance > 100)) {
            throw new \InvalidArgumentException('invalid value for $closing_chance when calling QuotationListItem., must be smaller than or equal to 100.');
        }
        if (!is_null($closing_chance) && ($closing_chance < 0)) {
            throw new \InvalidArgumentException('invalid value for $closing_chance when calling QuotationListItem., must be bigger than or equal to 0.');
        }

        $this->container['closing_chance'] = $closing_chance;

        return $this;
    }

    /**
     * Gets expected_closing_date
     *
     * @return string
     */
    public function getExpectedClosingDate()
    {
        return $this->container['expected_closing_date'];
    }

    /**
     * Sets expected_closing_date
     *
     * @param string $expected_closing_date The expected closing date of this quotation, represented in ATOM-format.
     *
     * @return $this
     */
    public function setExpectedClosingDate($expected_closing_date)
    {
        $this->container['expected_closing_date'] = $expected_closing_date;

        return $this;
    }

    /**
     * Gets commission_percentage
     *
     * @return string
     */
    public function getCommissionPercentage()
    {
        return $this->container['commission_percentage'];
    }

    /**
     * Sets commission_percentage
     *
     * @param string $commission_percentage The commission percentage of this quotation.
     *
     * @return $this
     */
    public function setCommissionPercentage($commission_percentage)
    {
        $this->container['commission_percentage'] = $commission_percentage;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return int
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param int $salutation The salutation of this quotation.
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets salutation_text
     *
     * @return string
     */
    public function getSalutationText()
    {
        return $this->container['salutation_text'];
    }

    /**
     * Sets salutation_text
     *
     * @param string $salutation_text The salutation text of the quotation.
     *
     * @return $this
     */
    public function setSalutationText($salutation_text)
    {
        if (!is_null($salutation_text) && (mb_strlen($salutation_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $salutation_text when calling QuotationListItem., must be smaller than or equal to 255.');
        }

        $this->container['salutation_text'] = $salutation_text;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The locale used by this quotation, e.g.: nl-NL.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets internal_note
     *
     * @return string
     */
    public function getInternalNote()
    {
        return $this->container['internal_note'];
    }

    /**
     * Sets internal_note
     *
     * @param string $internal_note The internal note for this quotation.
     *
     * @return $this
     */
    public function setInternalNote($internal_note)
    {
        $this->container['internal_note'] = $internal_note;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal The sum of all quotation line subtotals, excluding VAT.
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total The sum of all quotation line subtotals, including VAT.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\NestedEmployeeListItem
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\NestedEmployeeListItem $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\NestedContactListItem
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\NestedContactListItem $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\NestedBranchListItem
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\NestedBranchListItem $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\NestedProjectListItem
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\NestedProjectListItem $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets quotation_status
     *
     * @return \Swagger\Client\Model\NestedQuotationStatusListItem
     */
    public function getQuotationStatus()
    {
        return $this->container['quotation_status'];
    }

    /**
     * Sets quotation_status
     *
     * @param \Swagger\Client\Model\NestedQuotationStatusListItem $quotation_status quotation_status
     *
     * @return $this
     */
    public function setQuotationStatus($quotation_status)
    {
        $this->container['quotation_status'] = $quotation_status;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\NestedContactPersonListItem
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\NestedContactPersonListItem $contact_person contact_person
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets contact_person_text
     *
     * @return string
     */
    public function getContactPersonText()
    {
        return $this->container['contact_person_text'];
    }

    /**
     * Sets contact_person_text
     *
     * @param string $contact_person_text The contact person text of the quotation.
     *
     * @return $this
     */
    public function setContactPersonText($contact_person_text)
    {
        if (!is_null($contact_person_text) && (mb_strlen($contact_person_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_text when calling QuotationListItem., must be smaller than or equal to 255.');
        }

        $this->container['contact_person_text'] = $contact_person_text;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


