<?php
/**
 * InvoiceListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bouw7 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'project' => '\Swagger\Client\Model\NestedProjectListItem',
        'invoice_number' => 'string',
        'debtor_number' => 'string',
        'status' => 'int',
        'is_collective' => 'bool',
        'is_credit' => 'bool',
        'division' => '\Swagger\Client\Model\NestedDivisionListItem',
        'branch' => '\Swagger\Client\Model\NestedBranchListItem',
        'contact' => '\Swagger\Client\Model\NestedContactListItem',
        'contact_person_name' => 'string',
        'date' => 'string',
        'date_paid' => 'string',
        'sub_total' => 'string',
        'vat_total' => 'string',
        'total' => 'string',
        'is_booked_in_exact' => 'bool',
        'is_booked_in_twinfield' => 'bool',
        'is_booked_in_afas' => 'bool',
        'is_booked_in_mareon' => 'bool',
        'work_address' => 'string',
        'note' => 'string',
        'is_mailed' => 'bool',
        'mail_date' => 'string',
        'created_by' => '\Swagger\Client\Model\BlameableUser',
        'created_at' => 'string',
        'updated_by' => '\Swagger\Client\Model\BlameableUser',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'project' => null,
        'invoice_number' => null,
        'debtor_number' => null,
        'status' => null,
        'is_collective' => null,
        'is_credit' => null,
        'division' => null,
        'branch' => null,
        'contact' => null,
        'contact_person_name' => null,
        'date' => null,
        'date_paid' => null,
        'sub_total' => null,
        'vat_total' => null,
        'total' => null,
        'is_booked_in_exact' => null,
        'is_booked_in_twinfield' => null,
        'is_booked_in_afas' => null,
        'is_booked_in_mareon' => null,
        'work_address' => null,
        'note' => null,
        'is_mailed' => null,
        'mail_date' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_by' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project' => 'project',
        'invoice_number' => 'invoiceNumber',
        'debtor_number' => 'debtorNumber',
        'status' => 'status',
        'is_collective' => 'isCollective',
        'is_credit' => 'isCredit',
        'division' => 'division',
        'branch' => 'branch',
        'contact' => 'contact',
        'contact_person_name' => 'contactPersonName',
        'date' => 'date',
        'date_paid' => 'datePaid',
        'sub_total' => 'subTotal',
        'vat_total' => 'vatTotal',
        'total' => 'total',
        'is_booked_in_exact' => 'isBookedInExact',
        'is_booked_in_twinfield' => 'isBookedInTwinfield',
        'is_booked_in_afas' => 'isBookedInAfas',
        'is_booked_in_mareon' => 'isBookedInMareon',
        'work_address' => 'workAddress',
        'note' => 'note',
        'is_mailed' => 'isMailed',
        'mail_date' => 'mailDate',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project' => 'setProject',
        'invoice_number' => 'setInvoiceNumber',
        'debtor_number' => 'setDebtorNumber',
        'status' => 'setStatus',
        'is_collective' => 'setIsCollective',
        'is_credit' => 'setIsCredit',
        'division' => 'setDivision',
        'branch' => 'setBranch',
        'contact' => 'setContact',
        'contact_person_name' => 'setContactPersonName',
        'date' => 'setDate',
        'date_paid' => 'setDatePaid',
        'sub_total' => 'setSubTotal',
        'vat_total' => 'setVatTotal',
        'total' => 'setTotal',
        'is_booked_in_exact' => 'setIsBookedInExact',
        'is_booked_in_twinfield' => 'setIsBookedInTwinfield',
        'is_booked_in_afas' => 'setIsBookedInAfas',
        'is_booked_in_mareon' => 'setIsBookedInMareon',
        'work_address' => 'setWorkAddress',
        'note' => 'setNote',
        'is_mailed' => 'setIsMailed',
        'mail_date' => 'setMailDate',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project' => 'getProject',
        'invoice_number' => 'getInvoiceNumber',
        'debtor_number' => 'getDebtorNumber',
        'status' => 'getStatus',
        'is_collective' => 'getIsCollective',
        'is_credit' => 'getIsCredit',
        'division' => 'getDivision',
        'branch' => 'getBranch',
        'contact' => 'getContact',
        'contact_person_name' => 'getContactPersonName',
        'date' => 'getDate',
        'date_paid' => 'getDatePaid',
        'sub_total' => 'getSubTotal',
        'vat_total' => 'getVatTotal',
        'total' => 'getTotal',
        'is_booked_in_exact' => 'getIsBookedInExact',
        'is_booked_in_twinfield' => 'getIsBookedInTwinfield',
        'is_booked_in_afas' => 'getIsBookedInAfas',
        'is_booked_in_mareon' => 'getIsBookedInMareon',
        'work_address' => 'getWorkAddress',
        'note' => 'getNote',
        'is_mailed' => 'getIsMailed',
        'mail_date' => 'getMailDate',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['debtor_number'] = isset($data['debtor_number']) ? $data['debtor_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_collective'] = isset($data['is_collective']) ? $data['is_collective'] : null;
        $this->container['is_credit'] = isset($data['is_credit']) ? $data['is_credit'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['vat_total'] = isset($data['vat_total']) ? $data['vat_total'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['is_booked_in_exact'] = isset($data['is_booked_in_exact']) ? $data['is_booked_in_exact'] : null;
        $this->container['is_booked_in_twinfield'] = isset($data['is_booked_in_twinfield']) ? $data['is_booked_in_twinfield'] : null;
        $this->container['is_booked_in_afas'] = isset($data['is_booked_in_afas']) ? $data['is_booked_in_afas'] : null;
        $this->container['is_booked_in_mareon'] = isset($data['is_booked_in_mareon']) ? $data['is_booked_in_mareon'] : null;
        $this->container['work_address'] = isset($data['work_address']) ? $data['work_address'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['is_mailed'] = isset($data['is_mailed']) ? $data['is_mailed'] : null;
        $this->container['mail_date'] = isset($data['mail_date']) ? $data['mail_date'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of invoice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\NestedProjectListItem
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\NestedProjectListItem $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The number of invoice.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets debtor_number
     *
     * @return string
     */
    public function getDebtorNumber()
    {
        return $this->container['debtor_number'];
    }

    /**
     * Sets debtor_number
     *
     * @param string $debtor_number The debtor number of the contact associated with this invoice.
     *
     * @return $this
     */
    public function setDebtorNumber($debtor_number)
    {
        $this->container['debtor_number'] = $debtor_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status The status of the invoice. (0 = Open, 1 = Expired, 2 = Paid, 3 = Draft)
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_collective
     *
     * @return bool
     */
    public function getIsCollective()
    {
        return $this->container['is_collective'];
    }

    /**
     * Sets is_collective
     *
     * @param bool $is_collective Whether this is a collective invoice, containing lines associated with different projects.
     *
     * @return $this
     */
    public function setIsCollective($is_collective)
    {
        $this->container['is_collective'] = $is_collective;

        return $this;
    }

    /**
     * Gets is_credit
     *
     * @return bool
     */
    public function getIsCredit()
    {
        return $this->container['is_credit'];
    }

    /**
     * Sets is_credit
     *
     * @param bool $is_credit Whether this is a credit invoice.
     *
     * @return $this
     */
    public function setIsCredit($is_credit)
    {
        $this->container['is_credit'] = $is_credit;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \Swagger\Client\Model\NestedDivisionListItem
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \Swagger\Client\Model\NestedDivisionListItem $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \Swagger\Client\Model\NestedBranchListItem
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \Swagger\Client\Model\NestedBranchListItem $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\NestedContactListItem
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\NestedContactListItem $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name The contact person for this invoice. Value can be NULL if undefined.
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date The invoice date in YYYY-MM-DD format, or NULL if the invoice date has not been set.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return string
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param string $date_paid The date when the invoice was paid in YYYY-MM-DD format, or NULL if the invoice is unpaid.
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return string
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param string $sub_total The sum of all invoice line subtotals, excluding VAT.
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets vat_total
     *
     * @return string
     */
    public function getVatTotal()
    {
        return $this->container['vat_total'];
    }

    /**
     * Sets vat_total
     *
     * @param string $vat_total The sum of all invoice line VAT totals.
     *
     * @return $this
     */
    public function setVatTotal($vat_total)
    {
        $this->container['vat_total'] = $vat_total;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total The sum of all invoice line subtotals, including VAT.
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets is_booked_in_exact
     *
     * @return bool
     */
    public function getIsBookedInExact()
    {
        return $this->container['is_booked_in_exact'];
    }

    /**
     * Sets is_booked_in_exact
     *
     * @param bool $is_booked_in_exact Whether this invoice has been booked into your Exact administration.
     *
     * @return $this
     */
    public function setIsBookedInExact($is_booked_in_exact)
    {
        $this->container['is_booked_in_exact'] = $is_booked_in_exact;

        return $this;
    }

    /**
     * Gets is_booked_in_twinfield
     *
     * @return bool
     */
    public function getIsBookedInTwinfield()
    {
        return $this->container['is_booked_in_twinfield'];
    }

    /**
     * Sets is_booked_in_twinfield
     *
     * @param bool $is_booked_in_twinfield Whether this invoice has been booked into your Twinfield administration.
     *
     * @return $this
     */
    public function setIsBookedInTwinfield($is_booked_in_twinfield)
    {
        $this->container['is_booked_in_twinfield'] = $is_booked_in_twinfield;

        return $this;
    }

    /**
     * Gets is_booked_in_afas
     *
     * @return bool
     */
    public function getIsBookedInAfas()
    {
        return $this->container['is_booked_in_afas'];
    }

    /**
     * Sets is_booked_in_afas
     *
     * @param bool $is_booked_in_afas Whether this invoice has been booked into your AFAS administration.
     *
     * @return $this
     */
    public function setIsBookedInAfas($is_booked_in_afas)
    {
        $this->container['is_booked_in_afas'] = $is_booked_in_afas;

        return $this;
    }

    /**
     * Gets is_booked_in_mareon
     *
     * @return bool
     */
    public function getIsBookedInMareon()
    {
        return $this->container['is_booked_in_mareon'];
    }

    /**
     * Sets is_booked_in_mareon
     *
     * @param bool $is_booked_in_mareon Whether this invoice has been booked into your Mareon administration.
     *
     * @return $this
     */
    public function setIsBookedInMareon($is_booked_in_mareon)
    {
        $this->container['is_booked_in_mareon'] = $is_booked_in_mareon;

        return $this;
    }

    /**
     * Gets work_address
     *
     * @return string
     */
    public function getWorkAddress()
    {
        return $this->container['work_address'];
    }

    /**
     * Sets work_address
     *
     * @param string $work_address The work address of this invoice.
     *
     * @return $this
     */
    public function setWorkAddress($work_address)
    {
        $this->container['work_address'] = $work_address;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note The note of this invoice.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets is_mailed
     *
     * @return bool
     */
    public function getIsMailed()
    {
        return $this->container['is_mailed'];
    }

    /**
     * Sets is_mailed
     *
     * @param bool $is_mailed Whether this invoice has been mailed.
     *
     * @return $this
     */
    public function setIsMailed($is_mailed)
    {
        $this->container['is_mailed'] = $is_mailed;

        return $this;
    }

    /**
     * Gets mail_date
     *
     * @return string
     */
    public function getMailDate()
    {
        return $this->container['mail_date'];
    }

    /**
     * Sets mail_date
     *
     * @param string $mail_date The date and time the invoice was mailed.
     *
     * @return $this
     */
    public function setMailDate($mail_date)
    {
        $this->container['mail_date'] = $mail_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\BlameableUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\BlameableUser
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\BlameableUser $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The creation date of the object in ATOM/ISO-8601 format
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


